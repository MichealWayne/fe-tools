{"id":1395,"name":"writeFile","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-utils/src/fs/fsFuncs.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/fs/fsFuncs.ts","line":248,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/fs/fsFuncs.ts#L248"}],"signatures":[{"id":1396,"name":"writeFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"writeFile"}]},{"tag":"@description","content":[{"kind":"text","text":"异步写入数据到文件，根据需要创建目录。Asynchronously writes data to a file, creating directories as needed with automatic directory structure creation."}]},{"tag":"@returns","content":[{"kind":"text","text":"成功写入时解析为true的Promise。Promise that resolves to true on successful write"}]},{"tag":"@throws","content":[{"kind":"text","text":"如果fileData为空或写入操作失败则拒绝。Rejects if fileData is empty or write operation fails"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Write a new file\nawait writeFile('./output.txt', 'Hello World');\nconsole.log('File written successfully');\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Append to existing file\nawait writeFile('./log.txt', 'New log entry\\n', false);\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Write with error handling\ntry {\n  await writeFile('./config/settings.json', JSON.stringify(config));\n  console.log('Configuration saved');\n} catch (error) {\n  console.error('Failed to save configuration:', error);\n}\n```"}]}]},"parameters":[{"id":1397,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要写入的文件路径。The file path to write to"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>要写入的文件路径。The file path to write to</p>\n"}},{"id":1398,"name":"fileData","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要写入文件的内容。The content to write to the file"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>要写入文件的内容。The content to write to the file</p>\n"}},{"id":1399,"name":"replace","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"如果为true，覆盖现有文件；如果为false，追加到现有文件。If true, overwrites existing file; if false, appends to existing file"}]},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true","text":{"comment":"<p>如果为true，覆盖现有文件；如果为false，追加到现有文件。If true, overwrites existing file; if false, appends to existing file</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"NodeUtils.Function.writeFile","hash":"writeFile"},"text":{"comment":"<h5>Function:</h5><p>writeFile</p>\n<h5>Description:</h5><p>异步写入数据到文件，根据需要创建目录。Asynchronously writes data to a file, creating directories as needed with automatic directory structure creation.</p>\n<h5>Returns:</h5><p>成功写入时解析为true的Promise。Promise that resolves to true on successful write</p>\n<h5>Throws:</h5><p>如果fileData为空或写入操作失败则拒绝。Rejects if fileData is empty or write operation fails</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Write a new file</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-en\">writeFile</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./output.txt<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello World<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>File written successfully<span class=\"pl-pds\">'</span></span>);\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Append to existing file</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-en\">writeFile</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./log.txt<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>New log entry<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">false</span>);\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Write with error handling</span>\n<span class=\"pl-k\">try</span> {\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">writeFile</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./config/settings.json<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">stringify</span>(<span class=\"pl-smi\">config</span>));\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Configuration saved<span class=\"pl-pds\">'</span></span>);\n} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Failed to save configuration:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>);\n}\n</code></pre>\n"},"sources":[{"fileName":"packages/node-utils/src/fs/fsFuncs.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/fs/fsFuncs.ts","line":248,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/fs/fsFuncs.ts#L248"}],"parentId":1395}],"is":{"declaration":true},"location":{"query":"NodeUtils.Function.writeFile","hash":""},"text":{},"parentId":743}
