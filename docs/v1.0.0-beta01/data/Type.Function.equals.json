{"id":729,"name":"equals","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":389,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L389"}],"signatures":[{"id":730,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"equals"}]},{"tag":"@description","content":[{"kind":"text","text":"在两个值之间执行深度相等比较。Performs deep equality comparison between two values"}]},{"tag":"@returns","content":[{"kind":"text","text":"如果值深度相等则返回true，否则返回false。True if values are deeply equal, false otherwise"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Primitive values\nequals(1, 1); // -> true\nequals('hello', 'hello'); // -> true\nequals(true, true); // -> true\nequals(null, null); // -> true\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Arrays (deep comparison)\nequals([1, 2, 3], [1, 2, 3]); // -> true\nequals([1, [2, 3]], [1, [2, 3]]); // -> true\nequals([1, 2, 3], [1, 2, 4]); // -> false\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Objects (deep comparison)\nequals({ a: 1, b: 2 }, { a: 1, b: 2 }); // -> true\nequals({ a: 1, b: { c: 3 } }, { a: 1, b: { c: 3 } }); // -> true\nequals({ a: 1 }, { a: 1, b: 2 }); // -> false (different keys)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Date objects\nconst date1 = new Date('2022-01-01');\nconst date2 = new Date('2022-01-01');\nequals(date1, date2); // -> true (same timestamp)\nequals(new Date('2022-01-01'), new Date('2022-01-02')); // -> false\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Mixed types\nequals(1, '1'); // -> false (different types)\nequals([], {}); // -> false (different constructors)\nequals(null, undefined); // -> false\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Complex nested structures\nconst obj1 = { users: [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }] };\nconst obj2 = { users: [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }] };\nequals(obj1, obj2); // -> true\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Reference vs value equality\nconst arr = [1, 2, 3];\nequals(arr, arr); // -> true (same reference)\nequals(arr, [1, 2, 3]); // -> true (same values)\n```"}]}]},"parameters":[{"id":731,"name":"a","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要比较的第一个值。First value to compare"}]},"type":{"type":"intrinsic","name":"any"},"text":{"comment":"<p>要比较的第一个值。First value to compare</p>\n"}},{"id":732,"name":"b","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要比较的第二个值。Second value to compare"}]},"type":{"type":"intrinsic","name":"any"},"text":{"comment":"<p>要比较的第二个值。Second value to compare</p>\n"}}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":false},"location":{"query":"Type.Function.equals","hash":"equals"},"text":{"comment":"<h5>Function:</h5><p>equals</p>\n<h5>Description:</h5><p>在两个值之间执行深度相等比较。Performs deep equality comparison between two values</p>\n<h5>Returns:</h5><p>如果值深度相等则返回true，否则返回false。True if values are deeply equal, false otherwise</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Primitive values</span>\n<span class=\"pl-en\">equals</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">equals</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">equals</span>(<span class=\"pl-c1\">true</span>, <span class=\"pl-c1\">true</span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">equals</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Arrays (deep comparison)</span>\n<span class=\"pl-en\">equals</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">equals</span>([<span class=\"pl-c1\">1</span>, [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]], [<span class=\"pl-c1\">1</span>, [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]]); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">equals</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>]); <span class=\"pl-c\">// -> false</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Objects (deep comparison)</span>\n<span class=\"pl-en\">equals</span>({ a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-c1\">2</span> }, { a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-c1\">2</span> }); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">equals</span>({ a: <span class=\"pl-c1\">1</span>, b: { c: <span class=\"pl-c1\">3</span> } }, { a: <span class=\"pl-c1\">1</span>, b: { c: <span class=\"pl-c1\">3</span> } }); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">equals</span>({ a: <span class=\"pl-c1\">1</span> }, { a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-c1\">2</span> }); <span class=\"pl-c\">// -> false (different keys)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Date objects</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">date1</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Date</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2022-01-01<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">date2</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Date</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2022-01-01<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">date1</span>, <span class=\"pl-smi\">date2</span>); <span class=\"pl-c\">// -> true (same timestamp)</span>\n<span class=\"pl-en\">equals</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Date</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2022-01-01<span class=\"pl-pds\">'</span></span>), <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Date</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2022-01-02<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\">// -> false</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Mixed types</span>\n<span class=\"pl-en\">equals</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> false (different types)</span>\n<span class=\"pl-en\">equals</span>([], {}); <span class=\"pl-c\">// -> false (different constructors)</span>\n<span class=\"pl-en\">equals</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">undefined</span>); <span class=\"pl-c\">// -> false</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Complex nested structures</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">obj1</span> <span class=\"pl-k\">=</span> { users: [{ id: <span class=\"pl-c1\">1</span>, name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span> }, { id: <span class=\"pl-c1\">2</span>, name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Jane<span class=\"pl-pds\">'</span></span> }] };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">obj2</span> <span class=\"pl-k\">=</span> { users: [{ id: <span class=\"pl-c1\">1</span>, name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span> }, { id: <span class=\"pl-c1\">2</span>, name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Jane<span class=\"pl-pds\">'</span></span> }] };\n<span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">obj1</span>, <span class=\"pl-smi\">obj2</span>); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Reference vs value equality</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">arr</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>];\n<span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">arr</span>, <span class=\"pl-smi\">arr</span>); <span class=\"pl-c\">// -> true (same reference)</span>\n<span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">arr</span>, [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]); <span class=\"pl-c\">// -> true (same values)</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":389,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L389"}],"parentId":729}],"is":{"declaration":true},"location":{"query":"Type.Function.equals","hash":""},"text":{},"parentId":710}
