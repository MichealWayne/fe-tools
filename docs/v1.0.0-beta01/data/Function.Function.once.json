{"id":431,"name":"once","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":295,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L295"}],"signatures":[{"id":432,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"once"}]},{"tag":"@description","content":[{"kind":"text","text":"创建一个只能执行一次的函数，后续调用将被忽略。Creates a function that can only be executed once, subsequent calls are ignored"}]},{"tag":"@returns","content":[{"kind":"text","text":"只在第一次调用时执行的函数。Function that executes only on first call"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\nfunction log() {\n  console.log('This will only log once');\n}\n\nconst logOnce = once(log);\nlogOnce(); // -> 'This will only log once'\nlogOnce(); // -> (no output)\nlogOnce(); // -> (no output)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Initialization function\nconst initialize = once(() => {\n  console.log('App initialized');\n  // Setup code here...\n});\n\ninitialize(); // Runs initialization\ninitialize(); // Does nothing\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Event handler that should only run once\nconst handleFirstClick = once((event) => {\n  console.log('First click detected!', event.target);\n});\n\nbutton.addEventListener('click', handleFirstClick);\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"// API call that should only happen once\nconst fetchUserData = once(async (userId) => {\n  const response = await fetch("},{"kind":"code","text":"`/api/users/${userId}`"},{"kind":"text","text":");\n  return response.json();\n});"}]}]},"parameters":[{"id":433,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"只执行一次的函数。Function to execute only once"}]},"type":{"type":"reflection","declaration":{"id":434,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":295,"character":25,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L295"}],"signatures":[{"id":435,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":436,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"unknown"}}]}},"text":{"comment":"<p>只执行一次的函数。Function to execute only once</p>\n"}}],"type":{"type":"reflection","declaration":{"id":437,"name":"once","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":297,"character":9,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L297"}],"signatures":[{"id":438,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":439,"name":"argus","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"text":{}}],"type":{"type":"intrinsic","name":"void"},"is":{"declaration":false},"location":{"query":"Function.Function.once","hash":"once.__type"},"text":{},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":297,"character":9,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L297"}],"parentId":431}],"location":{"query":"Function.Function.once","hash":"once"}}},"is":{"declaration":false},"location":{"query":"Function.Function.once","hash":"once"},"text":{"comment":"<h5>Function:</h5><p>once</p>\n<h5>Description:</h5><p>创建一个只能执行一次的函数，后续调用将被忽略。Creates a function that can only be executed once, subsequent calls are ignored</p>\n<h5>Returns:</h5><p>只在第一次调用时执行的函数。Function that executes only on first call</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">log</span>() {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>This will only log once<span class=\"pl-pds\">'</span></span>);\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">logOnce</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">once</span>(<span class=\"pl-smi\">log</span>);\n<span class=\"pl-en\">logOnce</span>(); <span class=\"pl-c\">// -> 'This will only log once'</span>\n<span class=\"pl-en\">logOnce</span>(); <span class=\"pl-c\">// -> (no output)</span>\n<span class=\"pl-en\">logOnce</span>(); <span class=\"pl-c\">// -> (no output)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Initialization function</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">initialize</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">once</span>(() <span class=\"pl-k\">=></span> {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>App initialized<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-c\">// Setup code here...</span>\n});\n\n<span class=\"pl-en\">initialize</span>(); <span class=\"pl-c\">// Runs initialization</span>\n<span class=\"pl-en\">initialize</span>(); <span class=\"pl-c\">// Does nothing</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Event handler that should only run once</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">handleFirstClick</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">once</span>((<span class=\"pl-v\">event</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>First click detected!<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">event</span>.<span class=\"pl-c1\">target</span>);\n});\n\n<span class=\"pl-smi\">button</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>click<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">handleFirstClick</span>);\n</code></pre>\n<h5>Example:</h5><p>// API call that should only happen once\nconst fetchUserData = once(async (userId) =&gt; {\n  const response = await fetch(<code>/api/users/${userId}</code>);\n  return response.json();\n});</p>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":295,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L295"}],"parentId":431}],"is":{"declaration":true},"location":{"query":"Function.Function.once","hash":""},"text":{},"parentId":391}
