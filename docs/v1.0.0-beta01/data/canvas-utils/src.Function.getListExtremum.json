{"id":1651,"name":"getListExtremum","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/calculate.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/calculate.ts","line":102,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/calculate.ts#L102"}],"signatures":[{"id":1652,"name":"getListExtremum","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"getListExtremum"}]},{"tag":"@description","content":[{"kind":"text","text":"Efficiently finds both the minimum and maximum values in an array of numbers in a single pass. More performant than calling min() and max() separately for large datasets."}]},{"tag":"@returns","content":[{"kind":"text","text":"极值对象。Object containing both min and max values"}]},{"tag":"@returns","content":[{"kind":"text","text":"returns.min - The smallest number in the array"}]},{"tag":"@returns","content":[{"kind":"text","text":"returns.max - The largest number in the array"}]},{"tag":"@throws","content":[{"kind":"text","text":"Throws an error if the array is empty"}]},{"tag":"@example","content":[{"kind":"text","text":"// Basic extremum finding\r\nconst data = [1, 3, 5, 2, 2, 4, 5, 7];\r\nconst { min, max } = getListExtremum(data);\r\nconsole.log("},{"kind":"code","text":"`Range: ${min} to ${max}`"},{"kind":"text","text":"); // Range: 1 to 7"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Chart axis calculation\r\nconst chartValues = [25, 40, 15, 60, 30, 45];\r\nconst { min: dataMin, max: dataMax } = getListExtremum(chartValues);\r\n\r\n// Add padding for better visualization\r\nconst padding = (dataMax - dataMin) * 0.1;\r\nconst yAxisMin = dataMin - padding;\r\nconst yAxisMax = dataMax + padding;\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Performance comparison for large datasets\r\nconst largeDataset = new Array(10000).fill(0).map(() => Math.random() * 100);\r\n\r\n// Efficient: single pass\r\nconst { min, max } = getListExtremum(largeDataset);\r\n\r\n// Less efficient: two passes\r\n// const min = min(largeDataset);\r\n// const max = max(largeDataset);\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"min","target":1665},{"kind":"text","text":" - For finding only minimum values"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"max","target":1668},{"kind":"text","text":" - For finding only maximum values"},{"kind":"text","text":"\n"}]}]},"parameters":[{"id":1653,"name":"arr","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"数值列表。Array of numbers to analyze (must not be empty)"}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"number"}},"text":{"comment":"<p>数值列表。Array of numbers to analyze (must not be empty)</p>\n"}}],"type":{"type":"reference","id":1751,"name":"ListExtremum"},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.getListExtremum","hash":"getListExtremum"},"text":{"comment":"<h5>Function:</h5><p>getListExtremum</p>\n<h5>Description:</h5><p>Efficiently finds both the minimum and maximum values in an array of numbers in a single pass. More performant than calling min() and max() separately for large datasets.</p>\n<h5>Returns:</h5><p>极值对象。Object containing both min and max values</p>\n<h5>Returns:</h5><p>returns.min - The smallest number in the array</p>\n<h5>Returns:</h5><p>returns.max - The largest number in the array</p>\n<h5>Throws:</h5><p>Throws an error if the array is empty</p>\n<h5>Example:</h5><p>// Basic extremum finding\nconst data = [1, 3, 5, 2, 2, 4, 5, 7];\nconst { min, max } = getListExtremum(data);\nconsole.log(<code>Range: ${min} to ${max}</code>); // Range: 1 to 7</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Chart axis calculation</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">chartValues</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">25</span>, <span class=\"pl-c1\">40</span>, <span class=\"pl-c1\">15</span>, <span class=\"pl-c1\">60</span>, <span class=\"pl-c1\">30</span>, <span class=\"pl-c1\">45</span>];\n<span class=\"pl-k\">const</span> { <span class=\"pl-v\">min</span>: <span class=\"pl-c1\">dataMin</span>, <span class=\"pl-v\">max</span>: <span class=\"pl-c1\">dataMax</span> } <span class=\"pl-k\">=</span> <span class=\"pl-en\">getListExtremum</span>(<span class=\"pl-smi\">chartValues</span>);\n\n<span class=\"pl-c\">// Add padding for better visualization</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">padding</span> <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">dataMax</span> <span class=\"pl-k\">-</span> <span class=\"pl-smi\">dataMin</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">0.1</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">yAxisMin</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">dataMin</span> <span class=\"pl-k\">-</span> <span class=\"pl-smi\">padding</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">yAxisMax</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">dataMax</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">padding</span>;\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Performance comparison for large datasets</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">largeDataset</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Array</span>(<span class=\"pl-c1\">10000</span>).<span class=\"pl-en\">fill</span>(<span class=\"pl-c1\">0</span>).<span class=\"pl-en\">map</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">random</span>() <span class=\"pl-k\">*</span> <span class=\"pl-c1\">100</span>);\n\n<span class=\"pl-c\">// Efficient: single pass</span>\n<span class=\"pl-k\">const</span> { <span class=\"pl-c1\">min</span>, <span class=\"pl-c1\">max</span> } <span class=\"pl-k\">=</span> <span class=\"pl-en\">getListExtremum</span>(<span class=\"pl-smi\">largeDataset</span>);\n\n<span class=\"pl-c\">// Less efficient: two passes</span>\n<span class=\"pl-c\">// const min = min(largeDataset);</span>\n<span class=\"pl-c\">// const max = max(largeDataset);</span>\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><ul>\n<li><a href=\"1665\">min</a> - For finding only minimum values</li>\n<li><a href=\"1668\">max</a> - For finding only maximum values</li>\n</ul>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/calculate.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/calculate.ts","line":102,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/calculate.ts#L102"}],"parentId":1651}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.getListExtremum","hash":""},"text":{},"parentId":1168}
