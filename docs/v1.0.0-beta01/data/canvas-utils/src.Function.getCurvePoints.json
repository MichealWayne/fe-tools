{"id":1727,"name":"getCurvePoints","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/curve.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/curve.ts","line":139,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/curve.ts#L139"}],"signatures":[{"id":1728,"name":"getCurvePoints","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"getCurvePoints"}]},{"tag":"@description","content":[{"kind":"text","text":"生成用于创建平滑曲线的控制点。Generates control points for creating smooth curves through a series of path points. Uses vector mathematics to calculate intermediate control points that create natural-looking curved lines when used with canvas quadratic or bezier curve functions."}]},{"tag":"@returns","content":[{"kind":"text","text":"用于平滑曲线生成的控制点向量数组。Array of control point vectors for smooth curve generation"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic curve generation\r\nconst pathPoints = [\r\n  { x: 10, y: 100 },\r\n  { x: 50, y: 50 },\r\n  { x: 100, y: 80 },\r\n  { x: 150, y: 30 },\r\n  { x: 200, y: 90 }\r\n];\r\n\r\nconst controlPoints = getCurvePoints(pathPoints);\r\n\r\n// Draw smooth curve using control points\r\nctx.beginPath();\r\nctx.moveTo(pathPoints[0].x, pathPoints[0].y);\r\n\r\nfor (let i = 0; i < controlPoints.length; i += 2) {\r\n  const cp1 = controlPoints[i];\r\n  const cp2 = controlPoints[i + 1];\r\n  const endPoint = pathPoints[Math.floor(i / 2) + 2];\r\n\r\n  ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, endPoint.x, endPoint.y);\r\n}\r\n\r\nctx.stroke();\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Smooth line chart\r\nfunction drawSmoothChart(ctx, dataPoints) {\r\n  if (dataPoints.length < 3) {\r\n    // Fall back to straight lines for insufficient points\r\n    ctx.beginPath();\r\n    ctx.moveTo(dataPoints[0].x, dataPoints[0].y);\r\n    dataPoints.slice(1).forEach(point => {\r\n      ctx.lineTo(point.x, point.y);\r\n    });\r\n    ctx.stroke();\r\n    return;\r\n  }\r\n\r\n  const controlPoints = getCurvePoints(dataPoints);\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(dataPoints[0].x, dataPoints[0].y);\r\n\r\n  // Create smooth curves between all points\r\n  for (let i = 0; i < controlPoints.length; i += 2) {\r\n    const cp1 = controlPoints[i];\r\n    const cp2 = controlPoints[i + 1];\r\n    const endPoint = dataPoints[Math.floor(i / 2) + 2];\r\n\r\n    ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, endPoint.x, endPoint.y);\r\n  }\r\n\r\n  ctx.stroke();\r\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Interactive drawing with smooth curves\r\nlet drawingPoints = [];\r\n\r\ncanvas.addEventListener('mousemove', (e) => {\r\n  if (isDrawing) {\r\n    drawingPoints.push({ x: e.offsetX, y: e.offsetY });\r\n\r\n    if (drawingPoints.length >= 3) {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      const controlPoints = getCurvePoints(drawingPoints);\r\n      // Redraw smooth curve with all points\r\n      drawSmoothChart(ctx, drawingPoints);\r\n    }\r\n  }\r\n});\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"Vector"},{"kind":"text","text":" - The Vector class used for control point calculations"}]}]},"parameters":[{"id":1729,"name":"paths","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"用于创建曲线的路径点数组（至少需要3个点）。Array of path points to create curves through (minimum 3 points required)"}]},"type":{"type":"array","elementType":{"type":"reference","id":1747,"name":"PointPosition"}},"text":{"comment":"<p>用于创建曲线的路径点数组（至少需要3个点）。Array of path points to create curves through (minimum 3 points required)</p>\n"}}],"type":{"type":"array","elementType":{"type":"reference","name":"Vector"}},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.getCurvePoints","hash":"getCurvePoints"},"text":{"comment":"<h5>Function:</h5><p>getCurvePoints</p>\n<h5>Description:</h5><p>生成用于创建平滑曲线的控制点。Generates control points for creating smooth curves through a series of path points. Uses vector mathematics to calculate intermediate control points that create natural-looking curved lines when used with canvas quadratic or bezier curve functions.</p>\n<h5>Returns:</h5><p>用于平滑曲线生成的控制点向量数组。Array of control point vectors for smooth curve generation</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic curve generation</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">pathPoints</span> <span class=\"pl-k\">=</span> [\n  { x: <span class=\"pl-c1\">10</span>, y: <span class=\"pl-c1\">100</span> },\n  { x: <span class=\"pl-c1\">50</span>, y: <span class=\"pl-c1\">50</span> },\n  { x: <span class=\"pl-c1\">100</span>, y: <span class=\"pl-c1\">80</span> },\n  { x: <span class=\"pl-c1\">150</span>, y: <span class=\"pl-c1\">30</span> },\n  { x: <span class=\"pl-c1\">200</span>, y: <span class=\"pl-c1\">90</span> }\n];\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">controlPoints</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getCurvePoints</span>(<span class=\"pl-smi\">pathPoints</span>);\n\n<span class=\"pl-c\">// Draw smooth curve using control points</span>\n<span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">beginPath</span>();\n<span class=\"pl-smi\">ctx</span>.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-smi\">pathPoints</span>[<span class=\"pl-c1\">0</span>].<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">pathPoints</span>[<span class=\"pl-c1\">0</span>].<span class=\"pl-c1\">y</span>);\n\n<span class=\"pl-k\">for</span> (<span class=\"pl-k\">let</span> <span class=\"pl-smi\">i</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-smi\">i</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-smi\">controlPoints</span>.<span class=\"pl-c1\">length</span>; <span class=\"pl-smi\">i</span> <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">2</span>) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">cp1</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">controlPoints</span>[<span class=\"pl-smi\">i</span>];\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">cp2</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">controlPoints</span>[<span class=\"pl-smi\">i</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>];\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">endPoint</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">pathPoints</span>[<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">floor</span>(<span class=\"pl-smi\">i</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>];\n\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">bezierCurveTo</span>(<span class=\"pl-smi\">cp1</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">cp1</span>.<span class=\"pl-c1\">y</span>, <span class=\"pl-smi\">cp2</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">cp2</span>.<span class=\"pl-c1\">y</span>, <span class=\"pl-smi\">endPoint</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">endPoint</span>.<span class=\"pl-c1\">y</span>);\n}\n\n<span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">stroke</span>();\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Smooth line chart</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">drawSmoothChart</span>(<span class=\"pl-v\">ctx</span>, <span class=\"pl-v\">dataPoints</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">dataPoints</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-c1\">3</span>) {\n    <span class=\"pl-c\">// Fall back to straight lines for insufficient points</span>\n    <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">beginPath</span>();\n    <span class=\"pl-smi\">ctx</span>.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-smi\">dataPoints</span>[<span class=\"pl-c1\">0</span>].<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">dataPoints</span>[<span class=\"pl-c1\">0</span>].<span class=\"pl-c1\">y</span>);\n    <span class=\"pl-smi\">dataPoints</span>.<span class=\"pl-c1\">slice</span>(<span class=\"pl-c1\">1</span>).<span class=\"pl-c1\">forEach</span>(<span class=\"pl-v\">point</span> <span class=\"pl-k\">=></span> {\n      <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">lineTo</span>(<span class=\"pl-smi\">point</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">point</span>.<span class=\"pl-c1\">y</span>);\n    });\n    <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">stroke</span>();\n    <span class=\"pl-k\">return</span>;\n  }\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">controlPoints</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getCurvePoints</span>(<span class=\"pl-smi\">dataPoints</span>);\n\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">beginPath</span>();\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-smi\">dataPoints</span>[<span class=\"pl-c1\">0</span>].<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">dataPoints</span>[<span class=\"pl-c1\">0</span>].<span class=\"pl-c1\">y</span>);\n\n  <span class=\"pl-c\">// Create smooth curves between all points</span>\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">let</span> <span class=\"pl-smi\">i</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-smi\">i</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-smi\">controlPoints</span>.<span class=\"pl-c1\">length</span>; <span class=\"pl-smi\">i</span> <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">2</span>) {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">cp1</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">controlPoints</span>[<span class=\"pl-smi\">i</span>];\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">cp2</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">controlPoints</span>[<span class=\"pl-smi\">i</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>];\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">endPoint</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">dataPoints</span>[<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">floor</span>(<span class=\"pl-smi\">i</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>];\n\n    <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">bezierCurveTo</span>(<span class=\"pl-smi\">cp1</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">cp1</span>.<span class=\"pl-c1\">y</span>, <span class=\"pl-smi\">cp2</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">cp2</span>.<span class=\"pl-c1\">y</span>, <span class=\"pl-smi\">endPoint</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">endPoint</span>.<span class=\"pl-c1\">y</span>);\n  }\n\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">stroke</span>();\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Interactive drawing with smooth curves</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-smi\">drawingPoints</span> <span class=\"pl-k\">=</span> [];\n\n<span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>mousemove<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-v\">e</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">isDrawing</span>) {\n    <span class=\"pl-smi\">drawingPoints</span>.<span class=\"pl-c1\">push</span>({ x: <span class=\"pl-smi\">e</span>.<span class=\"pl-smi\">offsetX</span>, y: <span class=\"pl-smi\">e</span>.<span class=\"pl-smi\">offsetY</span> });\n\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">drawingPoints</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">>=</span> <span class=\"pl-c1\">3</span>) {\n      <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">clearRect</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">width</span>, <span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">height</span>);\n\n      <span class=\"pl-k\">const</span> <span class=\"pl-c1\">controlPoints</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getCurvePoints</span>(<span class=\"pl-smi\">drawingPoints</span>);\n      <span class=\"pl-c\">// Redraw smooth curve with all points</span>\n      <span class=\"pl-en\">drawSmoothChart</span>(<span class=\"pl-smi\">ctx</span>, <span class=\"pl-smi\">drawingPoints</span>);\n    }\n  }\n});\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><p><a href=\"undefined\">Vector</a> - The Vector class used for control point calculations</p>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/curve.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/curve.ts","line":139,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/curve.ts#L139"}],"parentId":1727}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.getCurvePoints","hash":""},"text":{},"parentId":1168}
