{"id":1730,"name":"mixins","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/decorators.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/decorators.ts","line":87,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/decorators.ts#L87"}],"signatures":[{"id":1731,"name":"mixins","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"mixins"}]},{"tag":"@description","content":[{"kind":"text","text":"实现混入模式的类装饰器。A class decorator that implements the mixin pattern by copying properties and methods from multiple source objects to the target class prototype. Enables multiple inheritance-like behavior in TypeScript classes."}]},{"tag":"@returns","content":[{"kind":"text","text":"应用混入的类装饰器函数。Class decorator function that applies the mixins"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Define mixin objects\r\nconst DrawingMixin = {\r\n  drawLine(x1, y1, x2, y2) {\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(x1, y1);\r\n    this.ctx.lineTo(x2, y2);\r\n    this.ctx.stroke();\r\n  }\r\n};\r\n\r\nconst ColorMixin = {\r\n  setColor(color) {\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.strokeStyle = color;\r\n  }\r\n};\r\n\r\n// Apply mixins to class\r\n@mixins(DrawingMixin, ColorMixin)\r\nclass MyChart {\r\n  constructor(canvas) {\r\n    this.ctx = canvas.getContext('2d');\r\n  }\r\n\r\n  render() {\r\n    this.setColor('#ff0000');  // From ColorMixin\r\n    this.drawLine(0, 0, 100, 100);  // From DrawingMixin\r\n  }\r\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Multiple chart types sharing common functionality\r\nconst AnimationMixin = {\r\n  startAnimation(duration = 1000) {\r\n    // Animation logic\r\n  },\r\n\r\n  stopAnimation() {\r\n    // Stop animation logic\r\n  }\r\n};\r\n\r\nconst EventMixin = {\r\n  addEventListener(event, handler) {\r\n    this.canvas.addEventListener(event, handler);\r\n  }\r\n};\r\n\r\n@mixins(AnimationMixin, EventMixin)\r\nclass BarChart {\r\n  // Bar chart specific implementation\r\n}\r\n\r\n@mixins(AnimationMixin, EventMixin)\r\nclass LineChart {\r\n  // Line chart specific implementation\r\n}\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]}]},"parameters":[{"id":1732,"name":"list","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"要混入到目标类的对象/类的可变数量参数。Variable number of objects/classes to mix into the target class"}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}},"text":{"comment":"<p>要混入到目标类的对象/类的可变数量参数。Variable number of objects/classes to mix into the target class</p>\n"}}],"type":{"type":"reflection","declaration":{"id":1733,"name":"mixins","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/canvas-utils/src/utils/decorators.ts","line":88,"character":9,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/decorators.ts#L88"}],"signatures":[{"id":1734,"name":"mixins","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1735,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"},"text":{}}],"type":{"type":"intrinsic","name":"void"},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.mixins","hash":"mixins.__type"},"text":{},"sources":[{"fileName":"packages/canvas-utils/src/utils/decorators.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/decorators.ts","line":88,"character":9,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/decorators.ts#L88"}],"parentId":1730}],"location":{"query":"canvas-utils/src.Function.mixins","hash":"mixins"}}},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.mixins","hash":"mixins"},"text":{"comment":"<h5>Function:</h5><p>mixins</p>\n<h5>Description:</h5><p>实现混入模式的类装饰器。A class decorator that implements the mixin pattern by copying properties and methods from multiple source objects to the target class prototype. Enables multiple inheritance-like behavior in TypeScript classes.</p>\n<h5>Returns:</h5><p>应用混入的类装饰器函数。Class decorator function that applies the mixins</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Define mixin objects</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">DrawingMixin</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">drawLine</span>(<span class=\"pl-v\">x1</span>, <span class=\"pl-v\">y1</span>, <span class=\"pl-v\">x2</span>, <span class=\"pl-v\">y2</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">beginPath</span>();\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">ctx</span>.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-smi\">x1</span>, <span class=\"pl-smi\">y1</span>);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">lineTo</span>(<span class=\"pl-smi\">x2</span>, <span class=\"pl-smi\">y2</span>);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">stroke</span>();\n  }\n};\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">ColorMixin</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">setColor</span>(<span class=\"pl-v\">color</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">ctx</span>.<span class=\"pl-smi\">fillStyle</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">color</span>;\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">ctx</span>.<span class=\"pl-smi\">strokeStyle</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">color</span>;\n  }\n};\n\n<span class=\"pl-c\">// Apply mixins to class</span>\n@<span class=\"pl-en\">mixins</span>(<span class=\"pl-smi\">DrawingMixin</span>, <span class=\"pl-smi\">ColorMixin</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MyChart</span> {\n  <span class=\"pl-k\">constructor</span>(<span class=\"pl-v\">canvas</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">getContext</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2d<span class=\"pl-pds\">'</span></span>);\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setColor</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>#ff0000<span class=\"pl-pds\">'</span></span>);  <span class=\"pl-c\">// From ColorMixin</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">drawLine</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">100</span>);  <span class=\"pl-c\">// From DrawingMixin</span>\n  }\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Multiple chart types sharing common functionality</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">AnimationMixin</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">startAnimation</span>(<span class=\"pl-v\">duration</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1000</span>) {\n    <span class=\"pl-c\">// Animation logic</span>\n  },\n\n  <span class=\"pl-en\">stopAnimation</span>() {\n    <span class=\"pl-c\">// Stop animation logic</span>\n  }\n};\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">EventMixin</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">addEventListener</span>(<span class=\"pl-v\">event</span>, <span class=\"pl-v\">handler</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-c1\">event</span>, <span class=\"pl-smi\">handler</span>);\n  }\n};\n\n@<span class=\"pl-en\">mixins</span>(<span class=\"pl-smi\">AnimationMixin</span>, <span class=\"pl-smi\">EventMixin</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">BarChart</span> {\n  <span class=\"pl-c\">// Bar chart specific implementation</span>\n}\n\n@<span class=\"pl-en\">mixins</span>(<span class=\"pl-smi\">AnimationMixin</span>, <span class=\"pl-smi\">EventMixin</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">LineChart</span> {\n  <span class=\"pl-c\">// Line chart specific implementation</span>\n}\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/decorators.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/decorators.ts","line":87,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/decorators.ts#L87"}],"parentId":1730}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.mixins","hash":""},"text":{},"parentId":1168}
