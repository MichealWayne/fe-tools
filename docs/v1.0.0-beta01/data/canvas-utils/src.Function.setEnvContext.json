{"id":1739,"name":"setEnvContext","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/decorators.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/decorators.ts","line":252,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/decorators.ts#L252"}],"signatures":[{"id":1740,"name":"setEnvContext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"setEnvContext"}]},{"tag":"@description","content":[{"kind":"text","text":"根据运行时环境自动设置适当的画布上下文的方法装饰器。A method decorator that automatically sets up the appropriate canvas context based on the runtime environment (web browser, WeChat mini-program, or Node.js). Handles canvas creation, sizing, and context initialization."}]},{"tag":"@returns","content":[{"kind":"text","text":"修改后的方法描述符。The modified method descriptor"}]},{"tag":"@throws","content":[{"kind":"text","text":"如果缺少所需的环境特定依赖项则抛出错误。Throws error if required environment-specific dependencies are missing"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Web browser usage\r\nclass WebChart {\r\n  constructor(element, options) {\r\n    this.$el = element; // DOM element\r\n    this.opts = options;\r\n  }\n```"}]},{"tag":"@setEnvContext","content":[{"kind":"text","text":"initialize() {\r\n    // After decoration, this.canvas and this.ctx are available\r\n    console.log(this.canvas); // HTMLCanvasElement\r\n    console.log(this.ctx);    // CanvasRenderingContext2D\r\n  }\r\n}\r\n\r\nconst chart = new WebChart(document.getElementById('chart'), {\r\n  width: 400,\r\n  height: 300\r\n});\r\nchart.initialize();"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// WeChat mini-program usage\r\nclass WeappChart {\r\n  constructor(options) {\r\n    this.opts = {\r\n      id: 'myCanvas', // Canvas component ID\r\n      width: 400,\r\n      height: 300,\r\n      ...options\r\n    };\r\n  }\n```"}]},{"tag":"@setEnvContext","content":[{"kind":"text","text":"setup() {\r\n    // Canvas context is automatically created for WeChat environment\r\n    this.ctx.fillStyle = '#ff0000';\r\n    this.ctx.fillRect(0, 0, 100, 100);\r\n    this.canvas.draw(); // WeChat-specific draw method\r\n  }\r\n}"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Node.js usage with node-canvas\r\nconst { createCanvas } = require('canvas');\r\n\r\nclass NodeChart {\r\n  constructor(options) {\r\n    this.opts = {\r\n      Canvas: { createCanvas }, // Provide Canvas implementation\r\n      width: 500,\r\n      height: 400,\r\n      handleOut: (canvas) => {\r\n        // Save canvas to file or stream\r\n        const fs = require('fs');\r\n        const buffer = canvas.toBuffer('image/png');\r\n        fs.writeFileSync('chart.png', buffer);\r\n      },\r\n      ...options\r\n    };\r\n  }\n```"}]},{"tag":"@setEnvContext","content":[{"kind":"text","text":"generate() {\r\n    // Canvas and context are ready for server-side rendering\r\n    this.ctx.fillStyle = '#0066cc';\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n}"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"createCanvasElem","target":1719},{"kind":"text","text":" - For web canvas element creation"}]}]},"parameters":[{"id":1741,"name":"chart","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"被装饰的图表实例。The chart instance being decorated"}]},"type":{"type":"intrinsic","name":"any"},"text":{"comment":"<p>被装饰的图表实例。The chart instance being decorated</p>\n"}},{"id":1742,"name":"_","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"方法名（未使用的参数）。The method name (unused parameter)"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>方法名（未使用的参数）。The method name (unused parameter)</p>\n"}},{"id":1743,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"方法描述符。The method descriptor"}]},"type":{"type":"reference","name":"PropertyDescriptor","qualifiedName":"PropertyDescriptor","package":"typescript"},"text":{"comment":"<p>方法描述符。The method descriptor</p>\n"}}],"type":{"type":"reference","name":"PropertyDescriptor","qualifiedName":"PropertyDescriptor","package":"typescript"},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.setEnvContext","hash":"setEnvContext"},"text":{"comment":"<h5>Function:</h5><p>setEnvContext</p>\n<h5>Description:</h5><p>根据运行时环境自动设置适当的画布上下文的方法装饰器。A method decorator that automatically sets up the appropriate canvas context based on the runtime environment (web browser, WeChat mini-program, or Node.js). Handles canvas creation, sizing, and context initialization.</p>\n<h5>Returns:</h5><p>修改后的方法描述符。The modified method descriptor</p>\n<h5>Throws:</h5><p>如果缺少所需的环境特定依赖项则抛出错误。Throws error if required environment-specific dependencies are missing</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Web browser usage</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">WebChart</span> {\n  <span class=\"pl-k\">constructor</span>(<span class=\"pl-v\">element</span>, <span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">$el</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">element</span>; <span class=\"pl-c\">// DOM element</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">opts</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">options</span>;\n  }\n</code></pre>\n<h5>Setenvcontext:</h5><p>initialize() {\n    // After decoration, this.canvas and this.ctx are available\n    console.log(this.canvas); // HTMLCanvasElement\n    console.log(this.ctx);    // CanvasRenderingContext2D\n  }\n}</p>\n<p>const chart = new WebChart(document.getElementById(&#39;chart&#39;), {\n  width: 400,\n  height: 300\n});\nchart.initialize();</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// WeChat mini-program usage</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">WeappChart</span> {\n  <span class=\"pl-k\">constructor</span>(<span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">opts</span> <span class=\"pl-k\">=</span> {\n      id: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>myCanvas<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c\">// Canvas component ID</span>\n      width: <span class=\"pl-c1\">400</span>,\n      height: <span class=\"pl-c1\">300</span>,\n      <span class=\"pl-k\">...</span><span class=\"pl-smi\">options</span>\n    };\n  }\n</code></pre>\n<h5>Setenvcontext:</h5><p>setup() {\n    // Canvas context is automatically created for WeChat environment\n    this.ctx.fillStyle = &#39;#ff0000&#39;;\n    this.ctx.fillRect(0, 0, 100, 100);\n    this.canvas.draw(); // WeChat-specific draw method\n  }\n}</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Node.js usage with node-canvas</span>\n<span class=\"pl-k\">const</span> { <span class=\"pl-c1\">createCanvas</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>canvas<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">NodeChart</span> {\n  <span class=\"pl-k\">constructor</span>(<span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">opts</span> <span class=\"pl-k\">=</span> {\n      Canvas: { <span class=\"pl-smi\">createCanvas</span> }, <span class=\"pl-c\">// Provide Canvas implementation</span>\n      width: <span class=\"pl-c1\">500</span>,\n      height: <span class=\"pl-c1\">400</span>,\n      <span class=\"pl-en\">handleOut</span>: (<span class=\"pl-v\">canvas</span>) <span class=\"pl-k\">=></span> {\n        <span class=\"pl-c\">// Save canvas to file or stream</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">fs</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>fs<span class=\"pl-pds\">'</span></span>);\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">buffer</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">canvas</span>.<span class=\"pl-en\">toBuffer</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image/png<span class=\"pl-pds\">'</span></span>);\n        <span class=\"pl-smi\">fs</span>.<span class=\"pl-en\">writeFileSync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>chart.png<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">buffer</span>);\n      },\n      <span class=\"pl-k\">...</span><span class=\"pl-smi\">options</span>\n    };\n  }\n</code></pre>\n<h5>Setenvcontext:</h5><p>generate() {\n    // Canvas and context are ready for server-side rendering\n    this.ctx.fillStyle = &#39;#0066cc&#39;;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n}</p>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><p><a href=\"1719\">createCanvasElem</a> - For web canvas element creation</p>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/decorators.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/decorators.ts","line":252,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/decorators.ts#L252"}],"parentId":1739}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.setEnvContext","hash":""},"text":{},"parentId":1168}
