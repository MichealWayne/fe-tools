{"id":1736,"name":"setAnimationHooks","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/decorators.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/decorators.ts","line":158,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/decorators.ts#L158"}],"signatures":[{"id":1737,"name":"setAnimationHooks","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"setAnimationHooks"}]},{"tag":"@description","content":[{"kind":"text","text":"为图表工厂类添加动画功能。Adds animation capabilities to chart factory classes by injecting a setAnimation method. The method uses the built-in animate function with configuration from the chart's options."}]},{"tag":"@returns","content":[{"kind":"text","text":"此函数直接修改类原型。This function modifies the class prototype directly"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Define a chart class\r\nclass PieChart {\r\n  constructor(options) {\r\n    this.chartjs = {\r\n      opts: {\r\n        duration: 1500,\r\n        onFinish: () => console.log('Animation complete')\r\n      }\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Chart rendering logic\r\n  }\r\n}\r\n\r\n// Add animation hooks\r\nsetAnimationHooks(PieChart);\r\n\r\n// Now the chart has animation capabilities\r\nconst chart = new PieChart({\r\n  duration: 2000,\r\n  onFinish: () => console.log('Pie chart animated!')\r\n});\r\n\r\n// Use the injected animation method\r\nchart.setAnimation((progress) => {\r\n  // Update chart based on animation progress (0 to 1)\r\n  chart.animationProgress = progress;\r\n  chart.render();\r\n});\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Multiple chart types with consistent animation\r\nclass BarChart {\r\n  constructor(options) {\r\n    this.chartjs = { opts: options };\r\n  }\r\n}\r\n\r\nclass LineChart {\r\n  constructor(options) {\r\n    this.chartjs = { opts: options };\r\n  }\r\n}\r\n\r\n// Add animation to both chart types\r\nsetAnimationHooks(BarChart);\r\nsetAnimationHooks(LineChart);\r\n\r\n// Both charts now have the same animation interface\r\nconst barChart = new BarChart({ duration: 1000 });\r\nconst lineChart = new LineChart({ duration: 1500 });\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"animate","target":1744},{"kind":"text","text":" - The underlying animation function used"}]}]},"parameters":[{"id":1738,"name":"chartFactory","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要增强动画功能的图表类构造函数。The chart class constructor to enhance with animation capabilities"}]},"type":{"type":"reference","name":"Function","qualifiedName":"Function","package":"typescript"},"text":{"comment":"<p>要增强动画功能的图表类构造函数。The chart class constructor to enhance with animation capabilities</p>\n"}}],"type":{"type":"intrinsic","name":"void"},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.setAnimationHooks","hash":"setAnimationHooks"},"text":{"comment":"<h5>Function:</h5><p>setAnimationHooks</p>\n<h5>Description:</h5><p>为图表工厂类添加动画功能。Adds animation capabilities to chart factory classes by injecting a setAnimation method. The method uses the built-in animate function with configuration from the chart&#39;s options.</p>\n<h5>Returns:</h5><p>此函数直接修改类原型。This function modifies the class prototype directly</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Define a chart class</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">PieChart</span> {\n  <span class=\"pl-k\">constructor</span>(<span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">chartjs</span> <span class=\"pl-k\">=</span> {\n      opts: {\n        duration: <span class=\"pl-c1\">1500</span>,\n        <span class=\"pl-en\">onFinish</span>: () <span class=\"pl-k\">=></span> <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Animation complete<span class=\"pl-pds\">'</span></span>)\n      }\n    };\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-c\">// Chart rendering logic</span>\n  }\n}\n\n<span class=\"pl-c\">// Add animation hooks</span>\n<span class=\"pl-en\">setAnimationHooks</span>(<span class=\"pl-smi\">PieChart</span>);\n\n<span class=\"pl-c\">// Now the chart has animation capabilities</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">chart</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">PieChart</span>({\n  duration: <span class=\"pl-c1\">2000</span>,\n  <span class=\"pl-en\">onFinish</span>: () <span class=\"pl-k\">=></span> <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Pie chart animated!<span class=\"pl-pds\">'</span></span>)\n});\n\n<span class=\"pl-c\">// Use the injected animation method</span>\n<span class=\"pl-smi\">chart</span>.<span class=\"pl-en\">setAnimation</span>((<span class=\"pl-v\">progress</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-c\">// Update chart based on animation progress (0 to 1)</span>\n  <span class=\"pl-smi\">chart</span>.<span class=\"pl-smi\">animationProgress</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">progress</span>;\n  <span class=\"pl-smi\">chart</span>.<span class=\"pl-en\">render</span>();\n});\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Multiple chart types with consistent animation</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">BarChart</span> {\n  <span class=\"pl-k\">constructor</span>(<span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">chartjs</span> <span class=\"pl-k\">=</span> { opts: <span class=\"pl-smi\">options</span> };\n  }\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">LineChart</span> {\n  <span class=\"pl-k\">constructor</span>(<span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">chartjs</span> <span class=\"pl-k\">=</span> { opts: <span class=\"pl-smi\">options</span> };\n  }\n}\n\n<span class=\"pl-c\">// Add animation to both chart types</span>\n<span class=\"pl-en\">setAnimationHooks</span>(<span class=\"pl-smi\">BarChart</span>);\n<span class=\"pl-en\">setAnimationHooks</span>(<span class=\"pl-smi\">LineChart</span>);\n\n<span class=\"pl-c\">// Both charts now have the same animation interface</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">barChart</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">BarChart</span>({ duration: <span class=\"pl-c1\">1000</span> });\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">lineChart</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">LineChart</span>({ duration: <span class=\"pl-c1\">1500</span> });\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><p><a href=\"1744\">animate</a> - The underlying animation function used</p>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/decorators.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/decorators.ts","line":158,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/decorators.ts#L158"}],"parentId":1736}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.setAnimationHooks","hash":""},"text":{},"parentId":1168}
