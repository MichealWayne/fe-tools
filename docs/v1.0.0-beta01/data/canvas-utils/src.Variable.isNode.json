{"id":1626,"name":"isNode","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"summary":[],"blockTags":[{"tag":"@const","content":[{"kind":"text","text":"isNode"}]},{"tag":"@description","content":[{"kind":"text","text":"检测代码是否在Node.js环境中运行。Detects if the code is running in a Node.js environment by checking for Node.js-specific process object and version information."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Server-side canvas rendering\nfunction generateChartImage(data) {\n  if (isNode) {\n    const { createCanvas } = require('canvas');\n    const fs = require('fs');\n\n    const canvas = createCanvas(800, 600);\n    const ctx = canvas.getContext('2d');\n\n    // Draw chart\n    drawChart(ctx, data);\n\n    // Save to file\n    const buffer = canvas.toBuffer('image/png');\n    fs.writeFileSync('chart.png', buffer);\n\n    return 'chart.png';\n  }\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Environment-specific imports\nasync function loadCanvasLibrary() {\n  if (isNode) {\n    // Use node-canvas for server-side rendering\n    const canvas = await import('canvas');\n    return canvas;\n  } else {\n    // Use native browser canvas\n    return null; // Browser has built-in canvas support\n  }\n}\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]}]},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/env.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/env.ts","line":165,"character":13,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/env.ts#L165"}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"...","is":{"declaration":true},"location":{"query":"canvas-utils/src.Variable.isNode","hash":""},"text":{"comment":"<h5>Const:</h5><p>isNode</p>\n<h5>Description:</h5><p>检测代码是否在Node.js环境中运行。Detects if the code is running in a Node.js environment by checking for Node.js-specific process object and version information.</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Server-side canvas rendering</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">generateChartImage</span>(<span class=\"pl-v\">data</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">isNode</span>) {\n    <span class=\"pl-k\">const</span> { <span class=\"pl-c1\">createCanvas</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>canvas<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">fs</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>fs<span class=\"pl-pds\">'</span></span>);\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">canvas</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">createCanvas</span>(<span class=\"pl-c1\">800</span>, <span class=\"pl-c1\">600</span>);\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">getContext</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2d<span class=\"pl-pds\">'</span></span>);\n\n    <span class=\"pl-c\">// Draw chart</span>\n    <span class=\"pl-en\">drawChart</span>(<span class=\"pl-smi\">ctx</span>, <span class=\"pl-smi\">data</span>);\n\n    <span class=\"pl-c\">// Save to file</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">buffer</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">canvas</span>.<span class=\"pl-en\">toBuffer</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image/png<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-smi\">fs</span>.<span class=\"pl-en\">writeFileSync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>chart.png<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">buffer</span>);\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>chart.png<span class=\"pl-pds\">'</span></span>;\n  }\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Environment-specific imports</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">loadCanvasLibrary</span>() {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">isNode</span>) {\n    <span class=\"pl-c\">// Use node-canvas for server-side rendering</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">canvas</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-k\">import</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>canvas<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">canvas</span>;\n  } <span class=\"pl-k\">else</span> {\n    <span class=\"pl-c\">// Use native browser canvas</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>; <span class=\"pl-c\">// Browser has built-in canvas support</span>\n  }\n}\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n"},"parentId":1168}
