{"id":1744,"name":"animate","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/animate.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/animate.ts","line":166,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/animate.ts#L166"}],"signatures":[{"id":1745,"name":"animate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"animation"}]},{"tag":"@description","content":[{"kind":"text","text":"Creates and runs a smooth animation with customizable duration, progress callbacks, and completion handlers. Uses requestAnimationFrame for optimal performance and includes built-in easing for natural motion."}]},{"tag":"@returns","content":[{"kind":"text","text":"This function does not return a value"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic fade-in animation\r\nconst element = document.getElementById('myElement');\r\n\r\nanimate({\r\n  duration: 1000,\r\n  onProcess: (progress) => {\r\n    element.style.opacity = progress;\r\n  },\r\n  onAnimationFinish: () => {\r\n    console.log('Fade-in complete!');\r\n  }\r\n});\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Canvas object movement animation\r\nconst canvas = document.getElementById('myCanvas');\r\nconst ctx = canvas.getContext('2d');\r\nlet objectX = 0;\r\nconst targetX = 200;\r\n\r\nanimate({\r\n  duration: 2000,\r\n  onProcess: (progress) => {\r\n    // Clear and redraw\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Calculate current position\r\n    objectX = targetX * progress;\r\n\r\n    // Draw object at new position\r\n    ctx.fillStyle = '#0066cc';\r\n    ctx.fillRect(objectX, 50, 20, 20);\r\n  },\r\n  onAnimationFinish: () => {\r\n    console.log('Object reached target position');\r\n  }\r\n});\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Chart data animation\r\nconst chartData = [10, 25, 40, 30, 50];\r\nlet animatedData = new Array(chartData.length).fill(0);\r\n\r\nanimate({\r\n  duration: 1500,\r\n  onProcess: (progress) => {\r\n    // Animate each data point\r\n    animatedData = chartData.map(value => value * progress);\r\n\r\n    // Redraw chart with animated values\r\n    drawChart(animatedData);\r\n  },\r\n  onAnimationFinish: () => {\r\n    console.log('Chart animation complete');\r\n  }\r\n});\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"timingFunction"},{"kind":"text","text":" - The easing function used for smooth animation"}]}]},"parameters":[{"id":1746,"name":"opts","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"参数。Animation configuration options"}]},"type":{"type":"reference","name":"AnimationOptions"},"text":{"comment":"<p>参数。Animation configuration options</p>\n"}}],"type":{"type":"intrinsic","name":"void"},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.animate","hash":"animate"},"text":{"comment":"<h5>Function:</h5><p>animation</p>\n<h5>Description:</h5><p>Creates and runs a smooth animation with customizable duration, progress callbacks, and completion handlers. Uses requestAnimationFrame for optimal performance and includes built-in easing for natural motion.</p>\n<h5>Returns:</h5><p>This function does not return a value</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic fade-in animation</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">element</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>myElement<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-en\">animate</span>({\n  duration: <span class=\"pl-c1\">1000</span>,\n  <span class=\"pl-en\">onProcess</span>: (<span class=\"pl-v\">progress</span>) <span class=\"pl-k\">=></span> {\n    <span class=\"pl-smi\">element</span>.<span class=\"pl-c1\">style</span>.<span class=\"pl-smi\">opacity</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">progress</span>;\n  },\n  <span class=\"pl-en\">onAnimationFinish</span>: () <span class=\"pl-k\">=></span> {\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Fade-in complete!<span class=\"pl-pds\">'</span></span>);\n  }\n});\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Canvas object movement animation</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">canvas</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>myCanvas<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">getContext</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2d<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">let</span> <span class=\"pl-smi\">objectX</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">targetX</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">200</span>;\n\n<span class=\"pl-en\">animate</span>({\n  duration: <span class=\"pl-c1\">2000</span>,\n  <span class=\"pl-en\">onProcess</span>: (<span class=\"pl-v\">progress</span>) <span class=\"pl-k\">=></span> {\n    <span class=\"pl-c\">// Clear and redraw</span>\n    <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">clearRect</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">width</span>, <span class=\"pl-smi\">canvas</span>.<span class=\"pl-c1\">height</span>);\n\n    <span class=\"pl-c\">// Calculate current position</span>\n    <span class=\"pl-smi\">objectX</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">targetX</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">progress</span>;\n\n    <span class=\"pl-c\">// Draw object at new position</span>\n    <span class=\"pl-smi\">ctx</span>.<span class=\"pl-smi\">fillStyle</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#0066cc<span class=\"pl-pds\">'</span></span>;\n    <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">fillRect</span>(<span class=\"pl-smi\">objectX</span>, <span class=\"pl-c1\">50</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">20</span>);\n  },\n  <span class=\"pl-en\">onAnimationFinish</span>: () <span class=\"pl-k\">=></span> {\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Object reached target position<span class=\"pl-pds\">'</span></span>);\n  }\n});\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Chart data animation</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">chartData</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">25</span>, <span class=\"pl-c1\">40</span>, <span class=\"pl-c1\">30</span>, <span class=\"pl-c1\">50</span>];\n<span class=\"pl-k\">let</span> <span class=\"pl-smi\">animatedData</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Array</span>(<span class=\"pl-smi\">chartData</span>.<span class=\"pl-c1\">length</span>).<span class=\"pl-en\">fill</span>(<span class=\"pl-c1\">0</span>);\n\n<span class=\"pl-en\">animate</span>({\n  duration: <span class=\"pl-c1\">1500</span>,\n  <span class=\"pl-en\">onProcess</span>: (<span class=\"pl-v\">progress</span>) <span class=\"pl-k\">=></span> {\n    <span class=\"pl-c\">// Animate each data point</span>\n    <span class=\"pl-smi\">animatedData</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">chartData</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-v\">value</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">value</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">progress</span>);\n\n    <span class=\"pl-c\">// Redraw chart with animated values</span>\n    <span class=\"pl-en\">drawChart</span>(<span class=\"pl-smi\">animatedData</span>);\n  },\n  <span class=\"pl-en\">onAnimationFinish</span>: () <span class=\"pl-k\">=></span> {\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Chart animation complete<span class=\"pl-pds\">'</span></span>);\n  }\n});\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><p><a href=\"undefined\">timingFunction</a> - The easing function used for smooth animation</p>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/animate.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/animate.ts","line":166,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/animate.ts#L166"}],"parentId":1744}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.animate","hash":""},"text":{},"parentId":1168}
