{"id":1627,"name":"each","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/base.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/base.ts","line":80,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/base.ts#L80"}],"signatures":[{"id":1628,"name":"each","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"each"}]},{"tag":"@description","content":[{"kind":"text","text":"Iterates through an array and executes a callback function for each element. The callback receives both the element value and its index as parameters."}]},{"tag":"@returns","content":[{"kind":"text","text":"The original array (for method chaining)"}]},{"tag":"@example","content":[{"kind":"text","text":"// Basic iteration with logging\r\nconst numbers = [1, 2, 3, 4, 5];\r\neach(numbers, (value, index) => {\r\n  console.log("},{"kind":"code","text":"`Index ${index}: ${value}`"},{"kind":"text","text":");\r\n});\r\n// Output:\r\n// Index 0: 1\r\n// Index 1: 2\r\n// Index 2: 3\r\n// Index 3: 4\r\n// Index 4: 5"}]},{"tag":"@example","content":[{"kind":"text","text":"// Drawing multiple canvas elements\r\nconst points = [\r\n  { x: 10, y: 10 },\r\n  { x: 50, y: 30 },\r\n  { x: 90, y: 20 }\r\n];\r\n\r\neach(points, (point, index) => {\r\n  ctx.fillStyle = "},{"kind":"code","text":"`hsl(${index * 60}, 70%, 50%)`"},{"kind":"text","text":";\r\n  ctx.fillRect(point.x, point.y, 10, 10);\r\n});"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Method chaining\r\nconst result = each([1, 2, 3], (val) => console.log(val * 2))\r\n  .map(x => x * 3); // Can chain other array methods\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]}]},"typeParameter":[{"id":1629,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1630,"name":"arr","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The array to traverse"}]},"type":{"type":"array","elementType":{"type":"reference","id":1629,"name":"T"}},"text":{"comment":"<p>The array to traverse</p>\n"}},{"id":1631,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The callback function to execute for each element. Receives (element, index) as parameters"}]},"type":{"type":"reflection","declaration":{"id":1632,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/canvas-utils/src/utils/base.ts","line":80,"character":38,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/base.ts#L80"}],"signatures":[{"id":1633,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1634,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{"comment":"<p>The callback function to execute for each element. Receives (element, index) as parameters</p>\n"}}],"type":{"type":"array","elementType":{"type":"reference","id":1629,"name":"T"}},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.each","hash":"each"},"text":{"comment":"<h5>Function:</h5><p>each</p>\n<h5>Description:</h5><p>Iterates through an array and executes a callback function for each element. The callback receives both the element value and its index as parameters.</p>\n<h5>Returns:</h5><p>The original array (for method chaining)</p>\n<h5>Example:</h5><p>// Basic iteration with logging\nconst numbers = [1, 2, 3, 4, 5];\neach(numbers, (value, index) =&gt; {\n  console.log(<code>Index ${index}: ${value}</code>);\n});\n// Output:\n// Index 0: 1\n// Index 1: 2\n// Index 2: 3\n// Index 3: 4\n// Index 4: 5</p>\n<h5>Example:</h5><p>// Drawing multiple canvas elements\nconst points = [\n  { x: 10, y: 10 },\n  { x: 50, y: 30 },\n  { x: 90, y: 20 }\n];</p>\n<p>each(points, (point, index) =&gt; {\n  ctx.fillStyle = <code>hsl(${index * 60}, 70%, 50%)</code>;\n  ctx.fillRect(point.x, point.y, 10, 10);\n});</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Method chaining</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">each</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], (<span class=\"pl-v\">val</span>) <span class=\"pl-k\">=></span> <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">val</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>))\n  .<span class=\"pl-en\">map</span>(<span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">3</span>); <span class=\"pl-c\">// Can chain other array methods</span>\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/base.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/base.ts","line":80,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/base.ts#L80"}],"parentId":1627}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.each","hash":""},"text":{},"parentId":1168}
