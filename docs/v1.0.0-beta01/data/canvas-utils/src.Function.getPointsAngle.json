{"id":1657,"name":"getPointsAngle","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/calculate.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/calculate.ts","line":213,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/calculate.ts#L213"}],"signatures":[{"id":1658,"name":"getPointsAngle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"getPointsAngle"}]},{"tag":"@description","content":[{"kind":"text","text":"根据两个点获取角度值。Calculates the angle in radians between two points, measured from the first point to the second point. The angle is normalized to be between 0 and 2π radians (0 to 360 degrees)."}]},{"tag":"@returns","content":[{"kind":"text","text":"The angle in radians (0 to 2π), where 0 is pointing up (north)"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic angle calculation\r\nconst startPoint = { x: 0, y: 0 };\r\nconst endPoint = { x: 1, y: 1 };\r\nconst angle = getPointsAngle(startPoint, endPoint);\r\nconst degrees = angle * (180 / Math.PI); // Convert to degrees\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Arrow direction for canvas drawing\r\nfunction drawArrow(ctx, from, to) {\r\n  const angle = getPointsAngle(from, to);\r\n\r\n  // Draw line\r\n  ctx.beginPath();\r\n  ctx.moveTo(from.x, from.y);\r\n  ctx.lineTo(to.x, to.y);\r\n  ctx.stroke();\r\n\r\n  // Draw arrowhead\r\n  const headLength = 10;\r\n  ctx.save();\r\n  ctx.translate(to.x, to.y);\r\n  ctx.rotate(angle);\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, 0);\r\n  ctx.lineTo(-headLength, -headLength/2);\r\n  ctx.lineTo(-headLength, headLength/2);\r\n  ctx.closePath();\r\n  ctx.fill();\r\n  ctx.restore();\r\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Compass directions\r\nconst center = { x: 100, y: 100 };\r\nconst north = { x: 100, y: 50 };\r\nconst east = { x: 150, y: 100 };\r\n\r\nconst northAngle = getPointsAngle(center, north); // ~0 radians (0°)\r\nconst eastAngle = getPointsAngle(center, east);   // ~π/2 radians (90°)\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"getPointsDistance","target":1661},{"kind":"text","text":" - For calculating distance between the same points"}]}]},"parameters":[{"id":1659,"name":"point1","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"起始点坐标。The starting point with x and y coordinates"}]},"originalName":"__namedParameters","type":{"type":"reference","id":1747,"name":"PointPosition"},"text":{"comment":"<p>起始点坐标。The starting point with x and y coordinates</p>\n"}},{"id":1660,"name":"point2","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"结束点坐标。The ending point with x and y coordinates"}]},"originalName":"__namedParameters","type":{"type":"reference","id":1747,"name":"PointPosition"},"text":{"comment":"<p>结束点坐标。The ending point with x and y coordinates</p>\n"}}],"type":{"type":"intrinsic","name":"number"},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.getPointsAngle","hash":"getPointsAngle"},"text":{"comment":"<h5>Function:</h5><p>getPointsAngle</p>\n<h5>Description:</h5><p>根据两个点获取角度值。Calculates the angle in radians between two points, measured from the first point to the second point. The angle is normalized to be between 0 and 2π radians (0 to 360 degrees).</p>\n<h5>Returns:</h5><p>The angle in radians (0 to 2π), where 0 is pointing up (north)</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic angle calculation</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">startPoint</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">0</span>, y: <span class=\"pl-c1\">0</span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">endPoint</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">1</span>, y: <span class=\"pl-c1\">1</span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">angle</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getPointsAngle</span>(<span class=\"pl-smi\">startPoint</span>, <span class=\"pl-smi\">endPoint</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">degrees</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">angle</span> <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">180</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">PI</span>); <span class=\"pl-c\">// Convert to degrees</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Arrow direction for canvas drawing</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">drawArrow</span>(<span class=\"pl-v\">ctx</span>, <span class=\"pl-v\">from</span>, <span class=\"pl-v\">to</span>) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">angle</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getPointsAngle</span>(<span class=\"pl-smi\">from</span>, <span class=\"pl-smi\">to</span>);\n\n  <span class=\"pl-c\">// Draw line</span>\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">beginPath</span>();\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-smi\">from</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">from</span>.<span class=\"pl-c1\">y</span>);\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">lineTo</span>(<span class=\"pl-smi\">to</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">to</span>.<span class=\"pl-c1\">y</span>);\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">stroke</span>();\n\n  <span class=\"pl-c\">// Draw arrowhead</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">headLength</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>;\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">save</span>();\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">translate</span>(<span class=\"pl-smi\">to</span>.<span class=\"pl-c1\">x</span>, <span class=\"pl-smi\">to</span>.<span class=\"pl-c1\">y</span>);\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">rotate</span>(<span class=\"pl-smi\">angle</span>);\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">beginPath</span>();\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">lineTo</span>(<span class=\"pl-k\">-</span><span class=\"pl-smi\">headLength</span>, <span class=\"pl-k\">-</span><span class=\"pl-smi\">headLength</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">2</span>);\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">lineTo</span>(<span class=\"pl-k\">-</span><span class=\"pl-smi\">headLength</span>, <span class=\"pl-smi\">headLength</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">2</span>);\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">closePath</span>();\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">fill</span>();\n  <span class=\"pl-smi\">ctx</span>.<span class=\"pl-en\">restore</span>();\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Compass directions</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">center</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">100</span>, y: <span class=\"pl-c1\">100</span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">north</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">100</span>, y: <span class=\"pl-c1\">50</span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">east</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">150</span>, y: <span class=\"pl-c1\">100</span> };\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">northAngle</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getPointsAngle</span>(<span class=\"pl-smi\">center</span>, <span class=\"pl-smi\">north</span>); <span class=\"pl-c\">// ~0 radians (0°)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">eastAngle</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getPointsAngle</span>(<span class=\"pl-smi\">center</span>, <span class=\"pl-smi\">east</span>);   <span class=\"pl-c\">// ~π/2 radians (90°)</span>\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><p><a href=\"1661\">getPointsDistance</a> - For calculating distance between the same points</p>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/calculate.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/calculate.ts","line":213,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/calculate.ts#L213"}],"parentId":1657}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.getPointsAngle","hash":""},"text":{},"parentId":1168}
