{"id":1661,"name":"getPointsDistance","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/canvas-utils/src/utils/calculate.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/calculate.ts","line":276,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/calculate.ts#L276"}],"signatures":[{"id":1662,"name":"getPointsDistance","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"getPointsDistance"}]},{"tag":"@description","content":[{"kind":"text","text":"获得两个点距离。Calculates the Euclidean distance between two points using the Pythagorean theorem (√((x₂-x₁)² + (y₂-y₁)²))."}]},{"tag":"@returns","content":[{"kind":"text","text":"两个点的距离数值。The distance between the two points in the same units as the coordinates"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic distance calculation\r\nconst pointA = { x: 0, y: 0 };\r\nconst pointB = { x: 3, y: 4 };\r\nconst distance = getPointsDistance(pointA, pointB); // Returns 5 (3-4-5 triangle)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Collision detection\r\nfunction checkCollision(object1, object2, threshold = 20) {\r\n  const distance = getPointsDistance(object1.position, object2.position);\r\n  return distance < threshold;\r\n}\r\n\r\nconst player = { position: { x: 100, y: 150 } };\r\nconst enemy = { position: { x: 110, y: 160 } };\r\n\r\nif (checkCollision(player, enemy)) {\r\n  console.log('Collision detected!');\r\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Animation easing based on distance\r\nfunction animateToTarget(current, target, speed = 0.1) {\r\n  const distance = getPointsDistance(current, target);\r\n\r\n  if (distance < 1) {\r\n    return target; // Close enough, snap to target\r\n  }\r\n\r\n  // Move towards target\r\n  const dx = target.x - current.x;\r\n  const dy = target.y - current.y;\r\n\r\n  return {\r\n    x: current.x + dx * speed,\r\n    y: current.y + dy * speed\r\n  };\r\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Canvas zoom level calculation\r\nconst mouseStart = { x: 100, y: 100 };\r\nconst mouseCurrent = { x: 150, y: 120 };\r\nconst dragDistance = getPointsDistance(mouseStart, mouseCurrent);\r\nconst zoomFactor = 1 + (dragDistance / 100); // Zoom based on drag distance\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"getPointsAngle","target":1657},{"kind":"text","text":" - For calculating angle between the same points"}]}]},"parameters":[{"id":1663,"name":"point1","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"第一个点坐标。The first point with x and y coordinates"}]},"originalName":"__namedParameters","type":{"type":"reference","id":1747,"name":"PointPosition"},"text":{"comment":"<p>第一个点坐标。The first point with x and y coordinates</p>\n"}},{"id":1664,"name":"point2","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"第二个点坐标。The second point with x and y coordinates"}]},"originalName":"__namedParameters","type":{"type":"reference","id":1747,"name":"PointPosition"},"text":{"comment":"<p>第二个点坐标。The second point with x and y coordinates</p>\n"}}],"type":{"type":"intrinsic","name":"number"},"is":{"declaration":false},"location":{"query":"canvas-utils/src.Function.getPointsDistance","hash":"getPointsDistance"},"text":{"comment":"<h5>Function:</h5><p>getPointsDistance</p>\n<h5>Description:</h5><p>获得两个点距离。Calculates the Euclidean distance between two points using the Pythagorean theorem (√((x₂-x₁)² + (y₂-y₁)²)).</p>\n<h5>Returns:</h5><p>两个点的距离数值。The distance between the two points in the same units as the coordinates</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic distance calculation</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">pointA</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">0</span>, y: <span class=\"pl-c1\">0</span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">pointB</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">3</span>, y: <span class=\"pl-c1\">4</span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">distance</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getPointsDistance</span>(<span class=\"pl-smi\">pointA</span>, <span class=\"pl-smi\">pointB</span>); <span class=\"pl-c\">// Returns 5 (3-4-5 triangle)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Collision detection</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">checkCollision</span>(<span class=\"pl-v\">object1</span>, <span class=\"pl-v\">object2</span>, <span class=\"pl-v\">threshold</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">20</span>) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">distance</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getPointsDistance</span>(<span class=\"pl-smi\">object1</span>.<span class=\"pl-smi\">position</span>, <span class=\"pl-smi\">object2</span>.<span class=\"pl-smi\">position</span>);\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">distance</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-smi\">threshold</span>;\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">player</span> <span class=\"pl-k\">=</span> { position: { x: <span class=\"pl-c1\">100</span>, y: <span class=\"pl-c1\">150</span> } };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">enemy</span> <span class=\"pl-k\">=</span> { position: { x: <span class=\"pl-c1\">110</span>, y: <span class=\"pl-c1\">160</span> } };\n\n<span class=\"pl-k\">if</span> (<span class=\"pl-en\">checkCollision</span>(<span class=\"pl-smi\">player</span>, <span class=\"pl-smi\">enemy</span>)) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Collision detected!<span class=\"pl-pds\">'</span></span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Animation easing based on distance</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">animateToTarget</span>(<span class=\"pl-v\">current</span>, <span class=\"pl-v\">target</span>, <span class=\"pl-v\">speed</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.1</span>) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">distance</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getPointsDistance</span>(<span class=\"pl-smi\">current</span>, <span class=\"pl-smi\">target</span>);\n\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">distance</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-c1\">1</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">target</span>; <span class=\"pl-c\">// Close enough, snap to target</span>\n  }\n\n  <span class=\"pl-c\">// Move towards target</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">dx</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">target</span>.<span class=\"pl-c1\">x</span> <span class=\"pl-k\">-</span> <span class=\"pl-smi\">current</span>.<span class=\"pl-c1\">x</span>;\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">dy</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">target</span>.<span class=\"pl-c1\">y</span> <span class=\"pl-k\">-</span> <span class=\"pl-smi\">current</span>.<span class=\"pl-c1\">y</span>;\n\n  <span class=\"pl-k\">return</span> {\n    x: <span class=\"pl-smi\">current</span>.<span class=\"pl-c1\">x</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">dx</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">speed</span>,\n    y: <span class=\"pl-smi\">current</span>.<span class=\"pl-c1\">y</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">dy</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">speed</span>\n  };\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Canvas zoom level calculation</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">mouseStart</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">100</span>, y: <span class=\"pl-c1\">100</span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">mouseCurrent</span> <span class=\"pl-k\">=</span> { x: <span class=\"pl-c1\">150</span>, y: <span class=\"pl-c1\">120</span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">dragDistance</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getPointsDistance</span>(<span class=\"pl-smi\">mouseStart</span>, <span class=\"pl-smi\">mouseCurrent</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">zoomFactor</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> (<span class=\"pl-smi\">dragDistance</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">100</span>); <span class=\"pl-c\">// Zoom based on drag distance</span>\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><p><a href=\"1657\">getPointsAngle</a> - For calculating angle between the same points</p>\n"},"sources":[{"fileName":"packages/canvas-utils/src/utils/calculate.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/canvas-utils/src/utils/calculate.ts","line":276,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/canvas-utils/src/utils/calculate.ts#L276"}],"parentId":1661}],"is":{"declaration":true},"location":{"query":"canvas-utils/src.Function.getPointsDistance","hash":""},"text":{},"parentId":1168}
