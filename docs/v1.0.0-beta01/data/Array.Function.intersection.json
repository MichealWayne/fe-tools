{"id":228,"name":"intersection","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/array.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/array.ts","line":546,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L546"}],"signatures":[{"id":229,"name":"intersection","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"intersection"}]},{"tag":"@description","content":[{"kind":"text","text":"返回两个数组中存在的元素（交集）。Returns elements that exist in both arrays (intersection)"}]},{"tag":"@returns","content":[{"kind":"text","text":"包含两个输入数组中都存在的元素的数组。Array containing elements that exist in both input arrays"}]},{"tag":"@throws","content":[{"kind":"text","text":"当arr1或arr2不是数组时抛出错误。When arr1 or arr2 is not an array"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\nintersection([1, 2, 3, 4], [1, 2]); // -> [1, 2]\nintersection([1, 2, 3, 4], [1, 5]); // -> [1]\nintersection(['a', 'b', 'c'], ['b', 'c', 'd']); // -> ['b', 'c']\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// No intersection\nintersection([1, 2, 3], [4, 5, 6]); // -> []\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\nintersection([], [1, 2, 3]); // -> []\nintersection([1, 2, 3], []); // -> []\nintersection([1, 1, 2], [1, 3]); // -> [1, 1] (duplicates preserved from first array)\n```"}]}]},"parameters":[{"id":230,"name":"arr1","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"第一个数组。First array"}]},"type":{"type":"reference","id":300,"name":"AnyArr"},"text":{"comment":"<p>第一个数组。First array</p>\n"}},{"id":231,"name":"arr2","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"第二个数组。Second array"}]},"type":{"type":"reference","id":300,"name":"AnyArr"},"text":{"comment":"<p>第二个数组。Second array</p>\n"}}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"is":{"declaration":false},"location":{"query":"Array.Function.intersection","hash":"intersection"},"text":{"comment":"<h5>Function:</h5><p>intersection</p>\n<h5>Description:</h5><p>返回两个数组中存在的元素（交集）。Returns elements that exist in both arrays (intersection)</p>\n<h5>Returns:</h5><p>包含两个输入数组中都存在的元素的数组。Array containing elements that exist in both input arrays</p>\n<h5>Throws:</h5><p>当arr1或arr2不是数组时抛出错误。When arr1 or arr2 is not an array</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-en\">intersection</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>]); <span class=\"pl-c\">// -> [1, 2]</span>\n<span class=\"pl-en\">intersection</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">5</span>]); <span class=\"pl-c\">// -> [1]</span>\n<span class=\"pl-en\">intersection</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>c<span class=\"pl-pds\">'</span></span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>c<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>d<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> ['b', 'c']</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// No intersection</span>\n<span class=\"pl-en\">intersection</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]); <span class=\"pl-c\">// -> []</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">intersection</span>([], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]); <span class=\"pl-c\">// -> []</span>\n<span class=\"pl-en\">intersection</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], []); <span class=\"pl-c\">// -> []</span>\n<span class=\"pl-en\">intersection</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>]); <span class=\"pl-c\">// -> [1, 1] (duplicates preserved from first array)</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/array.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/array.ts","line":546,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L546"}],"parentId":228}],"is":{"declaration":true},"location":{"query":"Array.Function.intersection","hash":""},"text":{},"parentId":154}
