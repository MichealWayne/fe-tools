{"id":183,"name":"compact","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/array.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/array.ts","line":290,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L290"}],"signatures":[{"id":184,"name":"compact","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"compact"}]},{"tag":"@description","content":[{"kind":"text","text":"从数组中过滤掉假值（false, 0, '', null, undefined, NaN）。Filters out falsy values from an array (false, 0, '', null, undefined, NaN)"}]},{"tag":"@returns","content":[{"kind":"text","text":"仅包含真值的新数组。New array with only truthy values"}]},{"tag":"@throws","content":[{"kind":"text","text":"当arr不是数组时抛出错误。When arr is not an array"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\ncompact([0, 1, false, 2, '', 3]); // -> [1, 2, 3]\ncompact([0, 1, false, 2, '', 3, null, undefined, NaN]); // -> [1, 2, 3]\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Various falsy values\ncompact([false, 0, '', null, undefined, NaN, 'hello', 42, true]); // -> ['hello', 42, true]\ncompact(['', '0', 'false']); // -> ['0', 'false'] (strings are truthy except empty string)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\ncompact([]); // -> []\ncompact([false, 0, '', null, undefined, NaN]); // -> []\ncompact([1, 2, 3]); // -> [1, 2, 3] (no change)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Objects and arrays (always truthy)\ncompact([{}, [], 0, false]); // -> [{}, []]\n```"}]}]},"typeParameter":[{"id":185,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":186,"name":"arr","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要过滤假值的数组。Array to filter falsy values from"}]},"type":{"type":"array","elementType":{"type":"reference","id":185,"name":"T"}},"text":{"comment":"<p>要过滤假值的数组。Array to filter falsy values from</p>\n"}}],"type":{"type":"array","elementType":{"type":"reference","id":185,"name":"T"}},"is":{"declaration":false},"location":{"query":"Array.Function.compact","hash":"compact"},"text":{"comment":"<h5>Function:</h5><p>compact</p>\n<h5>Description:</h5><p>从数组中过滤掉假值（false, 0, &#39;&#39;, null, undefined, NaN）。Filters out falsy values from an array (false, 0, &#39;&#39;, null, undefined, NaN)</p>\n<h5>Returns:</h5><p>仅包含真值的新数组。New array with only truthy values</p>\n<h5>Throws:</h5><p>当arr不是数组时抛出错误。When arr is not an array</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-en\">compact</span>([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>, <span class=\"pl-c1\">3</span>]); <span class=\"pl-c\">// -> [1, 2, 3]</span>\n<span class=\"pl-en\">compact</span>([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">undefined</span>, <span class=\"pl-c1\">NaN</span>]); <span class=\"pl-c\">// -> [1, 2, 3]</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Various falsy values</span>\n<span class=\"pl-en\">compact</span>([<span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">undefined</span>, <span class=\"pl-c1\">NaN</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">42</span>, <span class=\"pl-c1\">true</span>]); <span class=\"pl-c\">// -> ['hello', 42, true]</span>\n<span class=\"pl-en\">compact</span>([<span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>0<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>false<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> ['0', 'false'] (strings are truthy except empty string)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">compact</span>([]); <span class=\"pl-c\">// -> []</span>\n<span class=\"pl-en\">compact</span>([<span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">undefined</span>, <span class=\"pl-c1\">NaN</span>]); <span class=\"pl-c\">// -> []</span>\n<span class=\"pl-en\">compact</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]); <span class=\"pl-c\">// -> [1, 2, 3] (no change)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Objects and arrays (always truthy)</span>\n<span class=\"pl-en\">compact</span>([{}, [], <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">false</span>]); <span class=\"pl-c\">// -> [{}, []]</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/array.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/array.ts","line":290,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L290"}],"parentId":183}],"is":{"declaration":true},"location":{"query":"Array.Function.compact","hash":""},"text":{},"parentId":154}
