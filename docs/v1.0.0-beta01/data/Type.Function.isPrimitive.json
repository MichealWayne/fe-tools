{"id":736,"name":"isPrimitive","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":295,"character":13,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L295"}],"signatures":[{"id":737,"name":"isPrimitive","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"isPrimitive"}]},{"tag":"@description","content":[{"kind":"text","text":"检查值是否为类Promise对象（具有'then'方法）。Checks if a value is a Promise-like object (has a 'then' method)"}]},{"tag":"@returns","content":[{"kind":"text","text":"如果值为类Promise对象则返回true，否则返回false。True if the value is Promise-like, false otherwise"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Real Promises\nisPrimitive(new Promise(resolve => resolve(1))); // -> true\nisPrimitive(Promise.resolve(42)); // -> true\nisPrimitive(Promise.reject('error')); // -> true\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Thenable objects\nisPrimitive({ then: () => {}, catch: () => {} }); // -> true\nisPrimitive({ then: function(resolve) { resolve(1); } }); // -> true\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Not Promise-like\nisPrimitive({}); // -> false\nisPrimitive({ then: 'not a function' }); // -> false\nisPrimitive(null); // -> false\nisPrimitive(undefined); // -> false\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Async functions return Promises\nasync function asyncFn() { return 42; }\nisPrimitive(asyncFn()); // -> true\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Custom thenable\nconst customThenable = {\n  then(onResolve, onReject) {\n    setTimeout(() => onResolve('done'), 1000);\n  }\n};\nisPrimitive(customThenable); // -> true\n```"}]}]},"typeParameter":[{"id":738,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"any"}}],"parameters":[{"id":739,"name":"val","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"要检查的值。Value to check"}]},"type":{"type":"intrinsic","name":"unknown"},"text":{"comment":"<p>要检查的值。Value to check</p>\n"}}],"type":{"type":"predicate","name":"val","asserts":false,"targetType":{"type":"reference","typeArguments":[{"type":"reference","id":738,"name":"T"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}},"is":{"declaration":false},"location":{"query":"Type.Function.isPrimitive","hash":"isPrimitive"},"text":{"comment":"<h5>Function:</h5><p>isPrimitive</p>\n<h5>Description:</h5><p>检查值是否为类Promise对象（具有&#39;then&#39;方法）。Checks if a value is a Promise-like object (has a &#39;then&#39; method)</p>\n<h5>Returns:</h5><p>如果值为类Promise对象则返回true，否则返回false。True if the value is Promise-like, false otherwise</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Real Promises</span>\n<span class=\"pl-en\">isPrimitive</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Promise</span>(<span class=\"pl-v\">resolve</span> <span class=\"pl-k\">=></span> <span class=\"pl-en\">resolve</span>(<span class=\"pl-c1\">1</span>))); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isPrimitive</span>(<span class=\"pl-c1\">Promise</span>.<span class=\"pl-c1\">resolve</span>(<span class=\"pl-c1\">42</span>)); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isPrimitive</span>(<span class=\"pl-c1\">Promise</span>.<span class=\"pl-c1\">reject</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Thenable objects</span>\n<span class=\"pl-en\">isPrimitive</span>({ <span class=\"pl-en\">then</span>: () <span class=\"pl-k\">=></span> {}, <span class=\"pl-en\">catch</span>: () <span class=\"pl-k\">=></span> {} }); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isPrimitive</span>({ <span class=\"pl-en\">then</span>: <span class=\"pl-k\">function</span>(<span class=\"pl-v\">resolve</span>) { <span class=\"pl-en\">resolve</span>(<span class=\"pl-c1\">1</span>); } }); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Not Promise-like</span>\n<span class=\"pl-en\">isPrimitive</span>({}); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isPrimitive</span>({ then: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>not a function<span class=\"pl-pds\">'</span></span> }); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isPrimitive</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isPrimitive</span>(<span class=\"pl-c1\">undefined</span>); <span class=\"pl-c\">// -> false</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Async functions return Promises</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">asyncFn</span>() { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">42</span>; }\n<span class=\"pl-en\">isPrimitive</span>(<span class=\"pl-en\">asyncFn</span>()); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Custom thenable</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">customThenable</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">then</span>(<span class=\"pl-v\">onResolve</span>, <span class=\"pl-v\">onReject</span>) {\n    <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-en\">onResolve</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>done<span class=\"pl-pds\">'</span></span>), <span class=\"pl-c1\">1000</span>);\n  }\n};\n<span class=\"pl-en\">isPrimitive</span>(<span class=\"pl-smi\">customThenable</span>); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":295,"character":27,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L295"}],"parentId":736}],"is":{"declaration":true},"location":{"query":"Type.Function.isPrimitive","hash":""},"text":{},"parentId":710}
