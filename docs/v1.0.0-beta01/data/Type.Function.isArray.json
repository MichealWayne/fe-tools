{"id":733,"name":"isArray","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":111,"character":13,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L111"}],"signatures":[{"id":734,"name":"isArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"isArray"}]},{"tag":"@description","content":[{"kind":"text","text":"检查值是否为数组（跨框架兼容）。Checks if a value is an array (cross-frame compatible)"}]},{"tag":"@returns","content":[{"kind":"text","text":"如果值为数组则返回true，否则返回false。True if the value is an array, false otherwise"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\nisArray([1, 2, 3]); // -> true\nisArray({ a: 1, b: '2' }); // -> false\nisArray('string'); // -> false\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Different array types\nisArray([]); // -> true (empty array)\nisArray(new Array()); // -> true\nisArray(Array.from('abc')); // -> true\nisArray([...new Set([1, 2, 3])]); // -> true\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Array-like objects (not arrays)\nisArray(arguments); // -> false (in function context)\nisArray({ 0: 'a', 1: 'b', length: 2 }); // -> false\nisArray('abc'); // -> false (string is array-like but not array)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Typed arrays\nisArray(new Int32Array([1, 2, 3])); // -> false (typed arrays are not regular arrays)\nisArray(new Uint8Array([1, 2, 3])); // -> false\n```"}]}]},"parameters":[{"id":735,"name":"val","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"要检查的值。Value to check"}]},"type":{"type":"intrinsic","name":"unknown"},"text":{"comment":"<p>要检查的值。Value to check</p>\n"}}],"type":{"type":"predicate","name":"val","asserts":false,"targetType":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}},"is":{"declaration":false},"location":{"query":"Type.Function.isArray","hash":"isArray"},"text":{"comment":"<h5>Function:</h5><p>isArray</p>\n<h5>Description:</h5><p>检查值是否为数组（跨框架兼容）。Checks if a value is an array (cross-frame compatible)</p>\n<h5>Returns:</h5><p>如果值为数组则返回true，否则返回false。True if the value is an array, false otherwise</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-en\">isArray</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isArray</span>({ a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>2<span class=\"pl-pds\">'</span></span> }); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isArray</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>string<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> false</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Different array types</span>\n<span class=\"pl-en\">isArray</span>([]); <span class=\"pl-c\">// -> true (empty array)</span>\n<span class=\"pl-en\">isArray</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Array</span>()); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isArray</span>(<span class=\"pl-c1\">Array</span>.<span class=\"pl-en\">from</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abc<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isArray</span>([<span class=\"pl-k\">...new</span> <span class=\"pl-c1\">Set</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>])]); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Array-like objects (not arrays)</span>\n<span class=\"pl-en\">isArray</span>(<span class=\"pl-c1\">arguments</span>); <span class=\"pl-c\">// -> false (in function context)</span>\n<span class=\"pl-en\">isArray</span>({ <span class=\"pl-c1\">0</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>, length: <span class=\"pl-c1\">2</span> }); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isArray</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abc<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> false (string is array-like but not array)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Typed arrays</span>\n<span class=\"pl-en\">isArray</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Int32Array</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>])); <span class=\"pl-c\">// -> false (typed arrays are not regular arrays)</span>\n<span class=\"pl-en\">isArray</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Uint8Array</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>])); <span class=\"pl-c\">// -> false</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":111,"character":23,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L111"}],"parentId":733}],"is":{"declaration":true},"location":{"query":"Type.Function.isArray","hash":""},"text":{},"parentId":710}
