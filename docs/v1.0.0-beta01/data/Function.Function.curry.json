{"id":512,"name":"curry","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":500,"character":13,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L500"}],"signatures":[{"id":513,"name":"curry","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"curry"}]},{"tag":"@description","content":[{"kind":"text","text":"将函数转换为一次接受一个参数（柯里化）。Transforms a function to accept arguments one at a time (currying)"}]},{"tag":"@returns","content":[{"kind":"text","text":"可以用部分参数调用的柯里化函数。Curried function that can be called with partial arguments"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic currying\nconst add = (a, b) => a + b;\nconst curriedAdd = curry(add);\n\ncurriedAdd(2)(3); // -> 5\ncurriedAdd(2, 3); // -> 5 (can still call with all args)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Partial application\nconst multiply = (a, b, c) => a * b * c;\nconst curriedMultiply = curry(multiply);\n\nconst multiplyBy2 = curriedMultiply(2);\nconst multiplyBy2And3 = multiplyBy2(3);\n\nmultiplyBy2And3(4); // -> 24\nmultiplyBy2(3, 4); // -> 24 (same result)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Functional programming patterns\nconst filter = curry((predicate, array) => array.filter(predicate));\nconst map = curry((fn, array) => array.map(fn));\n\nconst isEven = x => x % 2 === 0;\nconst double = x => x * 2;\n\nconst filterEvens = filter(isEven);\nconst doubleAll = map(double);\n\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst result = pipe(filterEvens, doubleAll)(numbers); // -> [4, 8, 12]\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Math operations\ncurry(Math.pow)(2)(10); // -> 1024\ncurry(Math.pow)(2, 10); // -> 1024\n```"}]}]},"typeParameter":[{"id":514,"name":"T1","kind":131072,"kindString":"Type parameter","flags":{}},{"id":515,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":516,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":517,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":452,"character":14,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L452"}],"signatures":[{"id":518,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":519,"name":"t1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":514,"name":"T1"}}],"type":{"type":"reference","id":515,"name":"R"}}]}},"text":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":514,"name":"T1"},{"type":"reference","id":515,"name":"R"}],"name":"Curry1"},"is":{"declaration":false},"location":{"query":"Function.Function.curry","hash":"curry"},"text":{"comment":"<h5>Function:</h5><p>curry</p>\n<h5>Description:</h5><p>将函数转换为一次接受一个参数（柯里化）。Transforms a function to accept arguments one at a time (currying)</p>\n<h5>Returns:</h5><p>可以用部分参数调用的柯里化函数。Curried function that can be called with partial arguments</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic currying</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">add</span> <span class=\"pl-k\">=</span> (<span class=\"pl-v\">a</span>, <span class=\"pl-v\">b</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">b</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">curriedAdd</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>(<span class=\"pl-smi\">add</span>);\n\n<span class=\"pl-en\">curriedAdd</span>(<span class=\"pl-c1\">2</span>)(<span class=\"pl-c1\">3</span>); <span class=\"pl-c\">// -> 5</span>\n<span class=\"pl-en\">curriedAdd</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>); <span class=\"pl-c\">// -> 5 (can still call with all args)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Partial application</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">multiply</span> <span class=\"pl-k\">=</span> (<span class=\"pl-v\">a</span>, <span class=\"pl-v\">b</span>, <span class=\"pl-v\">c</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">c</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">curriedMultiply</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>(<span class=\"pl-smi\">multiply</span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">multiplyBy2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curriedMultiply</span>(<span class=\"pl-c1\">2</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">multiplyBy2And3</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">multiplyBy2</span>(<span class=\"pl-c1\">3</span>);\n\n<span class=\"pl-en\">multiplyBy2And3</span>(<span class=\"pl-c1\">4</span>); <span class=\"pl-c\">// -> 24</span>\n<span class=\"pl-en\">multiplyBy2</span>(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>); <span class=\"pl-c\">// -> 24 (same result)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Functional programming patterns</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">filter</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>((<span class=\"pl-v\">predicate</span>, <span class=\"pl-v\">array</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">array</span>.<span class=\"pl-en\">filter</span>(<span class=\"pl-smi\">predicate</span>));\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">map</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>((<span class=\"pl-v\">fn</span>, <span class=\"pl-v\">array</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">array</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-smi\">fn</span>));\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">isEven</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">double</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">filterEvens</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">filter</span>(<span class=\"pl-smi\">isEven</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">doubleAll</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">map</span>(<span class=\"pl-smi\">double</span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">numbers</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>];\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">pipe</span>(<span class=\"pl-smi\">filterEvens</span>, <span class=\"pl-smi\">doubleAll</span>)(<span class=\"pl-smi\">numbers</span>); <span class=\"pl-c\">// -> [4, 8, 12]</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Math operations</span>\n<span class=\"pl-en\">curry</span>(<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">pow</span>)(<span class=\"pl-c1\">2</span>)(<span class=\"pl-c1\">10</span>); <span class=\"pl-c\">// -> 1024</span>\n<span class=\"pl-en\">curry</span>(<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">pow</span>)(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">10</span>); <span class=\"pl-c\">// -> 1024</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":452,"character":2,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L452"}],"parentId":512},{"id":520,"name":"curry","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"curry"}]},{"tag":"@description","content":[{"kind":"text","text":"将函数转换为一次接受一个参数（柯里化）。Transforms a function to accept arguments one at a time (currying)"}]},{"tag":"@returns","content":[{"kind":"text","text":"可以用部分参数调用的柯里化函数。Curried function that can be called with partial arguments"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic currying\nconst add = (a, b) => a + b;\nconst curriedAdd = curry(add);\n\ncurriedAdd(2)(3); // -> 5\ncurriedAdd(2, 3); // -> 5 (can still call with all args)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Partial application\nconst multiply = (a, b, c) => a * b * c;\nconst curriedMultiply = curry(multiply);\n\nconst multiplyBy2 = curriedMultiply(2);\nconst multiplyBy2And3 = multiplyBy2(3);\n\nmultiplyBy2And3(4); // -> 24\nmultiplyBy2(3, 4); // -> 24 (same result)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Functional programming patterns\nconst filter = curry((predicate, array) => array.filter(predicate));\nconst map = curry((fn, array) => array.map(fn));\n\nconst isEven = x => x % 2 === 0;\nconst double = x => x * 2;\n\nconst filterEvens = filter(isEven);\nconst doubleAll = map(double);\n\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst result = pipe(filterEvens, doubleAll)(numbers); // -> [4, 8, 12]\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Math operations\ncurry(Math.pow)(2)(10); // -> 1024\ncurry(Math.pow)(2, 10); // -> 1024\n```"}]}]},"typeParameter":[{"id":521,"name":"T1","kind":131072,"kindString":"Type parameter","flags":{}},{"id":522,"name":"T2","kind":131072,"kindString":"Type parameter","flags":{}},{"id":523,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":524,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":525,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":453,"character":18,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L453"}],"signatures":[{"id":526,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":527,"name":"t1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":521,"name":"T1"}},{"id":528,"name":"t2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":522,"name":"T2"}}],"type":{"type":"reference","id":523,"name":"R"}}]}},"text":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":521,"name":"T1"},{"type":"reference","id":522,"name":"T2"},{"type":"reference","id":523,"name":"R"}],"name":"Curry2"},"is":{"declaration":false},"location":{"query":"Function.Function.curry","hash":"curry"},"text":{"comment":"<h5>Function:</h5><p>curry</p>\n<h5>Description:</h5><p>将函数转换为一次接受一个参数（柯里化）。Transforms a function to accept arguments one at a time (currying)</p>\n<h5>Returns:</h5><p>可以用部分参数调用的柯里化函数。Curried function that can be called with partial arguments</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic currying</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">add</span> <span class=\"pl-k\">=</span> (<span class=\"pl-v\">a</span>, <span class=\"pl-v\">b</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">b</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">curriedAdd</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>(<span class=\"pl-smi\">add</span>);\n\n<span class=\"pl-en\">curriedAdd</span>(<span class=\"pl-c1\">2</span>)(<span class=\"pl-c1\">3</span>); <span class=\"pl-c\">// -> 5</span>\n<span class=\"pl-en\">curriedAdd</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>); <span class=\"pl-c\">// -> 5 (can still call with all args)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Partial application</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">multiply</span> <span class=\"pl-k\">=</span> (<span class=\"pl-v\">a</span>, <span class=\"pl-v\">b</span>, <span class=\"pl-v\">c</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">c</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">curriedMultiply</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>(<span class=\"pl-smi\">multiply</span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">multiplyBy2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curriedMultiply</span>(<span class=\"pl-c1\">2</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">multiplyBy2And3</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">multiplyBy2</span>(<span class=\"pl-c1\">3</span>);\n\n<span class=\"pl-en\">multiplyBy2And3</span>(<span class=\"pl-c1\">4</span>); <span class=\"pl-c\">// -> 24</span>\n<span class=\"pl-en\">multiplyBy2</span>(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>); <span class=\"pl-c\">// -> 24 (same result)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Functional programming patterns</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">filter</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>((<span class=\"pl-v\">predicate</span>, <span class=\"pl-v\">array</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">array</span>.<span class=\"pl-en\">filter</span>(<span class=\"pl-smi\">predicate</span>));\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">map</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>((<span class=\"pl-v\">fn</span>, <span class=\"pl-v\">array</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">array</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-smi\">fn</span>));\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">isEven</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">double</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">filterEvens</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">filter</span>(<span class=\"pl-smi\">isEven</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">doubleAll</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">map</span>(<span class=\"pl-smi\">double</span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">numbers</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>];\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">pipe</span>(<span class=\"pl-smi\">filterEvens</span>, <span class=\"pl-smi\">doubleAll</span>)(<span class=\"pl-smi\">numbers</span>); <span class=\"pl-c\">// -> [4, 8, 12]</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Math operations</span>\n<span class=\"pl-en\">curry</span>(<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">pow</span>)(<span class=\"pl-c1\">2</span>)(<span class=\"pl-c1\">10</span>); <span class=\"pl-c\">// -> 1024</span>\n<span class=\"pl-en\">curry</span>(<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">pow</span>)(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">10</span>); <span class=\"pl-c\">// -> 1024</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":453,"character":2,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L453"}],"parentId":512},{"id":529,"name":"curry","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"curry"}]},{"tag":"@description","content":[{"kind":"text","text":"将函数转换为一次接受一个参数（柯里化）。Transforms a function to accept arguments one at a time (currying)"}]},{"tag":"@returns","content":[{"kind":"text","text":"可以用部分参数调用的柯里化函数。Curried function that can be called with partial arguments"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic currying\nconst add = (a, b) => a + b;\nconst curriedAdd = curry(add);\n\ncurriedAdd(2)(3); // -> 5\ncurriedAdd(2, 3); // -> 5 (can still call with all args)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Partial application\nconst multiply = (a, b, c) => a * b * c;\nconst curriedMultiply = curry(multiply);\n\nconst multiplyBy2 = curriedMultiply(2);\nconst multiplyBy2And3 = multiplyBy2(3);\n\nmultiplyBy2And3(4); // -> 24\nmultiplyBy2(3, 4); // -> 24 (same result)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Functional programming patterns\nconst filter = curry((predicate, array) => array.filter(predicate));\nconst map = curry((fn, array) => array.map(fn));\n\nconst isEven = x => x % 2 === 0;\nconst double = x => x * 2;\n\nconst filterEvens = filter(isEven);\nconst doubleAll = map(double);\n\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst result = pipe(filterEvens, doubleAll)(numbers); // -> [4, 8, 12]\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Math operations\ncurry(Math.pow)(2)(10); // -> 1024\ncurry(Math.pow)(2, 10); // -> 1024\n```"}]}]},"typeParameter":[{"id":530,"name":"T1","kind":131072,"kindString":"Type parameter","flags":{}},{"id":531,"name":"T2","kind":131072,"kindString":"Type parameter","flags":{}},{"id":532,"name":"T3","kind":131072,"kindString":"Type parameter","flags":{}},{"id":533,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":534,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":535,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":454,"character":22,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L454"}],"signatures":[{"id":536,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":537,"name":"t1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":530,"name":"T1"}},{"id":538,"name":"t2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":531,"name":"T2"}},{"id":539,"name":"t3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":532,"name":"T3"}}],"type":{"type":"reference","id":533,"name":"R"}}]}},"text":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":530,"name":"T1"},{"type":"reference","id":531,"name":"T2"},{"type":"reference","id":532,"name":"T3"},{"type":"reference","id":533,"name":"R"}],"name":"Curry3"},"is":{"declaration":false},"location":{"query":"Function.Function.curry","hash":"curry"},"text":{"comment":"<h5>Function:</h5><p>curry</p>\n<h5>Description:</h5><p>将函数转换为一次接受一个参数（柯里化）。Transforms a function to accept arguments one at a time (currying)</p>\n<h5>Returns:</h5><p>可以用部分参数调用的柯里化函数。Curried function that can be called with partial arguments</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic currying</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">add</span> <span class=\"pl-k\">=</span> (<span class=\"pl-v\">a</span>, <span class=\"pl-v\">b</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">b</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">curriedAdd</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>(<span class=\"pl-smi\">add</span>);\n\n<span class=\"pl-en\">curriedAdd</span>(<span class=\"pl-c1\">2</span>)(<span class=\"pl-c1\">3</span>); <span class=\"pl-c\">// -> 5</span>\n<span class=\"pl-en\">curriedAdd</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>); <span class=\"pl-c\">// -> 5 (can still call with all args)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Partial application</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">multiply</span> <span class=\"pl-k\">=</span> (<span class=\"pl-v\">a</span>, <span class=\"pl-v\">b</span>, <span class=\"pl-v\">c</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">c</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">curriedMultiply</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>(<span class=\"pl-smi\">multiply</span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">multiplyBy2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curriedMultiply</span>(<span class=\"pl-c1\">2</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">multiplyBy2And3</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">multiplyBy2</span>(<span class=\"pl-c1\">3</span>);\n\n<span class=\"pl-en\">multiplyBy2And3</span>(<span class=\"pl-c1\">4</span>); <span class=\"pl-c\">// -> 24</span>\n<span class=\"pl-en\">multiplyBy2</span>(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>); <span class=\"pl-c\">// -> 24 (same result)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Functional programming patterns</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">filter</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>((<span class=\"pl-v\">predicate</span>, <span class=\"pl-v\">array</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">array</span>.<span class=\"pl-en\">filter</span>(<span class=\"pl-smi\">predicate</span>));\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">map</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">curry</span>((<span class=\"pl-v\">fn</span>, <span class=\"pl-v\">array</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">array</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-smi\">fn</span>));\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">isEven</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">double</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">filterEvens</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">filter</span>(<span class=\"pl-smi\">isEven</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">doubleAll</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">map</span>(<span class=\"pl-smi\">double</span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">numbers</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>];\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">pipe</span>(<span class=\"pl-smi\">filterEvens</span>, <span class=\"pl-smi\">doubleAll</span>)(<span class=\"pl-smi\">numbers</span>); <span class=\"pl-c\">// -> [4, 8, 12]</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Math operations</span>\n<span class=\"pl-en\">curry</span>(<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">pow</span>)(<span class=\"pl-c1\">2</span>)(<span class=\"pl-c1\">10</span>); <span class=\"pl-c\">// -> 1024</span>\n<span class=\"pl-en\">curry</span>(<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">pow</span>)(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">10</span>); <span class=\"pl-c\">// -> 1024</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":454,"character":2,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L454"}],"parentId":512}],"is":{"declaration":true},"location":{"query":"Function.Function.curry","hash":""},"text":{},"parentId":391}
