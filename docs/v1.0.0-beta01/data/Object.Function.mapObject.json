{"id":616,"name":"mapObject","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":142,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L142"}],"signatures":[{"id":617,"name":"mapObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"mapObject"}]},{"tag":"@description","content":[{"kind":"text","text":"将数组映射到对象，其中数组元素成为键，回调结果成为值。Maps an array to an object where array elements become keys and callback results become values"}]},{"tag":"@returns","content":[{"kind":"text","text":"数组元素作为键、回调结果作为值的对象。Object with array elements as keys and callback results as values"}]},{"tag":"@throws","content":[{"kind":"text","text":"当arr不是数组或fn不是函数时。When arr is not an array or fn is not a function"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic mapping\nmapObject(['a', 'b', 'c'], v => v + '1'); // -> { a: 'a1', b: 'b1', c: 'c1' }\nmapObject(['x', 'y', 'z'], v => v.toUpperCase()); // -> { x: 'X', y: 'Y', z: 'Z' }\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"// Using index parameter\nmapObject(['a', 'b', 'c'], (v, i) => i); // -> { a: 0, b: 1, c: 2 }\nmapObject(['first', 'second', 'third'], (v, i) => "},{"kind":"code","text":"`${v}-${i}`"},{"kind":"text","text":"); // -> { first: 'first-0', second: 'second-1', third: 'third-2' }"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Using array parameter\nmapObject(['a', 'b'], (v, i, arr) => arr.length - i); // -> { a: 2, b: 1 }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Complex transformations\nmapObject(['apple', 'banana', 'cherry'], v => ({\n  name: v,\n  length: v.length,\n  uppercase: v.toUpperCase()\n}));\n// -> {\n//   apple: { name: 'apple', length: 5, uppercase: 'APPLE' },\n//   banana: { name: 'banana', length: 6, uppercase: 'BANANA' },\n//   cherry: { name: 'cherry', length: 6, uppercase: 'CHERRY' }\n// }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\nmapObject([], v => v); // -> {}\nmapObject(['single'], v => v); // -> { single: 'single' }\n```"}]}]},"typeParameter":[{"id":618,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}},{"id":619,"name":"U","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":620,"name":"arr","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"用作对象键的元素数组。Array of elements to use as object keys"}]},"type":{"type":"array","elementType":{"type":"reference","id":618,"name":"T"}},"text":{"comment":"<p>用作对象键的元素数组。Array of elements to use as object keys</p>\n"}},{"id":621,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"生成值的回调函数（接收值、索引和数组）。Callback function to generate values (receives value, index, and array)"}]},"type":{"type":"reflection","declaration":{"id":622,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/object.ts","line":144,"character":6,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L144"}],"signatures":[{"id":623,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":624,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":618,"name":"T"}},{"id":625,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":626,"name":"array","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":618,"name":"T"}}}],"type":{"type":"reference","id":619,"name":"U"}}]}},"text":{"comment":"<p>生成值的回调函数（接收值、索引和数组）。Callback function to generate values (receives value, index, and array)</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"conditional","checkType":{"type":"reference","id":618,"name":"T"},"extendsType":{"type":"intrinsic","name":"string"},"trueType":{"type":"reference","id":618,"name":"T"},"falseType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":619,"name":"U"}],"name":"Record","qualifiedName":"Record","package":"typescript"},"is":{"declaration":false},"location":{"query":"Object.Function.mapObject","hash":"mapObject"},"text":{"comment":"<h5>Function:</h5><p>mapObject</p>\n<h5>Description:</h5><p>将数组映射到对象，其中数组元素成为键，回调结果成为值。Maps an array to an object where array elements become keys and callback results become values</p>\n<h5>Returns:</h5><p>数组元素作为键、回调结果作为值的对象。Object with array elements as keys and callback results as values</p>\n<h5>Throws:</h5><p>当arr不是数组或fn不是函数时。When arr is not an array or fn is not a function</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic mapping</span>\n<span class=\"pl-en\">mapObject</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>c<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">v</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">v</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> { a: 'a1', b: 'b1', c: 'c1' }</span>\n<span class=\"pl-en\">mapObject</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>z<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">v</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">toUpperCase</span>()); <span class=\"pl-c\">// -> { x: 'X', y: 'Y', z: 'Z' }</span>\n</code></pre>\n<h5>Example:</h5><p>// Using index parameter\nmapObject([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], (v, i) =&gt; i); // -&gt; { a: 0, b: 1, c: 2 }\nmapObject([&#39;first&#39;, &#39;second&#39;, &#39;third&#39;], (v, i) =&gt; <code>${v}-${i}</code>); // -&gt; { first: &#39;first-0&#39;, second: &#39;second-1&#39;, third: &#39;third-2&#39; }</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Using array parameter</span>\n<span class=\"pl-en\">mapObject</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>], (<span class=\"pl-v\">v</span>, <span class=\"pl-v\">i</span>, <span class=\"pl-v\">arr</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-smi\">i</span>); <span class=\"pl-c\">// -> { a: 2, b: 1 }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Complex transformations</span>\n<span class=\"pl-en\">mapObject</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>apple<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>banana<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cherry<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">v</span> <span class=\"pl-k\">=></span> ({\n  name: <span class=\"pl-smi\">v</span>,\n  length: <span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">length</span>,\n  uppercase: <span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">toUpperCase</span>()\n}));\n<span class=\"pl-c\">// -> {</span>\n<span class=\"pl-c\">//   apple: { name: 'apple', length: 5, uppercase: 'APPLE' },</span>\n<span class=\"pl-c\">//   banana: { name: 'banana', length: 6, uppercase: 'BANANA' },</span>\n<span class=\"pl-c\">//   cherry: { name: 'cherry', length: 6, uppercase: 'CHERRY' }</span>\n<span class=\"pl-c\">// }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">mapObject</span>([], <span class=\"pl-v\">v</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">v</span>); <span class=\"pl-c\">// -> {}</span>\n<span class=\"pl-en\">mapObject</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>single<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">v</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">v</span>); <span class=\"pl-c\">// -> { single: 'single' }</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":142,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L142"}],"parentId":616}],"is":{"declaration":true},"location":{"query":"Object.Function.mapObject","hash":""},"text":{},"parentId":603}
