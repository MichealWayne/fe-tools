{"id":684,"name":"camelize","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"utils/src/string.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/string.ts","line":207,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/32ad824/utils/packages/utils/src/string.ts#L207"}],"signatures":[{"id":685,"name":"camelize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"camelize"}]},{"tag":"@description","content":[{"kind":"text","text":"将字符串转换成驼峰命名方式"}]},{"tag":"@returns","content":[{"kind":"text","text":"返回转换后的字符串 testData"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Test case 1: Basic functionality\r\nconst input1 = \"hello-world\";\r\nconst expectedOutput1 = \"helloWorld\";\r\nconst actualOutput1 = camelize(input1);\r\nconsole.log(actualOutput1 === expectedOutput1); // true\r\n\n// Test case 2: Input with underscore separator\r\nconst input2 = \"foo_bar\";\r\nconst expectedOutput2 = \"fooBar\";\r\nconst actualOutput2 = camelize(input2);\r\nconsole.log(actualOutput2 === expectedOutput2); // true\r\n\n// Test case 3: Input with multiple separators in a row\r\nconst input3 = \"foo---bar\";\r\nconst expectedOutput3 = \"fooBar\";\r\nconst actualOutput3 = camelize(input3);\r\nconsole.log(actualOutput3 === expectedOutput3); // true\r\n\n// Test case 4: Input with uppercase letters\r\nconst input4 = \"foo-bar-BAZ\";\r\nconst expectedOutput4 = \"fooBarBAZ\";\r\nconst actualOutput4 = camelize(input4);\r\nconsole.log(actualOutput4 === expectedOutput4); // true\r\n\n// Test case 5: Input with numbers\r\nconst input5 = \"foo-123-bar\";\r\nconst expectedOutput5 = \"foo123Bar\";\r\nconst actualOutput5 = camelize(input5);\r\nconsole.log(actualOutput5 === expectedOutput5); // true\n```"}]}]},"parameters":[{"id":686,"name":"str","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"待判断的字符串 test-data"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>待判断的字符串 test-data</p>\n"}}],"type":{"type":"intrinsic","name":"string"},"is":{"declaration":false},"location":{"query":"String.Function.camelize","hash":"camelize"},"text":{"comment":"<h5>Function:</h5><p>camelize</p>\n<h5>Description:</h5><p>将字符串转换成驼峰命名方式</p>\n<h5>Returns:</h5><p>返回转换后的字符串 testData</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Test case 1: Basic functionality</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">input1</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello-world<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">expectedOutput1</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>helloWorld<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">actualOutput1</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">camelize</span>(<span class=\"pl-smi\">input1</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">actualOutput1</span> <span class=\"pl-k\">===</span> <span class=\"pl-smi\">expectedOutput1</span>); <span class=\"pl-c\">// true</span>\n\n<span class=\"pl-c\">// Test case 2: Input with underscore separator</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">input2</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo_bar<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">expectedOutput2</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fooBar<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">actualOutput2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">camelize</span>(<span class=\"pl-smi\">input2</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">actualOutput2</span> <span class=\"pl-k\">===</span> <span class=\"pl-smi\">expectedOutput2</span>); <span class=\"pl-c\">// true</span>\n\n<span class=\"pl-c\">// Test case 3: Input with multiple separators in a row</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">input3</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo---bar<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">expectedOutput3</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fooBar<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">actualOutput3</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">camelize</span>(<span class=\"pl-smi\">input3</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">actualOutput3</span> <span class=\"pl-k\">===</span> <span class=\"pl-smi\">expectedOutput3</span>); <span class=\"pl-c\">// true</span>\n\n<span class=\"pl-c\">// Test case 4: Input with uppercase letters</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">input4</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo-bar-BAZ<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">expectedOutput4</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fooBarBAZ<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">actualOutput4</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">camelize</span>(<span class=\"pl-smi\">input4</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">actualOutput4</span> <span class=\"pl-k\">===</span> <span class=\"pl-smi\">expectedOutput4</span>); <span class=\"pl-c\">// true</span>\n\n<span class=\"pl-c\">// Test case 5: Input with numbers</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">input5</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo-123-bar<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">expectedOutput5</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo123Bar<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">actualOutput5</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">camelize</span>(<span class=\"pl-smi\">input5</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">actualOutput5</span> <span class=\"pl-k\">===</span> <span class=\"pl-smi\">expectedOutput5</span>); <span class=\"pl-c\">// true</span>\n</code></pre>\n"},"sources":[{"fileName":"utils/src/string.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/string.ts","line":207,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/32ad824/utils/packages/utils/src/string.ts#L207"}],"parentId":684}],"is":{"declaration":true},"location":{"query":"String.Function.camelize","hash":""},"text":{},"parentId":648}
