{"id":698,"name":"camelize","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/string.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/string.ts","line":527,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/string.ts#L527"}],"signatures":[{"id":699,"name":"camelize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"camelize"}]},{"tag":"@description","content":[{"kind":"text","text":"将kebab-case、snake_case或其他带分隔符的字符串转换为camelCase。Converts kebab-case, snake_case, or other delimited strings to camelCase"}]},{"tag":"@returns","content":[{"kind":"text","text":"转换为camelCase格式的字符串。String converted to camelCase format"}]},{"tag":"@throws","content":[{"kind":"text","text":"当str不是字符串时。When str is not a string"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Kebab-case conversion\ncamelize('hello-world'); // -> 'helloWorld'\ncamelize('get-user-name'); // -> 'getUserName'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Snake_case conversion\ncamelize('foo_bar'); // -> 'fooBar'\ncamelize('user_profile_data'); // -> 'userProfileData'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Multiple delimiters\ncamelize('foo---bar'); // -> 'fooBar'\ncamelize('test__case'); // -> 'testCase'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Mixed case preservation\ncamelize('foo-bar-BAZ'); // -> 'fooBarBAZ'\ncamelize('XML-http-request'); // -> 'XMLHttpRequest'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Numbers and special cases\ncamelize('foo-123-bar'); // -> 'foo123Bar'\ncamelize('api-v2-endpoint'); // -> 'apiV2Endpoint'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\ncamelize(''); // -> ''\ncamelize('hello'); // -> 'hello' (no delimiters)\ncamelize('-hello-world-'); // -> 'HelloWorld' (leading/trailing delimiters)\ncamelize('--multiple--dashes--'); // -> 'MultipleDashes'\n```"}]}]},"parameters":[{"id":700,"name":"str","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"带分隔符要转换为camelCase的字符串。String with delimiters to convert to camelCase"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>带分隔符要转换为camelCase的字符串。String with delimiters to convert to camelCase</p>\n"}}],"type":{"type":"intrinsic","name":"string"},"is":{"declaration":false},"location":{"query":"String.Function.camelize","hash":"camelize"},"text":{"comment":"<h5>Function:</h5><p>camelize</p>\n<h5>Description:</h5><p>将kebab-case、snake_case或其他带分隔符的字符串转换为camelCase。Converts kebab-case, snake_case, or other delimited strings to camelCase</p>\n<h5>Returns:</h5><p>转换为camelCase格式的字符串。String converted to camelCase format</p>\n<h5>Throws:</h5><p>当str不是字符串时。When str is not a string</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Kebab-case conversion</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello-world<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'helloWorld'</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>get-user-name<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'getUserName'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Snake_case conversion</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo_bar<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'fooBar'</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>user_profile_data<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'userProfileData'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Multiple delimiters</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo---bar<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'fooBar'</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test__case<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'testCase'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Mixed case preservation</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo-bar-BAZ<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'fooBarBAZ'</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>XML-http-request<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'XMLHttpRequest'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Numbers and special cases</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo-123-bar<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'foo123Bar'</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>api-v2-endpoint<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'apiV2Endpoint'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>); <span class=\"pl-c\">// -> ''</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'hello' (no delimiters)</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-hello-world-<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'HelloWorld' (leading/trailing delimiters)</span>\n<span class=\"pl-en\">camelize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>--multiple--dashes--<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'MultipleDashes'</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/string.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/string.ts","line":527,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/string.ts#L527"}],"parentId":698}],"is":{"declaration":true},"location":{"query":"String.Function.camelize","hash":""},"text":{},"parentId":651}
