{"id":1414,"name":"copyStream","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-utils/src/fs/stream.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/fs/stream.ts","line":64,"character":22,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/fs/stream.ts#L64"}],"signatures":[{"id":1415,"name":"copyStream","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"copyStream"}]},{"tag":"@description","content":[{"kind":"text","text":"Asynchronously copies a file using streams with optional transformation. Copies a file from source to target using streams for memory-efficient handling of large files, with optional data transformation during the copy process."}]},{"tag":"@returns","content":[{"kind":"text","text":"Promise that resolves when copy operation completes. Promise that resolves when the copy operation completes successfully"}]},{"tag":"@throws","content":[{"kind":"text","text":"Throws if source file doesn't exist or copy operation fails. Error if source file doesn't exist or copy operation fails"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Simple file copy\nawait copyStream('./source.txt', './backup/source.txt');\nconsole.log('File copied successfully');\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Copy with transformation (uppercase content)\nimport { Transform } from 'stream';\nconst upperTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, chunk.toString().toUpperCase());\n  }\n});\nawait copyStream('./input.txt', './output.txt', { transform: upperTransform });\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Copy with custom permissions\nawait copyStream('./script.sh', './bin/script.sh', {\n  mode: 0o755, // Make executable\n  flags: 'w'\n});\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Copy large files efficiently\ntry {\n  await copyStream('./large-video.mp4', './backup/large-video.mp4');\n  console.log('Large file copied using streams');\n} catch (error) {\n  console.error('Copy failed:', error.message);\n}\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"https://nodejs.org/api/stream.html#stream_stream_pipeline_source_transforms_destination_callback","target":"https://nodejs.org/api/stream.html#stream_stream_pipeline_source_transforms_destination_callback"},{"kind":"text","text":" - Node.js pipeline documentation"}]}]},"parameters":[{"id":1416,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The source file path to copy from. Source file path for the copy operation"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>The source file path to copy from. Source file path for the copy operation</p>\n"}},{"id":1417,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The target file path to copy to. Target file path for the copy operation"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>The target file path to copy to. Target file path for the copy operation</p>\n"}},{"id":1418,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Optional configuration for the copy operation. Configuration options for the copy operation"}]},"type":{"type":"reflection","declaration":{"id":1419,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1421,"name":"flags","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"File system flags for the write stream. File system flags for the write stream (default: 'w')"}]},"sources":[{"fileName":"packages/node-utils/src/fs/stream.ts","line":69,"character":4,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/fs/stream.ts#L69"}],"type":{"type":"intrinsic","name":"string"}},{"id":1422,"name":"mode","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"File permissions for the target file. File permissions for the target file (default: 0o666)"}]},"sources":[{"fileName":"packages/node-utils/src/fs/stream.ts","line":70,"character":4,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/fs/stream.ts#L70"}],"type":{"type":"intrinsic","name":"number"}},{"id":1420,"name":"transform","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Optional transform stream to modify data during copy. Transform stream to modify data during copy process"}]},"sources":[{"fileName":"packages/node-utils/src/fs/stream.ts","line":68,"character":4,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/fs/stream.ts#L68"}],"type":{"type":"reference","name":"Transform","qualifiedName":"internal.Transform","package":"@types/node"}}],"groups":[{"title":"Properties","children":[1421,1422,1420]}],"sources":[{"fileName":"packages/node-utils/src/fs/stream.ts","line":67,"character":12,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/fs/stream.ts#L67"}]}},"text":{"comment":"<p>Optional configuration for the copy operation. Configuration options for the copy operation</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"NodeUtils.Function.copyStream","hash":"copyStream"},"text":{"comment":"<h5>Function:</h5><p>copyStream</p>\n<h5>Description:</h5><p>Asynchronously copies a file using streams with optional transformation. Copies a file from source to target using streams for memory-efficient handling of large files, with optional data transformation during the copy process.</p>\n<h5>Returns:</h5><p>Promise that resolves when copy operation completes. Promise that resolves when the copy operation completes successfully</p>\n<h5>Throws:</h5><p>Throws if source file doesn&#39;t exist or copy operation fails. Error if source file doesn&#39;t exist or copy operation fails</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Simple file copy</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-en\">copyStream</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./source.txt<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./backup/source.txt<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>File copied successfully<span class=\"pl-pds\">'</span></span>);\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Copy with transformation (uppercase content)</span>\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">Transform</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>stream<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">upperTransform</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Transform</span>({\n  <span class=\"pl-en\">transform</span>(<span class=\"pl-v\">chunk</span>, <span class=\"pl-v\">encoding</span>, <span class=\"pl-v\">callback</span>) {\n    <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">chunk</span>.<span class=\"pl-c1\">toString</span>().<span class=\"pl-c1\">toUpperCase</span>());\n  }\n});\n<span class=\"pl-k\">await</span> <span class=\"pl-en\">copyStream</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./input.txt<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./output.txt<span class=\"pl-pds\">'</span></span>, { transform: <span class=\"pl-smi\">upperTransform</span> });\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Copy with custom permissions</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-en\">copyStream</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./script.sh<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./bin/script.sh<span class=\"pl-pds\">'</span></span>, {\n  mode: <span class=\"pl-c1\">0o755</span>, <span class=\"pl-c\">// Make executable</span>\n  flags: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>w<span class=\"pl-pds\">'</span></span>\n});\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Copy large files efficiently</span>\n<span class=\"pl-k\">try</span> {\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">copyStream</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./large-video.mp4<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./backup/large-video.mp4<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Large file copied using streams<span class=\"pl-pds\">'</span></span>);\n} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Copy failed:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>.<span class=\"pl-smi\">message</span>);\n}\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><p><a href=\"https://nodejs.org/api/stream.html#stream_stream_pipeline_source_transforms_destination_callback\">https://nodejs.org/api/stream.html#stream_stream_pipeline_source_transforms_destination_callback</a> - Node.js pipeline documentation</p>\n"},"sources":[{"fileName":"packages/node-utils/src/fs/stream.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/fs/stream.ts","line":64,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/fs/stream.ts#L64"}],"parentId":1414}],"is":{"declaration":true},"location":{"query":"NodeUtils.Function.copyStream","hash":""},"text":{},"parentId":743}
