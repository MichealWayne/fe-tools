{"id":627,"name":"pick","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":193,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L193"}],"signatures":[{"id":628,"name":"pick","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"pick"}]},{"tag":"@description","content":[{"kind":"text","text":"从源对象中选择指定键创建新对象（浅拷贝）。Creates a new object with only the specified keys from the source object (shallow copy)"}]},{"tag":"@returns","content":[{"kind":"text","text":"仅包含源对象中存在的指定属性的新对象。New object containing only the specified properties that exist in the source object"}]},{"tag":"@throws","content":[{"kind":"text","text":"当obj不是对象或keys不是数组时。When obj is not an object or keys is not an array"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\npick({ a: 1, b: 2, c: 3 }, ['a', 'b']); // -> { a: 1, b: 2 }\npick({ name: 'John', age: 30, city: 'NYC' }, ['name', 'age']); // -> { name: 'John', age: 30 }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Non-existent keys are ignored\npick({ a: 1, b: 2, c: 3 }, ['a', 'd']); // -> { a: 1 }\npick({ x: 10 }, ['y', 'z']); // -> {}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Complex values (shallow copy)\nconst source = {\n  simple: 'value',\n  array: [1, 2, 3],\n  object: { nested: true },\n  unused: 'ignored'\n};\nconst result = pick(source, ['simple', 'array', 'object']);\n// -> { simple: 'value', array: [1, 2, 3], object: { nested: true } }\n// Note: array and object are shallow copied (same references)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\npick({}, ['a', 'b']); // -> {}\npick({ a: 1, b: 2 }, []); // -> {}\npick({ a: undefined, b: null }, ['a', 'b']); // -> { a: undefined, b: null }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Practical use case: API response filtering\nconst user = { id: 1, name: 'John', email: 'john@example.com', password: 'secret', role: 'admin' };\nconst publicUser = pick(user, ['id', 'name', 'email']); // -> { id: 1, name: 'John', email: 'john@example.com' }\n```"}]}]},"parameters":[{"id":629,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要从中选择属性的源对象。Source object to pick properties from"}]},"type":{"type":"reference","id":639,"name":"PlainObject"},"text":{"comment":"<p>要从中选择属性的源对象。Source object to pick properties from</p>\n"}},{"id":630,"name":"keys","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要包含在新对象中的属性名数组。Array of property names to include in the new object"}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"text":{"comment":"<p>要包含在新对象中的属性名数组。Array of property names to include in the new object</p>\n"}}],"type":{"type":"reference","id":639,"name":"PlainObject"},"is":{"declaration":false},"location":{"query":"Object.Function.pick","hash":"pick"},"text":{"comment":"<h5>Function:</h5><p>pick</p>\n<h5>Description:</h5><p>从源对象中选择指定键创建新对象（浅拷贝）。Creates a new object with only the specified keys from the source object (shallow copy)</p>\n<h5>Returns:</h5><p>仅包含源对象中存在的指定属性的新对象。New object containing only the specified properties that exist in the source object</p>\n<h5>Throws:</h5><p>当obj不是对象或keys不是数组时。When obj is not an object or keys is not an array</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-en\">pick</span>({ a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-c1\">2</span>, c: <span class=\"pl-c1\">3</span> }, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> { a: 1, b: 2 }</span>\n<span class=\"pl-en\">pick</span>({ name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, age: <span class=\"pl-c1\">30</span>, city: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>NYC<span class=\"pl-pds\">'</span></span> }, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>age<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> { name: 'John', age: 30 }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Non-existent keys are ignored</span>\n<span class=\"pl-en\">pick</span>({ a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-c1\">2</span>, c: <span class=\"pl-c1\">3</span> }, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>d<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> { a: 1 }</span>\n<span class=\"pl-en\">pick</span>({ x: <span class=\"pl-c1\">10</span> }, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>z<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> {}</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Complex values (shallow copy)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">source</span> <span class=\"pl-k\">=</span> {\n  simple: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>value<span class=\"pl-pds\">'</span></span>,\n  array: [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n  object: { nested: <span class=\"pl-c1\">true</span> },\n  unused: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>ignored<span class=\"pl-pds\">'</span></span>\n};\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">pick</span>(<span class=\"pl-smi\">source</span>, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>array<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span>]);\n<span class=\"pl-c\">// -> { simple: 'value', array: [1, 2, 3], object: { nested: true } }</span>\n<span class=\"pl-c\">// Note: array and object are shallow copied (same references)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">pick</span>({}, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> {}</span>\n<span class=\"pl-en\">pick</span>({ a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-c1\">2</span> }, []); <span class=\"pl-c\">// -> {}</span>\n<span class=\"pl-en\">pick</span>({ a: <span class=\"pl-c1\">undefined</span>, b: <span class=\"pl-c1\">null</span> }, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> { a: undefined, b: null }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Practical use case: API response filtering</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">user</span> <span class=\"pl-k\">=</span> { id: <span class=\"pl-c1\">1</span>, name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>, email: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>john@example.com<span class=\"pl-pds\">'</span></span>, password: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>secret<span class=\"pl-pds\">'</span></span>, role: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>admin<span class=\"pl-pds\">'</span></span> };\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">publicUser</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">pick</span>(<span class=\"pl-smi\">user</span>, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>email<span class=\"pl-pds\">'</span></span>]); <span class=\"pl-c\">// -> { id: 1, name: 'John', email: 'john@example.com' }</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":193,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L193"}],"parentId":627}],"is":{"declaration":true},"location":{"query":"Object.Function.pick","hash":""},"text":{},"parentId":603}
