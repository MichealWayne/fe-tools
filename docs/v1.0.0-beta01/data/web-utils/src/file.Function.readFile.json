{"id":851,"name":"readFile","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/web-utils/src/file.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/web-utils/src/file.ts","line":65,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/web-utils/src/file.ts#L65"}],"signatures":[{"id":852,"name":"readFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"readFile"}]},{"tag":"@description","content":[{"kind":"text","text":"使用FileReader API将文件内容读取为文本。Reads a file's content as text using the FileReader API"}]},{"tag":"@returns","content":[{"kind":"text","text":"解析为文件文本内容的Promise。Promise that resolves to the file's text content"}]},{"tag":"@throws","content":[{"kind":"text","text":"如果文件读取失败或文件损坏则抛出错误。Throws if file reading fails or file is corrupted"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Handle file input change\nconst fileInput = document.getElementById('file-input');\nfileInput.addEventListener('change', async (event) => {\n  const file = event.target.files[0];\n  if (file) {\n    try {\n      const content = await readFile(file);\n      document.getElementById('file-content').textContent = content;\n    } catch (error) {\n      console.error('Failed to read file:', error);\n    }\n  }\n});\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"// Process multiple files with progress indication\nasync function processFiles(files) {\n  const results = [];\n  for (let i = 0; i < files.length; i++) {\n    try {\n      const content = await readFile(files[i]);\n      results.push({ name: files[i].name, content });\n      updateProgress((i + 1) / files.length * 100);\n    } catch (error) {\n      console.error("},{"kind":"code","text":"`Failed to read ${files[i].name}:`"},{"kind":"text","text":", error);\n    }\n  }\n  return results;\n}"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Validate file content before processing\nasync function validateAndReadFile(file) {\n  // Check file size (e.g., max 5MB)\n  if (file.size > 5 * 1024 * 1024) {\n    throw new Error('File too large. Maximum size is 5MB.');\n  }\n\n  // Check file type\n  const allowedTypes = ['text/plain', 'text/csv', 'application/json'];\n  if (!allowedTypes.includes(file.type)) {\n    throw new Error('Unsupported file type.');\n  }\n\n  return await readFile(file);\n}\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"readFileAsDataURL","target":854},{"kind":"text","text":" - Read file as data URL for images/media"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"https://developer.mozilla.org/en-US/docs/Web/API/FileReader","target":"https://developer.mozilla.org/en-US/docs/Web/API/FileReader"},{"kind":"text","text":" - Browser support: IE 10+, all modern browsers"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"https://www.w3.org/WAI/WCAG21/Understanding/error-identification.html","target":"https://www.w3.org/WAI/WCAG21/Understanding/error-identification.html"},{"kind":"text","text":" - WCAG: Error handling and user feedback"},{"kind":"text","text":"\n"}]}]},"parameters":[{"id":853,"name":"file","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要读取的File对象（来自input[type=\"file\"]或拖放）。The File object to read (from input[type=\"file\"] or drag-and-drop)"}]},"type":{"type":"reference","name":"File","qualifiedName":"File","package":"typescript"},"text":{"comment":"<p>要读取的File对象（来自input[type=&quot;file&quot;]或拖放）。The File object to read (from input[type=&quot;file&quot;] or drag-and-drop)</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"web-utils/src/file.Function.readFile","hash":"readFile"},"text":{"comment":"<h5>Function:</h5><p>readFile</p>\n<h5>Description:</h5><p>使用FileReader API将文件内容读取为文本。Reads a file&#39;s content as text using the FileReader API</p>\n<h5>Returns:</h5><p>解析为文件文本内容的Promise。Promise that resolves to the file&#39;s text content</p>\n<h5>Throws:</h5><p>如果文件读取失败或文件损坏则抛出错误。Throws if file reading fails or file is corrupted</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Handle file input change</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">fileInput</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>file-input<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-smi\">fileInput</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>change<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">async</span> (<span class=\"pl-v\">event</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">file</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">event</span>.<span class=\"pl-c1\">target</span>.<span class=\"pl-smi\">files</span>[<span class=\"pl-c1\">0</span>];\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">file</span>) {\n    <span class=\"pl-k\">try</span> {\n      <span class=\"pl-k\">const</span> <span class=\"pl-c1\">content</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">readFile</span>(<span class=\"pl-smi\">file</span>);\n      <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>file-content<span class=\"pl-pds\">'</span></span>).<span class=\"pl-smi\">textContent</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">content</span>;\n    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n      <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Failed to read file:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>);\n    }\n  }\n});\n</code></pre>\n<h5>Example:</h5><p>// Process multiple files with progress indication\nasync function processFiles(files) {\n  const results = [];\n  for (let i = 0; i &lt; files.length; i++) {\n    try {\n      const content = await readFile(files[i]);\n      results.push({ name: files[i].name, content });\n      updateProgress((i + 1) / files.length * 100);\n    } catch (error) {\n      console.error(<code>Failed to read ${files[i].name}:</code>, error);\n    }\n  }\n  return results;\n}</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Validate file content before processing</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">validateAndReadFile</span>(<span class=\"pl-v\">file</span>) {\n  <span class=\"pl-c\">// Check file size (e.g., max 5MB)</span>\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">file</span>.<span class=\"pl-c1\">size</span> <span class=\"pl-k\">></span> <span class=\"pl-c1\">5</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1024</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1024</span>) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>File too large. Maximum size is 5MB.<span class=\"pl-pds\">'</span></span>);\n  }\n\n  <span class=\"pl-c\">// Check file type</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">allowedTypes</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>text/plain<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>text/csv<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>application/json<span class=\"pl-pds\">'</span></span>];\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">allowedTypes</span>.<span class=\"pl-en\">includes</span>(<span class=\"pl-smi\">file</span>.<span class=\"pl-c1\">type</span>)) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Unsupported file type.<span class=\"pl-pds\">'</span></span>);\n  }\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">readFile</span>(<span class=\"pl-smi\">file</span>);\n}\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><ul>\n<li><a href=\"854\">readFileAsDataURL</a> - Read file as data URL for images/media</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader\">https://developer.mozilla.org/en-US/docs/Web/API/FileReader</a> - Browser support: IE 10+, all modern browsers</li>\n<li><a href=\"https://www.w3.org/WAI/WCAG21/Understanding/error-identification.html\">https://www.w3.org/WAI/WCAG21/Understanding/error-identification.html</a> - WCAG: Error handling and user feedback</li>\n</ul>\n"},"sources":[{"fileName":"packages/web-utils/src/file.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/web-utils/src/file.ts","line":65,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/web-utils/src/file.ts#L65"}],"parentId":851}],"is":{"declaration":true},"location":{"query":"web-utils/src/file.Function.readFile","hash":""},"text":{},"parentId":850}
