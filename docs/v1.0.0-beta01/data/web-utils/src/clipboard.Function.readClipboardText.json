{"id":745,"name":"readClipboardText","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/web-utils/src/clipboard.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/web-utils/src/clipboard.ts","line":60,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/web-utils/src/clipboard.ts#L60"}],"signatures":[{"id":746,"name":"readClipboardText","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"readClipboardText"}]},{"tag":"@description","content":[{"kind":"text","text":"使用现代剪贴板API从系统剪贴板读取文本内容。Reads text content from the system clipboard using the modern Clipboard API"}]},{"tag":"@returns","content":[{"kind":"text","text":"解析为剪贴板文本内容的Promise。Promise that resolves to the clipboard text content"}]},{"tag":"@throws","content":[{"kind":"text","text":"如果剪贴板访问被拒绝或不受支持则抛出错误。Throws if clipboard access is denied or not supported"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic clipboard reading\nreadClipboardText()\n  .then(text => {\n    console.log('Clipboard content:', text);\n    document.getElementById('paste-area').textContent = text;\n  })\n  .catch(error => {\n    console.error('Failed to read clipboard:', error);\n  });\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Async/await usage with error handling\nasync function handlePaste() {\n  try {\n    const clipboardText = await readClipboardText();\n    if (clipboardText.trim()) {\n      processClipboardContent(clipboardText);\n    }\n  } catch (error) {\n    // Handle permission denied or unsupported browser\n    showFallbackPasteOption();\n  }\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Check permissions before reading\nasync function safeReadClipboard() {\n  try {\n    const permission = await navigator.permissions.query({ name: 'clipboard-read' });\n    if (permission.state === 'granted') {\n      const text = await readClipboardText();\n      return text;\n    } else {\n      throw new Error('Clipboard read permission not granted');\n    }\n  } catch (error) {\n    console.warn('Clipboard access failed:', error);\n    return null;\n  }\n}\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"copyToClipboard","target":747},{"kind":"text","text":" - Copy text to clipboard"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText","target":"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText"},{"kind":"text","text":" - Browser support: Chrome 66+, Firefox 125+, Safari 13.1+"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"https://caniuse.com/async-clipboard","target":"https://caniuse.com/async-clipboard"},{"kind":"text","text":" - Clipboard API browser compatibility"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"https://w3c.github.io/clipboard-apis/#security-considerations","target":"https://w3c.github.io/clipboard-apis/#security-considerations"},{"kind":"text","text":" - Security considerations for clipboard access"},{"kind":"text","text":"\n"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"web-utils/src/clipboard.Function.readClipboardText","hash":"readClipboardText"},"text":{"comment":"<h5>Function:</h5><p>readClipboardText</p>\n<h5>Description:</h5><p>使用现代剪贴板API从系统剪贴板读取文本内容。Reads text content from the system clipboard using the modern Clipboard API</p>\n<h5>Returns:</h5><p>解析为剪贴板文本内容的Promise。Promise that resolves to the clipboard text content</p>\n<h5>Throws:</h5><p>如果剪贴板访问被拒绝或不受支持则抛出错误。Throws if clipboard access is denied or not supported</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic clipboard reading</span>\n<span class=\"pl-en\">readClipboardText</span>()\n  .<span class=\"pl-c1\">then</span>(<span class=\"pl-v\">text</span> <span class=\"pl-k\">=></span> {\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Clipboard content:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">text</span>);\n    <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>paste-area<span class=\"pl-pds\">'</span></span>).<span class=\"pl-smi\">textContent</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">text</span>;\n  })\n  .<span class=\"pl-c1\">catch</span>(<span class=\"pl-v\">error</span> <span class=\"pl-k\">=></span> {\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Failed to read clipboard:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>);\n  });\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Async/await usage with error handling</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">handlePaste</span>() {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">clipboardText</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">readClipboardText</span>();\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">clipboardText</span>.<span class=\"pl-en\">trim</span>()) {\n      <span class=\"pl-en\">processClipboardContent</span>(<span class=\"pl-smi\">clipboardText</span>);\n    }\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n    <span class=\"pl-c\">// Handle permission denied or unsupported browser</span>\n    <span class=\"pl-en\">showFallbackPasteOption</span>();\n  }\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Check permissions before reading</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">safeReadClipboard</span>() {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">permission</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-c1\">navigator</span>.<span class=\"pl-smi\">permissions</span>.<span class=\"pl-en\">query</span>({ name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>clipboard-read<span class=\"pl-pds\">'</span></span> });\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">permission</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>granted<span class=\"pl-pds\">'</span></span>) {\n      <span class=\"pl-k\">const</span> <span class=\"pl-c1\">text</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">readClipboardText</span>();\n      <span class=\"pl-k\">return</span> <span class=\"pl-smi\">text</span>;\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Clipboard read permission not granted<span class=\"pl-pds\">'</span></span>);\n    }\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">warn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Clipboard access failed:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>);\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n  }\n}\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><ul>\n<li><a href=\"747\">copyToClipboard</a> - Copy text to clipboard</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText\">https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText</a> - Browser support: Chrome 66+, Firefox 125+, Safari 13.1+</li>\n<li><a href=\"https://caniuse.com/async-clipboard\">https://caniuse.com/async-clipboard</a> - Clipboard API browser compatibility</li>\n<li><a href=\"https://w3c.github.io/clipboard-apis/#security-considerations\">https://w3c.github.io/clipboard-apis/#security-considerations</a> - Security considerations for clipboard access</li>\n</ul>\n"},"sources":[{"fileName":"packages/web-utils/src/clipboard.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/web-utils/src/clipboard.ts","line":60,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/web-utils/src/clipboard.ts#L60"}],"parentId":745}],"is":{"declaration":true},"location":{"query":"web-utils/src/clipboard.Function.readClipboardText","hash":""},"text":{},"parentId":744}
