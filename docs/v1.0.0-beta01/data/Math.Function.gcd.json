{"id":545,"name":"gcd","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/math.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/math.ts","line":82,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/math.ts#L82"}],"signatures":[{"id":546,"name":"gcd","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"gcd"}]},{"tag":"@description","content":[{"kind":"text","text":"使用欧几里得算法计算两个整数的最大公约数（GCD）。Calculates the Greatest Common Divisor (GCD) of two integers using Euclidean algorithm"}]},{"tag":"@returns","content":[{"kind":"text","text":"能同时整除x和y的最大正整数。当y为0时返回|x|。The largest positive integer that divides both x and y. Returns |x| when y is 0"}]},{"tag":"@throws","content":[{"kind":"text","text":"当x或y不是数字时。When x or y is not a number"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\ngcd(12, 18); // -> 6 (largest number that divides both 12 and 18)\ngcd(48, 18); // -> 6\ngcd(17, 13); // -> 1 (coprime numbers)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\ngcd(12, 0); // -> 12 (GCD of any number and 0 is the number itself)\ngcd(0, 18); // -> 18\ngcd(0, 0); // -> 0\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Negative numbers\ngcd(-12, 18); // -> 6 (GCD is always positive)\ngcd(12, -18); // -> 6\ngcd(-12, -18); // -> 6\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Mathematical applications\n// Simplifying fractions: reduce 12/18 to lowest terms\nconst numerator = 12, denominator = 18;\nconst divisor = gcd(numerator, denominator); // -> 6\nconst simplified = [numerator / divisor, denominator / divisor]; // -> [2, 3]\n```"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"https://en.wikipedia.org/wiki/Euclidean_algorithm","target":"https://en.wikipedia.org/wiki/Euclidean_algorithm"},{"kind":"text","text":" - Euclidean algorithm explanation"}]}]},"parameters":[{"id":547,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"第一个整数。First integer"}]},"type":{"type":"intrinsic","name":"number"},"text":{"comment":"<p>第一个整数。First integer</p>\n"}},{"id":548,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"第二个整数。Second integer"}]},"type":{"type":"intrinsic","name":"number"},"text":{"comment":"<p>第二个整数。Second integer</p>\n"}}],"type":{"type":"intrinsic","name":"number"},"is":{"declaration":false},"location":{"query":"Math.Function.gcd","hash":"gcd"},"text":{"comment":"<h5>Function:</h5><p>gcd</p>\n<h5>Description:</h5><p>使用欧几里得算法计算两个整数的最大公约数（GCD）。Calculates the Greatest Common Divisor (GCD) of two integers using Euclidean algorithm</p>\n<h5>Returns:</h5><p>能同时整除x和y的最大正整数。当y为0时返回|x|。The largest positive integer that divides both x and y. Returns |x| when y is 0</p>\n<h5>Throws:</h5><p>当x或y不是数字时。When x or y is not a number</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 6 (largest number that divides both 12 and 18)</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-c1\">48</span>, <span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 6</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-c1\">17</span>, <span class=\"pl-c1\">13</span>); <span class=\"pl-c\">// -> 1 (coprime numbers)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> 12 (GCD of any number and 0 is the number itself)</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 18</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> 0</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Negative numbers</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 6 (GCD is always positive)</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-c1\">12</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 6</span>\n<span class=\"pl-en\">gcd</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">12</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 6</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Mathematical applications</span>\n<span class=\"pl-c\">// Simplifying fractions: reduce 12/18 to lowest terms</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">numerator</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">denominator</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">18</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">divisor</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">gcd</span>(<span class=\"pl-smi\">numerator</span>, <span class=\"pl-smi\">denominator</span>); <span class=\"pl-c\">// -> 6</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">simplified</span> <span class=\"pl-k\">=</span> [<span class=\"pl-smi\">numerator</span> <span class=\"pl-k\">/</span> <span class=\"pl-smi\">divisor</span>, <span class=\"pl-smi\">denominator</span> <span class=\"pl-k\">/</span> <span class=\"pl-smi\">divisor</span>]; <span class=\"pl-c\">// -> [2, 3]</span>\n</code></pre>\n<h5>See:</h5><p><a href=\"https://en.wikipedia.org/wiki/Euclidean_algorithm\">https://en.wikipedia.org/wiki/Euclidean_algorithm</a> - Euclidean algorithm explanation</p>\n"},"sources":[{"fileName":"packages/utils/src/math.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/math.ts","line":82,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/math.ts#L82"}],"parentId":545}],"is":{"declaration":true},"location":{"query":"Math.Function.gcd","hash":""},"text":{},"parentId":541}
