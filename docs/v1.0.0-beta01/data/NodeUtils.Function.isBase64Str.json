{"id":1523,"name":"isBase64Str","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-utils/src/common/base64.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/common/base64.ts","line":127,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/common/base64.ts#L127"}],"signatures":[{"id":1524,"name":"isBase64Str","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"isBase64Str"}]},{"tag":"@description","content":[{"kind":"text","text":"验证字符串是否为正确格式的Base64。Validates whether a string is properly formatted Base64 using round-trip encoding verification."}]},{"tag":"@returns","content":[{"kind":"text","text":"如果是有效Base64返回true，否则返回false。True if the string is valid Base64, false otherwise"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Validate Base64 strings\nconsole.log(isBase64Str('aGVsbG8gd29ybGQ=')); // true\nconsole.log(isBase64Str('hello world'));       // false\nconsole.log(isBase64Str('invalid@base64!'));   // false\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Input validation before decoding\nfunction safeBase64Decode(input) {\n  if (!isBase64Str(input)) {\n    throw new Error('Invalid Base64 input');\n  }\n  return base64Decode(input);\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Filter valid Base64 strings from array\nconst inputs = ['aGVsbG8=', 'invalid', 'dGVzdA==', 'also-invalid'];\nconst validBase64 = inputs.filter(isBase64Str);\nconsole.log(validBase64); // ['aGVsbG8=', 'dGVzdA==']\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// API input validation\napp.post('/decode', (req, res) => {\n  const { data } = req.body;\n  if (!isBase64Str(data)) {\n    return res.status(400).json({ error: 'Invalid Base64 format' });\n  }\n  const decoded = base64Decode(data);\n  res.json({ result: decoded });\n});\n```"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"base64Decode","target":1520},{"kind":"text","text":" - Decode validated Base64 strings"}]}]},"parameters":[{"id":1525,"name":"str","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要验证的字符串。The string to validate for Base64 format"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>要验证的字符串。The string to validate for Base64 format</p>\n"}}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":false},"location":{"query":"NodeUtils.Function.isBase64Str","hash":"isBase64Str"},"text":{"comment":"<h5>Function:</h5><p>isBase64Str</p>\n<h5>Description:</h5><p>验证字符串是否为正确格式的Base64。Validates whether a string is properly formatted Base64 using round-trip encoding verification.</p>\n<h5>Returns:</h5><p>如果是有效Base64返回true，否则返回false。True if the string is valid Base64, false otherwise</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Validate Base64 strings</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">isBase64Str</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>aGVsbG8gd29ybGQ=<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\">// true</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">isBase64Str</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello world<span class=\"pl-pds\">'</span></span>));       <span class=\"pl-c\">// false</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">isBase64Str</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>invalid@base64!<span class=\"pl-pds\">'</span></span>));   <span class=\"pl-c\">// false</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Input validation before decoding</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">safeBase64Decode</span>(<span class=\"pl-v\">input</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-en\">isBase64Str</span>(<span class=\"pl-smi\">input</span>)) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Invalid Base64 input<span class=\"pl-pds\">'</span></span>);\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">base64Decode</span>(<span class=\"pl-smi\">input</span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Filter valid Base64 strings from array</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">inputs</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>aGVsbG8=<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>invalid<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dGVzdA==<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>also-invalid<span class=\"pl-pds\">'</span></span>];\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">validBase64</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">inputs</span>.<span class=\"pl-en\">filter</span>(<span class=\"pl-smi\">isBase64Str</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">validBase64</span>); <span class=\"pl-c\">// ['aGVsbG8=', 'dGVzdA==']</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// API input validation</span>\n<span class=\"pl-smi\">app</span>.<span class=\"pl-en\">post</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/decode<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-v\">req</span>, <span class=\"pl-v\">res</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">const</span> { <span class=\"pl-c1\">data</span> } <span class=\"pl-k\">=</span> <span class=\"pl-smi\">req</span>.<span class=\"pl-c1\">body</span>;\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-en\">isBase64Str</span>(<span class=\"pl-smi\">data</span>)) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">res</span>.<span class=\"pl-en\">status</span>(<span class=\"pl-c1\">400</span>).<span class=\"pl-en\">json</span>({ error: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Invalid Base64 format<span class=\"pl-pds\">'</span></span> });\n  }\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">decoded</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">base64Decode</span>(<span class=\"pl-smi\">data</span>);\n  <span class=\"pl-smi\">res</span>.<span class=\"pl-en\">json</span>({ result: <span class=\"pl-smi\">decoded</span> });\n});\n</code></pre>\n<h5>See:</h5><p><a href=\"1520\">base64Decode</a> - Decode validated Base64 strings</p>\n"},"sources":[{"fileName":"packages/node-utils/src/common/base64.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/common/base64.ts","line":127,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/common/base64.ts#L127"}],"parentId":1523}],"is":{"declaration":true},"location":{"query":"NodeUtils.Function.isBase64Str","hash":""},"text":{},"parentId":743}
