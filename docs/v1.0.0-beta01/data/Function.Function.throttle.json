{"id":491,"name":"throttle","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":675,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L675"}],"signatures":[{"id":492,"name":"throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"throttle"}]},{"tag":"@description","content":[{"kind":"text","text":"创建限制执行频率的节流函数，每个间隔只能执行一次。Creates a throttled function that limits execution to once per interval"}]},{"tag":"@returns","content":[{"kind":"text","text":"节流函数。Throttled function"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic throttling\nfunction log(message: string) {\n  console.log(new Date().toISOString(), message);\n}\n\nconst logThrottled = throttle(log, 1000);\n\n// Rapid calls - only first one executes immediately, others are ignored\nlogThrottled('Message 1'); // Executes immediately\nlogThrottled('Message 2'); // Ignored\nlogThrottled('Message 3'); // Ignored\n\nsetTimeout(() => logThrottled('Message 4'), 1100); // Executes after interval\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Scroll event throttling\nconst handleScroll = throttle(() => {\n  console.log('Scroll position:', window.scrollY);\n}, 100);\n\nwindow.addEventListener('scroll', handleScroll);\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"// API call throttling\nconst searchAPI = throttle(async (query) => {\n  const response = await fetch("},{"kind":"code","text":"`/api/search?q=${query}`"},{"kind":"text","text":");\n  return response.json();\n}, 300);"}]}]},"typeParameter":[{"id":496,"name":"F","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reflection","declaration":{"id":493,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":675,"character":35,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L675"}],"signatures":[{"id":494,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":495,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"any"}}]}}}],"parameters":[{"id":497,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要节流的函数。Function to throttle"}]},"type":{"type":"reference","id":496,"name":"F"},"text":{"comment":"<p>要节流的函数。Function to throttle</p>\n"}},{"id":498,"name":"intervalTime","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"执行之间的最小时间间隔（毫秒）（默认：500）。Minimum time between executions in milliseconds (default: 500)"}]},"type":{"type":"intrinsic","name":"number"},"defaultValue":"DEFAULT_INTERVAL","text":{"comment":"<p>执行之间的最小时间间隔（毫秒）（默认：500）。Minimum time between executions in milliseconds (default: 500)</p>\n"}}],"type":{"type":"reflection","declaration":{"id":499,"name":"throttle","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":678,"character":3,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L678"}],"signatures":[{"id":500,"name":"throttle","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":501,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":496,"name":"F"}],"name":"Parameters","qualifiedName":"Parameters","package":"typescript"},"text":{}}],"type":{"type":"intrinsic","name":"void"},"is":{"declaration":false},"location":{"query":"Function.Function.throttle","hash":"throttle.__type"},"text":{},"parentId":491}],"location":{"query":"Function.Function.throttle","hash":"throttle"}}},"is":{"declaration":false},"location":{"query":"Function.Function.throttle","hash":"throttle"},"text":{"comment":"<h5>Function:</h5><p>throttle</p>\n<h5>Description:</h5><p>创建限制执行频率的节流函数，每个间隔只能执行一次。Creates a throttled function that limits execution to once per interval</p>\n<h5>Returns:</h5><p>节流函数。Throttled function</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic throttling</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">log</span>(<span class=\"pl-v\">message</span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">string</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Date</span>().<span class=\"pl-en\">toISOString</span>(), <span class=\"pl-smi\">message</span>);\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">logThrottled</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">throttle</span>(<span class=\"pl-smi\">log</span>, <span class=\"pl-c1\">1000</span>);\n\n<span class=\"pl-c\">// Rapid calls - only first one executes immediately, others are ignored</span>\n<span class=\"pl-en\">logThrottled</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Message 1<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// Executes immediately</span>\n<span class=\"pl-en\">logThrottled</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Message 2<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// Ignored</span>\n<span class=\"pl-en\">logThrottled</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Message 3<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// Ignored</span>\n\n<span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-en\">logThrottled</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Message 4<span class=\"pl-pds\">'</span></span>), <span class=\"pl-c1\">1100</span>); <span class=\"pl-c\">// Executes after interval</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Scroll event throttling</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">handleScroll</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">throttle</span>(() <span class=\"pl-k\">=></span> {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Scroll position:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">scrollY</span>);\n}, <span class=\"pl-c1\">100</span>);\n\n<span class=\"pl-c1\">window</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scroll<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">handleScroll</span>);\n</code></pre>\n<h5>Example:</h5><p>// API call throttling\nconst searchAPI = throttle(async (query) =&gt; {\n  const response = await fetch(<code>/api/search?q=${query}</code>);\n  return response.json();\n}, 300);</p>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":675,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L675"}],"parentId":491}],"is":{"declaration":true},"location":{"query":"Function.Function.throttle","hash":""},"text":{},"parentId":391}
