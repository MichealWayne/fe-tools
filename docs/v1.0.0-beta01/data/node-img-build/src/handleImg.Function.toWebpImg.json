{"id":1178,"name":"toWebpImg","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-img-build/src/handleImg.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-img-build/src/handleImg.ts","line":132,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-img-build/src/handleImg.ts#L132"}],"signatures":[{"id":1179,"name":"toWebpImg","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@description","content":[{"kind":"text","text":"Convert an image to WebP format with automatic filename handling for retina images"}]},{"tag":"@returns","content":[{"kind":"text","text":"Promise resolving to the full path of the generated WebP file"}]},{"tag":"@throws","content":[{"kind":"text","text":"When source image cannot be read or WebP conversion fails"}]},{"tag":"@example","content":[{"kind":"text","text":"// Convert regular image to WebP with default quality (80%)\r\nconst webpPath = await toWebpImg('./src/images', 'photo.jpg', './dist/images');\r\nconsole.log("},{"kind":"code","text":"`WebP created: ${webpPath}`"},{"kind":"text","text":");"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Convert retina image with custom quality\r\nawait toWebpImg('./assets', 'hero_2x.png', './public', { quality: 90 });\r\n// Creates: ./public/hero.webp (removes _2x from filename)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Batch convert images with optimized quality for web\r\nconst images = ['banner.jpg', 'icon_2x.png', 'background.jpg'];\r\nfor (const img of images) {\r\n  await toWebpImg('./src', img, './dist', { quality: 85 });\r\n}\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]}]},"parameters":[{"id":1180,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"Directory path containing the source image"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>Directory path containing the source image</p>\n"}},{"id":1181,"name":"imgName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"Source image filename (supports retina '_2x.' naming)"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>Source image filename (supports retina &#39;_2x.&#39; naming)</p>\n"}},{"id":1182,"name":"outPath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"Output directory where WebP file will be saved"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>Output directory where WebP file will be saved</p>\n"}},{"id":1183,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"WebP conversion options including quality settings"}]},"type":{"type":"reference","id":1206,"name":"WebpOptions"},"defaultValue":"{}","text":{"comment":"<p>WebP conversion options including quality settings</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"node-img-build/src/handleImg.Function.toWebpImg","hash":"toWebpImg"},"text":{"comment":"<h5>Description:</h5><p>Convert an image to WebP format with automatic filename handling for retina images</p>\n<h5>Returns:</h5><p>Promise resolving to the full path of the generated WebP file</p>\n<h5>Throws:</h5><p>When source image cannot be read or WebP conversion fails</p>\n<h5>Example:</h5><p>// Convert regular image to WebP with default quality (80%)\nconst webpPath = await toWebpImg(&#39;./src/images&#39;, &#39;photo.jpg&#39;, &#39;./dist/images&#39;);\nconsole.log(<code>WebP created: ${webpPath}</code>);</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Convert retina image with custom quality</span>\n<span class=\"pl-k\">await</span> <span class=\"pl-en\">toWebpImg</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./assets<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>hero_2x.png<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./public<span class=\"pl-pds\">'</span></span>, { quality: <span class=\"pl-c1\">90</span> });\n<span class=\"pl-c\">// Creates: ./public/hero.webp (removes _2x from filename)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Batch convert images with optimized quality for web</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">images</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>banner.jpg<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>icon_2x.png<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>background.jpg<span class=\"pl-pds\">'</span></span>];\n<span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> <span class=\"pl-c1\">img</span> <span class=\"pl-k\">of</span> <span class=\"pl-smi\">images</span>) {\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">toWebpImg</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">img</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./dist<span class=\"pl-pds\">'</span></span>, { quality: <span class=\"pl-c1\">85</span> });\n}\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n"},"sources":[{"fileName":"packages/node-img-build/src/handleImg.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-img-build/src/handleImg.ts","line":132,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-img-build/src/handleImg.ts#L132"}],"parentId":1178}],"is":{"declaration":true},"location":{"query":"node-img-build/src/handleImg.Function.toWebpImg","hash":""},"text":{},"parentId":1170}
