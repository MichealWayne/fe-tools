{"id":1197,"name":"generate1xFrom2x","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-img-build/src/handleImg.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-img-build/src/handleImg.ts","line":329,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-img-build/src/handleImg.ts#L329"}],"signatures":[{"id":1198,"name":"generate1xFrom2x","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@description","content":[{"kind":"text","text":"Generate standard resolution (1x) image from retina resolution (2x) image"}]},{"tag":"@returns","content":[{"kind":"text","text":"Promise resolving to the full path of the generated 1x image"}]},{"tag":"@throws","content":[{"kind":"text","text":"When image name doesn't contain '_2x.', file not found, or processing fails"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Generate 1x from retina image\r\nconst outputPath = await generate1xFrom2x('./assets', 'icon_2x.png', './dist');\r\n// Creates: ./dist/icon.png (half the dimensions of icon_2x.png)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Batch process all retina images\r\nconst retinaImages = getImgList('./src/images', { only2x: true });\r\nfor (const img of retinaImages) {\r\n  await generate1xFrom2x('./src/images', img, './public/images');\r\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Process retina assets for responsive design\r\nconst assets = ['logo_2x.png', 'hero_2x.jpg', 'button_2x.png'];\r\nconst results = await Promise.all(\r\n  assets.map(asset => generate1xFrom2x('./assets', asset, './dist'))\r\n);\r\nconsole.log('Generated 1x images:', results);\n```"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]}]},"parameters":[{"id":1199,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"Directory path containing the 2x source image"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>Directory path containing the 2x source image</p>\n"}},{"id":1200,"name":"imgName","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"Source image filename (must contain '_2x.' in the name)"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>Source image filename (must contain &#39;_2x.&#39; in the name)</p>\n"}},{"id":1201,"name":"outPath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"Output directory where 1x image will be saved"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>Output directory where 1x image will be saved</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"node-img-build/src/handleImg.Function.generate1xFrom2x","hash":"generate1xFrom2x"},"text":{"comment":"<h5>Description:</h5><p>Generate standard resolution (1x) image from retina resolution (2x) image</p>\n<h5>Returns:</h5><p>Promise resolving to the full path of the generated 1x image</p>\n<h5>Throws:</h5><p>When image name doesn&#39;t contain &#39;_2x.&#39;, file not found, or processing fails</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Generate 1x from retina image</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">outputPath</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">generate1xFrom2x</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./assets<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>icon_2x.png<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./dist<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c\">// Creates: ./dist/icon.png (half the dimensions of icon_2x.png)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Batch process all retina images</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">retinaImages</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getImgList</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/images<span class=\"pl-pds\">'</span></span>, { only2x: <span class=\"pl-c1\">true</span> });\n<span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> <span class=\"pl-c1\">img</span> <span class=\"pl-k\">of</span> <span class=\"pl-smi\">retinaImages</span>) {\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">generate1xFrom2x</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/images<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">img</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./public/images<span class=\"pl-pds\">'</span></span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Process retina assets for responsive design</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">assets</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>logo_2x.png<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>hero_2x.jpg<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>button_2x.png<span class=\"pl-pds\">'</span></span>];\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">results</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-c1\">Promise</span>.<span class=\"pl-c1\">all</span>(\n  <span class=\"pl-smi\">assets</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-v\">asset</span> <span class=\"pl-k\">=></span> <span class=\"pl-en\">generate1xFrom2x</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./assets<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">asset</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./dist<span class=\"pl-pds\">'</span></span>))\n);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Generated 1x images:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">results</span>);\n</code></pre>\n<h5>Since:</h5><p>1.0.0</p>\n"},"sources":[{"fileName":"packages/node-img-build/src/handleImg.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-img-build/src/handleImg.ts","line":329,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-img-build/src/handleImg.ts#L329"}],"parentId":1197}],"is":{"declaration":true},"location":{"query":"node-img-build/src/handleImg.Function.generate1xFrom2x","hash":""},"text":{},"parentId":1170}
