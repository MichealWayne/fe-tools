{"id":408,"name":"runPromisesInSeries","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":160,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L160"}],"signatures":[{"id":409,"name":"runPromisesInSeries","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"runPromisesInSeries"}]},{"tag":"@description","content":[{"kind":"text","text":"按顺序执行返回 Promise 的函数数组（一个接一个）。Executes an array of promise-returning functions sequentially (one after another)"}]},{"tag":"@returns","content":[{"kind":"text","text":"使用最后一个函数的结果解析的 Promise。Promise that resolves with the result of the last function"}]},{"tag":"@throws","content":[{"kind":"text","text":"如果序列中的任何 Promise 被拒绝。If any promise in the sequence rejects"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Sequential API calls\nasync function fetchData(url: string) {\n  const response = await fetch(url);\n  return response.json();\n}\n\nconst urls = ['https://api.example.com/data1', 'https://api.example.com/data2'];\nrunPromisesInSeries(urls.map(url => () => fetchData(url)))\n  .then(result => console.log('Final result:', result))\n  .catch(error => console.error('Error:', error));\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Sequential processing with delays\nconst tasks = [\n  () => new Promise(resolve => setTimeout(() => resolve('Task 1'), 1000)),\n  () => new Promise(resolve => setTimeout(() => resolve('Task 2'), 500)),\n  () => new Promise(resolve => setTimeout(() => resolve('Task 3'), 200))\n];\n\nrunPromisesInSeries(tasks); // Takes ~1.7 seconds total (sequential)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Database operations in sequence\nconst dbOperations = [\n  () => createUser({ name: 'John' }),\n  () => createProfile({ userId: 1 }),\n  () => sendWelcomeEmail({ userId: 1 })\n];\n\nrunPromisesInSeries(dbOperations);\n```"}]}]},"parameters":[{"id":410,"name":"ps","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"返回 Promise 的函数数组。Array of functions that return promises"}]},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":411,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":160,"character":46,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L160"}],"signatures":[{"id":412,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":413,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]}}},"text":{"comment":"<p>返回 Promise 的函数数组。Array of functions that return promises</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"Function.Function.runPromisesInSeries","hash":"runPromisesInSeries"},"text":{"comment":"<h5>Function:</h5><p>runPromisesInSeries</p>\n<h5>Description:</h5><p>按顺序执行返回 Promise 的函数数组（一个接一个）。Executes an array of promise-returning functions sequentially (one after another)</p>\n<h5>Returns:</h5><p>使用最后一个函数的结果解析的 Promise。Promise that resolves with the result of the last function</p>\n<h5>Throws:</h5><p>如果序列中的任何 Promise 被拒绝。If any promise in the sequence rejects</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Sequential API calls</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">fetchData</span>(<span class=\"pl-v\">url</span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">string</span>) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">response</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span>(<span class=\"pl-smi\">url</span>);\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">response</span>.<span class=\"pl-en\">json</span>();\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">urls</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.example.com/data1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.example.com/data2<span class=\"pl-pds\">'</span></span>];\n<span class=\"pl-en\">runPromisesInSeries</span>(<span class=\"pl-smi\">urls</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-v\">url</span> <span class=\"pl-k\">=></span> () <span class=\"pl-k\">=></span> <span class=\"pl-en\">fetchData</span>(<span class=\"pl-smi\">url</span>)))\n  .<span class=\"pl-c1\">then</span>(<span class=\"pl-v\">result</span> <span class=\"pl-k\">=></span> <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Final result:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">result</span>))\n  .<span class=\"pl-c1\">catch</span>(<span class=\"pl-v\">error</span> <span class=\"pl-k\">=></span> <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Error:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>));\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Sequential processing with delays</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">tasks</span> <span class=\"pl-k\">=</span> [\n  () <span class=\"pl-k\">=></span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Promise</span>(<span class=\"pl-v\">resolve</span> <span class=\"pl-k\">=></span> <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-en\">resolve</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Task 1<span class=\"pl-pds\">'</span></span>), <span class=\"pl-c1\">1000</span>)),\n  () <span class=\"pl-k\">=></span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Promise</span>(<span class=\"pl-v\">resolve</span> <span class=\"pl-k\">=></span> <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-en\">resolve</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Task 2<span class=\"pl-pds\">'</span></span>), <span class=\"pl-c1\">500</span>)),\n  () <span class=\"pl-k\">=></span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Promise</span>(<span class=\"pl-v\">resolve</span> <span class=\"pl-k\">=></span> <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-en\">resolve</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Task 3<span class=\"pl-pds\">'</span></span>), <span class=\"pl-c1\">200</span>))\n];\n\n<span class=\"pl-en\">runPromisesInSeries</span>(<span class=\"pl-smi\">tasks</span>); <span class=\"pl-c\">// Takes ~1.7 seconds total (sequential)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Database operations in sequence</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">dbOperations</span> <span class=\"pl-k\">=</span> [\n  () <span class=\"pl-k\">=></span> <span class=\"pl-en\">createUser</span>({ name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span> }),\n  () <span class=\"pl-k\">=></span> <span class=\"pl-en\">createProfile</span>({ userId: <span class=\"pl-c1\">1</span> }),\n  () <span class=\"pl-k\">=></span> <span class=\"pl-en\">sendWelcomeEmail</span>({ userId: <span class=\"pl-c1\">1</span> })\n];\n\n<span class=\"pl-en\">runPromisesInSeries</span>(<span class=\"pl-smi\">dbOperations</span>);\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":160,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L160"}],"parentId":408}],"is":{"declaration":true},"location":{"query":"Function.Function.runPromisesInSeries","hash":""},"text":{},"parentId":391}
