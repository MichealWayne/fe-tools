{"id":553,"name":"lcm","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/math.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/math.ts","line":164,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/math.ts#L164"}],"signatures":[{"id":554,"name":"lcm","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"lcm"}]},{"tag":"@description","content":[{"kind":"text","text":"计算两个整数的最小公倍数（LCM）。Calculates the Least Common Multiple (LCM) of two integers"}]},{"tag":"@returns","content":[{"kind":"text","text":"能被x和y同时整除的最小正整数。如果x或y为0则返回0。The smallest positive integer that is divisible by both x and y. Returns 0 if either x or y is 0"}]},{"tag":"@throws","content":[{"kind":"text","text":"当x或y不是数字时。When x or y is not a number"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\nlcm(12, 18); // -> 36 (smallest number divisible by both 12 and 18)\nlcm(4, 6); // -> 12\nlcm(7, 5); // -> 35 (coprime numbers: LCM = x × y)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\nlcm(12, 0); // -> 0 (LCM with 0 is always 0)\nlcm(0, 18); // -> 0\nlcm(5, 1); // -> 5 (LCM with 1 is the number itself)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Identical numbers\nlcm(8, 8); // -> 8 (LCM of identical numbers is the number itself)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Mathematical relationship: LCM(x,y) × GCD(x,y) = |x × y|\nconst x = 12, y = 18;\nconst lcmResult = lcm(x, y); // -> 36\nconst gcdResult = gcd(x, y); // -> 6\nconsole.log(lcmResult * gcdResult === Math.abs(x * y)); // -> true (36 × 6 = 216 = |12 × 18|)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Practical application: finding common denominators\n// To add fractions 1/12 + 1/18, find LCM of denominators\nconst commonDenominator = lcm(12, 18); // -> 36\n// Convert: 1/12 = 3/36, 1/18 = 2/36, sum = 5/36\n```"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"gcd","target":545},{"kind":"text","text":" - Used internally to calculate LCM using the formula: LCM(x,y) = |x×y| / GCD(x,y)"}]}]},"parameters":[{"id":555,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"第一个整数。First integer"}]},"type":{"type":"intrinsic","name":"number"},"text":{"comment":"<p>第一个整数。First integer</p>\n"}},{"id":556,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"第二个整数。Second integer"}]},"type":{"type":"intrinsic","name":"number"},"text":{"comment":"<p>第二个整数。Second integer</p>\n"}}],"type":{"type":"intrinsic","name":"number"},"is":{"declaration":false},"location":{"query":"Math.Function.lcm","hash":"lcm"},"text":{"comment":"<h5>Function:</h5><p>lcm</p>\n<h5>Description:</h5><p>计算两个整数的最小公倍数（LCM）。Calculates the Least Common Multiple (LCM) of two integers</p>\n<h5>Returns:</h5><p>能被x和y同时整除的最小正整数。如果x或y为0则返回0。The smallest positive integer that is divisible by both x and y. Returns 0 if either x or y is 0</p>\n<h5>Throws:</h5><p>当x或y不是数字时。When x or y is not a number</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-en\">lcm</span>(<span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 36 (smallest number divisible by both 12 and 18)</span>\n<span class=\"pl-en\">lcm</span>(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">6</span>); <span class=\"pl-c\">// -> 12</span>\n<span class=\"pl-en\">lcm</span>(<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">5</span>); <span class=\"pl-c\">// -> 35 (coprime numbers: LCM = x × y)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">lcm</span>(<span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> 0 (LCM with 0 is always 0)</span>\n<span class=\"pl-en\">lcm</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 0</span>\n<span class=\"pl-en\">lcm</span>(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">1</span>); <span class=\"pl-c\">// -> 5 (LCM with 1 is the number itself)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Identical numbers</span>\n<span class=\"pl-en\">lcm</span>(<span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">8</span>); <span class=\"pl-c\">// -> 8 (LCM of identical numbers is the number itself)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Mathematical relationship: LCM(x,y) × GCD(x,y) = |x × y|</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">x</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">y</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">18</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">lcmResult</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">lcm</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">y</span>); <span class=\"pl-c\">// -> 36</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">gcdResult</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">gcd</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">y</span>); <span class=\"pl-c\">// -> 6</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">lcmResult</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">gcdResult</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">abs</span>(<span class=\"pl-smi\">x</span> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">y</span>)); <span class=\"pl-c\">// -> true (36 × 6 = 216 = |12 × 18|)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Practical application: finding common denominators</span>\n<span class=\"pl-c\">// To add fractions 1/12 + 1/18, find LCM of denominators</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">commonDenominator</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">lcm</span>(<span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">18</span>); <span class=\"pl-c\">// -> 36</span>\n<span class=\"pl-c\">// Convert: 1/12 = 3/36, 1/18 = 2/36, sum = 5/36</span>\n</code></pre>\n<h5>See:</h5><p><a href=\"545\">gcd</a> - Used internally to calculate LCM using the formula: LCM(x,y) = |x×y| / GCD(x,y)</p>\n"},"sources":[{"fileName":"packages/utils/src/math.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/math.ts","line":164,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/math.ts#L164"}],"parentId":553}],"is":{"declaration":true},"location":{"query":"Math.Function.lcm","hash":""},"text":{},"parentId":541}
