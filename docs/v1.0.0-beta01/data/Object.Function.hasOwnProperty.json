{"id":631,"name":"hasOwnProperty","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":254,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L254"}],"signatures":[{"id":632,"name":"hasOwnProperty","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"hasOwnProperty"}]},{"tag":"@description","content":[{"kind":"text","text":"安全地检查对象是否具有特定的自有属性（非继承）。Safely checks if an object has a specific own property (not inherited)"}]},{"tag":"@returns","content":[{"kind":"text","text":"如果对象具有指定的自有属性则返回true，否则返回false。True if the object has the specified own property, false otherwise"}]},{"tag":"@throws","content":[{"kind":"text","text":"当obj不是对象时。When obj is not an object"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\nconst obj = { a: 1, b: 2 };\nhasOwnProperty(obj, 'a'); // -> true\nhasOwnProperty(obj, 'b'); // -> true\nhasOwnProperty(obj, 'c'); // -> false\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Inherited properties return false\nconst obj = { a: 1 };\nhasOwnProperty(obj, 'toString'); // -> false (inherited from Object.prototype)\nhasOwnProperty(obj, 'hasOwnProperty'); // -> false (inherited)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Different property types\nconst obj = {\n  string: 'value',\n  number: 42,\n  boolean: true,\n  null: null,\n  undefined: undefined,\n  0: 'numeric key',\n  '': 'empty string key'\n};\nhasOwnProperty(obj, 'string'); // -> true\nhasOwnProperty(obj, 'undefined'); // -> true (property exists, value is undefined)\nhasOwnProperty(obj, 0); // -> true (numeric keys work)\nhasOwnProperty(obj, ''); // -> true (empty string keys work)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Symbol keys\nconst sym = Symbol('test');\nconst obj = { [sym]: 'symbol value', regular: 'regular value' };\nhasOwnProperty(obj, sym); // -> true\nhasOwnProperty(obj, 'regular'); // -> true\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\nhasOwnProperty({}, 'anything'); // -> false\nhasOwnProperty({ a: undefined }, 'a'); // -> true (property exists with undefined value)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Safe alternative to obj.hasOwnProperty() which can be overridden\nconst maliciousObj = { hasOwnProperty: 'not a function', a: 1 };\n// maliciousObj.hasOwnProperty('a'); // Would throw error\nhasOwnProperty(maliciousObj, 'a'); // -> true (safe)\n```"}]}]},"typeParameter":[{"id":633,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record","qualifiedName":"Record","package":"typescript"}}],"parameters":[{"id":634,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要检查属性的对象。Object to check for the property"}]},"type":{"type":"reference","id":633,"name":"T"},"text":{"comment":"<p>要检查属性的对象。Object to check for the property</p>\n"}},{"id":635,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要检查的属性键。Property key to check for"}]},"type":{"type":"reference","name":"PropertyKey","qualifiedName":"PropertyKey","package":"typescript"},"text":{"comment":"<p>要检查的属性键。Property key to check for</p>\n"}}],"type":{"type":"predicate","name":"key","asserts":false,"targetType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":633,"name":"T"}}},"is":{"declaration":false},"location":{"query":"Object.Function.hasOwnProperty","hash":"hasOwnProperty"},"text":{"comment":"<h5>Function:</h5><p>hasOwnProperty</p>\n<h5>Description:</h5><p>安全地检查对象是否具有特定的自有属性（非继承）。Safely checks if an object has a specific own property (not inherited)</p>\n<h5>Returns:</h5><p>如果对象具有指定的自有属性则返回true，否则返回false。True if the object has the specified own property, false otherwise</p>\n<h5>Throws:</h5><p>当obj不是对象时。When obj is not an object</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">obj</span> <span class=\"pl-k\">=</span> { a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-c1\">2</span> };\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>c<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> false</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Inherited properties return false</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">obj</span> <span class=\"pl-k\">=</span> { a: <span class=\"pl-c1\">1</span> };\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>toString<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> false (inherited from Object.prototype)</span>\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>hasOwnProperty<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> false (inherited)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Different property types</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">obj</span> <span class=\"pl-k\">=</span> {\n  string: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>value<span class=\"pl-pds\">'</span></span>,\n  number: <span class=\"pl-c1\">42</span>,\n  boolean: <span class=\"pl-c1\">true</span>,\n  null: <span class=\"pl-c1\">null</span>,\n  undefined: <span class=\"pl-c1\">undefined</span>,\n  <span class=\"pl-c1\">0</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>numeric key<span class=\"pl-pds\">'</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>empty string key<span class=\"pl-pds\">'</span></span>\n};\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>string<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>undefined<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> true (property exists, value is undefined)</span>\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> true (numeric keys work)</span>\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>); <span class=\"pl-c\">// -> true (empty string keys work)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Symbol keys</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">sym</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Symbol</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">obj</span> <span class=\"pl-k\">=</span> { [<span class=\"pl-smi\">sym</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>symbol value<span class=\"pl-pds\">'</span></span>, regular: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>regular value<span class=\"pl-pds\">'</span></span> };\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-smi\">sym</span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">obj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>regular<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">hasOwnProperty</span>({}, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>anything<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">hasOwnProperty</span>({ a: <span class=\"pl-c1\">undefined</span> }, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> true (property exists with undefined value)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Safe alternative to obj.hasOwnProperty() which can be overridden</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">maliciousObj</span> <span class=\"pl-k\">=</span> { hasOwnProperty: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>not a function<span class=\"pl-pds\">'</span></span>, a: <span class=\"pl-c1\">1</span> };\n<span class=\"pl-c\">// maliciousObj.hasOwnProperty('a'); // Would throw error</span>\n<span class=\"pl-en\">hasOwnProperty</span>(<span class=\"pl-smi\">maliciousObj</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> true (safe)</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":254,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L254"}],"parentId":631}],"is":{"declaration":true},"location":{"query":"Object.Function.hasOwnProperty","hash":""},"text":{},"parentId":603}
