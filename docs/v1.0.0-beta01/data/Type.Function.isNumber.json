{"id":720,"name":"isNumber","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":180,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L180"}],"signatures":[{"id":721,"name":"isNumber","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"isNumber"}]},{"tag":"@description","content":[{"kind":"text","text":"检查值是否为有限数字（排除NaN和Infinity）。Checks if a value is a finite number (excludes NaN and Infinity)"}]},{"tag":"@returns","content":[{"kind":"text","text":"如果值为有限数字则返回true，否则返回false。True if the value is a finite number, false otherwise"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Valid numbers\nisNumber(1); // -> true\nisNumber(0); // -> true\nisNumber(-42); // -> true\nisNumber(3.14); // -> true\nisNumber(Number(1)); // -> true\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Invalid numbers\nisNumber(NaN); // -> false\nisNumber(Infinity); // -> false\nisNumber(-Infinity); // -> false\nisNumber(new Number(1)); // -> false (Number object)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Non-numbers\nisNumber('123'); // -> false (string)\nisNumber(null); // -> false\nisNumber(undefined); // -> false\nisNumber(true); // -> false\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\nisNumber(0 / 0); // -> false (NaN)\nisNumber(1 / 0); // -> false (Infinity)\nisNumber(-0); // -> true (negative zero is a valid number)\n```"}]}]},"parameters":[{"id":722,"name":"val","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"要检查的值。Value to check"}]},"type":{"type":"intrinsic","name":"unknown"},"text":{"comment":"<p>要检查的值。Value to check</p>\n"}}],"type":{"type":"predicate","name":"val","asserts":false,"targetType":{"type":"intrinsic","name":"number"}},"is":{"declaration":false},"location":{"query":"Type.Function.isNumber","hash":"isNumber"},"text":{"comment":"<h5>Function:</h5><p>isNumber</p>\n<h5>Description:</h5><p>检查值是否为有限数字（排除NaN和Infinity）。Checks if a value is a finite number (excludes NaN and Infinity)</p>\n<h5>Returns:</h5><p>如果值为有限数字则返回true，否则返回false。True if the value is a finite number, false otherwise</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Valid numbers</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">1</span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">42</span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">3.14</span>); <span class=\"pl-c\">// -> true</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">Number</span>(<span class=\"pl-c1\">1</span>)); <span class=\"pl-c\">// -> true</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Invalid numbers</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">NaN</span>); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">Infinity</span>); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">Infinity</span>); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Number</span>(<span class=\"pl-c1\">1</span>)); <span class=\"pl-c\">// -> false (Number object)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Non-numbers</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> false (string)</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">undefined</span>); <span class=\"pl-c\">// -> false</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">true</span>); <span class=\"pl-c\">// -> false</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">0</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> false (NaN)</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-c1\">1</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> false (Infinity)</span>\n<span class=\"pl-en\">isNumber</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> true (negative zero is a valid number)</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":180,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L180"}],"parentId":720}],"is":{"declaration":true},"location":{"query":"Type.Function.isNumber","hash":""},"text":{},"parentId":710}
