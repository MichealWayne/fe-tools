{"id":1437,"name":"runSync","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-utils/src/process/run.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/process/run.ts","line":277,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/process/run.ts#L277"}],"signatures":[{"id":1438,"name":"runSync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"runSync"}]},{"tag":"@description","content":[{"kind":"text","text":"同步执行命令并立即返回结果。Synchronously executes a command and returns the result immediately with comprehensive error handling."}]},{"tag":"@returns","content":[{"kind":"text","text":"包含状态码、stdout、stderr和成功状态的执行结果。Execution result with code, stdout, stderr, and success status"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Quick synchronous command\nconst result = runSync('git', ['rev-parse', 'HEAD']);\nif (result.success) {\n  console.log('Current commit:', result.stdout.trim());\n} else {\n  console.error('Failed to get commit hash:', result.stderr);\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Check tool availability\nconst dockerCheck = runSync('docker', ['--version']);\nif (dockerCheck.success) {\n  console.log('Docker is available');\n} else {\n  console.log('Docker not found, skipping containerization');\n}\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"// Environment setup validation\nconst nodeVersion = runSync('node', ['--version']);\nconst npmVersion = runSync('npm', ['--version']);\n\nconsole.log("},{"kind":"code","text":"`Node: ${nodeVersion.stdout.trim()}`"},{"kind":"text","text":");\nconsole.log("},{"kind":"code","text":"`NPM: ${npmVersion.stdout.trim()}`"},{"kind":"text","text":");"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"runAsync","target":1423},{"kind":"text","text":" - Asynchronous command execution"}]}]},"parameters":[{"id":1439,"name":"cmd","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要执行的命令或文件URL。Command to execute or file URL"}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"URL","qualifiedName":"URL","package":"@types/node"}]},"text":{"comment":"<p>要执行的命令或文件URL。Command to execute or file URL</p>\n"}},{"id":1440,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"命令参数数组。Array of command arguments"}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]","text":{"comment":"<p>命令参数数组。Array of command arguments</p>\n"}},{"id":1441,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"同步执行选项。Synchronous execution options"}]},"type":{"type":"reference","name":"SpawnSyncOptions","qualifiedName":"SpawnSyncOptions","package":"@types/node"},"defaultValue":"{}","text":{"comment":"<p>同步执行选项。Synchronous execution options</p>\n"}}],"type":{"type":"reference","id":1462,"name":"RunResult"},"is":{"declaration":false},"location":{"query":"NodeUtils.Function.runSync","hash":"runSync"},"text":{"comment":"<h5>Function:</h5><p>runSync</p>\n<h5>Description:</h5><p>同步执行命令并立即返回结果。Synchronously executes a command and returns the result immediately with comprehensive error handling.</p>\n<h5>Returns:</h5><p>包含状态码、stdout、stderr和成功状态的执行结果。Execution result with code, stdout, stderr, and success status</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Quick synchronous command</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">runSync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>git<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>rev-parse<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>HEAD<span class=\"pl-pds\">'</span></span>]);\n<span class=\"pl-k\">if</span> (<span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">success</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Current commit:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">stdout</span>.<span class=\"pl-en\">trim</span>());\n} <span class=\"pl-k\">else</span> {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Failed to get commit hash:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">stderr</span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Check tool availability</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">dockerCheck</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">runSync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>docker<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>--version<span class=\"pl-pds\">'</span></span>]);\n<span class=\"pl-k\">if</span> (<span class=\"pl-smi\">dockerCheck</span>.<span class=\"pl-smi\">success</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Docker is available<span class=\"pl-pds\">'</span></span>);\n} <span class=\"pl-k\">else</span> {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Docker not found, skipping containerization<span class=\"pl-pds\">'</span></span>);\n}\n</code></pre>\n<h5>Example:</h5><p>// Environment setup validation\nconst nodeVersion = runSync(&#39;node&#39;, [&#39;--version&#39;]);\nconst npmVersion = runSync(&#39;npm&#39;, [&#39;--version&#39;]);</p>\n<p>console.log(<code>Node: ${nodeVersion.stdout.trim()}</code>);\nconsole.log(<code>NPM: ${npmVersion.stdout.trim()}</code>);</p>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><p><a href=\"1423\">runAsync</a> - Asynchronous command execution</p>\n"},"sources":[{"fileName":"packages/node-utils/src/process/run.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/process/run.ts","line":277,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/process/run.ts#L277"}],"parentId":1437}],"is":{"declaration":true},"location":{"query":"NodeUtils.Function.runSync","hash":""},"text":{},"parentId":743}
