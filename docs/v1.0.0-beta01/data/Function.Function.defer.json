{"id":401,"name":"defer","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":117,"character":22,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L117"}],"signatures":[{"id":402,"name":"defer","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"defer"}]},{"tag":"@description","content":[{"kind":"text","text":"将函数的执行延迟到事件循环的下一个时钟周期。Defers execution of a function to the next tick of the event loop"}]},{"tag":"@returns","content":[{"kind":"text","text":"当函数执行完成时解析的 Promise。Promise that resolves when the function has been executed"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic deferral\nfunction printHello() {\n  console.log('Hello, world!');\n}\n\ndefer(printHello);\nconsole.log('This is printed first.');\n// Output:\n// This is printed first.\n// Hello, world!\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// With arguments\ndefer(console.log, 'Deferred message', 123);\nconsole.log('Immediate message');\n// Output:\n// Immediate message\n// Deferred message 123\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Awaiting deferred execution\nasync function example() {\n  console.log('Before defer');\n  await defer(() => console.log('Deferred'));\n  console.log('After defer');\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Breaking up long-running tasks\nasync function processLargeArray(items) {\n  for (let i = 0; i < items.length; i++) {\n    processItem(items[i]);\n    if (i % 100 === 0) {\n      await defer(() => {}); // Yield control periodically\n    }\n  }\n}\n```"}]}]},"parameters":[{"id":403,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要延迟执行的函数。Function to defer"}]},"type":{"type":"reflection","declaration":{"id":404,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":117,"character":32,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L117"}],"signatures":[{"id":405,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":406,"name":"arg","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"unknown"}}]}},"text":{"comment":"<p>要延迟执行的函数。Function to defer</p>\n"}},{"id":407,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"传递给函数的参数。Arguments to pass to the function"}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"text":{"comment":"<p>传递给函数的参数。Arguments to pass to the function</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"Function.Function.defer","hash":"defer"},"text":{"comment":"<h5>Function:</h5><p>defer</p>\n<h5>Description:</h5><p>将函数的执行延迟到事件循环的下一个时钟周期。Defers execution of a function to the next tick of the event loop</p>\n<h5>Returns:</h5><p>当函数执行完成时解析的 Promise。Promise that resolves when the function has been executed</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic deferral</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printHello</span>() {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello, world!<span class=\"pl-pds\">'</span></span>);\n}\n\n<span class=\"pl-en\">defer</span>(<span class=\"pl-smi\">printHello</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>This is printed first.<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c\">// Output:</span>\n<span class=\"pl-c\">// This is printed first.</span>\n<span class=\"pl-c\">// Hello, world!</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// With arguments</span>\n<span class=\"pl-en\">defer</span>(<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Deferred message<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">123</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Immediate message<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c\">// Output:</span>\n<span class=\"pl-c\">// Immediate message</span>\n<span class=\"pl-c\">// Deferred message 123</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Awaiting deferred execution</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">example</span>() {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Before defer<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">defer</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Deferred<span class=\"pl-pds\">'</span></span>));\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>After defer<span class=\"pl-pds\">'</span></span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Breaking up long-running tasks</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">processLargeArray</span>(<span class=\"pl-v\">items</span>) {\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">let</span> <span class=\"pl-smi\">i</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-smi\">i</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-smi\">items</span>.<span class=\"pl-c1\">length</span>; <span class=\"pl-smi\">i</span><span class=\"pl-k\">++</span>) {\n    <span class=\"pl-en\">processItem</span>(<span class=\"pl-smi\">items</span>[<span class=\"pl-smi\">i</span>]);\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">i</span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">100</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>) {\n      <span class=\"pl-k\">await</span> <span class=\"pl-en\">defer</span>(() <span class=\"pl-k\">=></span> {}); <span class=\"pl-c\">// Yield control periodically</span>\n    }\n  }\n}\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":117,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L117"}],"parentId":401}],"is":{"declaration":true},"location":{"query":"Function.Function.defer","hash":""},"text":{},"parentId":391}
