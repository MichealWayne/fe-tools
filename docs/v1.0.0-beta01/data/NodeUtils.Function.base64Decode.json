{"id":1520,"name":"base64Decode","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-utils/src/common/base64.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/common/base64.ts","line":83,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/common/base64.ts#L83"}],"signatures":[{"id":1521,"name":"base64Decode","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"base64Decode"}]},{"tag":"@description","content":[{"kind":"text","text":"将Base64字符串解码回UTF-8格式。Decodes a Base64 string back to UTF-8 format using Node.js Buffer with proper error handling."}]},{"tag":"@returns","content":[{"kind":"text","text":"解码后的UTF-8字符串。Decoded UTF-8 string"}]},{"tag":"@throws","content":[{"kind":"text","text":"如果输入不是有效的Base64可能抛出错误。May throw if the input is not valid Base64"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic string decoding\nconst decoded = base64Decode('aGVsbG8gd29ybGQ=');\nconsole.log(decoded); // 'hello world'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Decode and parse JSON data\nconst encodedJson = 'eyJ1c2VyIjoiam9obiIsInRva2VuIjoiYWJjMTIzIn0=';\nconst decodedJson = base64Decode(encodedJson);\nconst data = JSON.parse(decodedJson);\nconsole.log(data); // { user: 'john', token: 'abc123' }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Safe decoding with error handling\ntry {\n  const result = base64Decode(userInput);\n  console.log('Decoded successfully:', result);\n} catch (error) {\n  console.error('Invalid Base64 input:', error.message);\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Decode authentication credentials\nconst authHeader = 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=';\nconst credentials = base64Decode(authHeader.replace('Basic ', ''));\nconsole.log(credentials); // 'username:password'\n```"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"base64Encode","target":1517},{"kind":"text","text":" - Encode strings to Base64"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"isBase64Str","target":1523},{"kind":"text","text":" - Validate Base64 strings"},{"kind":"text","text":"\n"}]}]},"parameters":[{"id":1522,"name":"base64Str","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要解码的Base64字符串。The Base64 encoded string to decode"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>要解码的Base64字符串。The Base64 encoded string to decode</p>\n"}}],"type":{"type":"intrinsic","name":"string"},"is":{"declaration":false},"location":{"query":"NodeUtils.Function.base64Decode","hash":"base64Decode"},"text":{"comment":"<h5>Function:</h5><p>base64Decode</p>\n<h5>Description:</h5><p>将Base64字符串解码回UTF-8格式。Decodes a Base64 string back to UTF-8 format using Node.js Buffer with proper error handling.</p>\n<h5>Returns:</h5><p>解码后的UTF-8字符串。Decoded UTF-8 string</p>\n<h5>Throws:</h5><p>如果输入不是有效的Base64可能抛出错误。May throw if the input is not valid Base64</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic string decoding</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">decoded</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">base64Decode</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>aGVsbG8gd29ybGQ=<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">decoded</span>); <span class=\"pl-c\">// 'hello world'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Decode and parse JSON data</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">encodedJson</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>eyJ1c2VyIjoiam9obiIsInRva2VuIjoiYWJjMTIzIn0=<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">decodedJson</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">base64Decode</span>(<span class=\"pl-smi\">encodedJson</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">data</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">parse</span>(<span class=\"pl-smi\">decodedJson</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">data</span>); <span class=\"pl-c\">// { user: 'john', token: 'abc123' }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Safe decoding with error handling</span>\n<span class=\"pl-k\">try</span> {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">base64Decode</span>(<span class=\"pl-smi\">userInput</span>);\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Decoded successfully:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">result</span>);\n} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Invalid Base64 input:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>.<span class=\"pl-smi\">message</span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Decode authentication credentials</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">authHeader</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Basic dXNlcm5hbWU6cGFzc3dvcmQ=<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">credentials</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">base64Decode</span>(<span class=\"pl-smi\">authHeader</span>.<span class=\"pl-c1\">replace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Basic <span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>));\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">credentials</span>); <span class=\"pl-c\">// 'username:password'</span>\n</code></pre>\n<h5>See:</h5><ul>\n<li><a href=\"1517\">base64Encode</a> - Encode strings to Base64</li>\n<li><a href=\"1523\">isBase64Str</a> - Validate Base64 strings</li>\n</ul>\n"},"sources":[{"fileName":"packages/node-utils/src/common/base64.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/common/base64.ts","line":83,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/common/base64.ts#L83"}],"parentId":1520}],"is":{"declaration":true},"location":{"query":"NodeUtils.Function.base64Decode","hash":""},"text":{},"parentId":743}
