{"id":1468,"name":"parseArgs","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-utils/src/process/env.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/process/env.ts","line":60,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/process/env.ts#L60"}],"signatures":[{"id":1469,"name":"parseArgs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"parseArgs"}]},{"tag":"@description","content":[{"kind":"text","text":"使用minimist解析命令行参数，排除node和脚本路径。Parses command line arguments using minimist, excluding node and script paths for clean argument processing."}]},{"tag":"@returns","content":[{"kind":"text","text":"解析后的命令行参数对象。Parsed command line arguments object with type-safe access"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Command: node script.js --port 3000 --debug --files a.txt b.txt\nconst args = parseArgs();\nconsole.log(args.port);    // 3000 (number)\nconsole.log(args.debug);   // true (boolean)\nconsole.log(args.files);   // ['a.txt', 'b.txt'] (string[])\nconsole.log(args._);       // Array of non-option arguments\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Environment-aware configuration\nconst args = parseArgs();\nconst config = {\n  port: args.port || process.env.PORT || 3000,\n  debug: args.debug || process.env.NODE_ENV === 'development',\n  logLevel: args['log-level'] || 'info'\n};\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// CLI validation and defaults\nconst args = parseArgs();\nif (!args.config) {\n  console.error('--config argument is required');\n  process.exit(1);\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Build tool configuration\nconst args = parseArgs();\nconst buildConfig = {\n  watch: args.watch || args.w,           // --watch or -w\n  minify: args.minify !== false,         // --no-minify to disable\n  sourcemap: args.sourcemap || args.s,   // --sourcemap or -s\n  outDir: args['out-dir'] || './dist'    // --out-dir\n};\n```"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"CommandLineArgs","target":1470},{"kind":"text","text":" - Type definition for parsed arguments"}]}]},"type":{"type":"reference","id":1470,"name":"CommandLineArgs"},"is":{"declaration":false},"location":{"query":"NodeUtils.Function.parseArgs","hash":"parseArgs"},"text":{"comment":"<h5>Function:</h5><p>parseArgs</p>\n<h5>Description:</h5><p>使用minimist解析命令行参数，排除node和脚本路径。Parses command line arguments using minimist, excluding node and script paths for clean argument processing.</p>\n<h5>Returns:</h5><p>解析后的命令行参数对象。Parsed command line arguments object with type-safe access</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Command: node script.js --port 3000 --debug --files a.txt b.txt</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">args</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">parseArgs</span>();\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">args</span>.<span class=\"pl-c1\">port</span>);    <span class=\"pl-c\">// 3000 (number)</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">debug</span>);   <span class=\"pl-c\">// true (boolean)</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">files</span>);   <span class=\"pl-c\">// ['a.txt', 'b.txt'] (string[])</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">_</span>);       <span class=\"pl-c\">// Array of non-option arguments</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Environment-aware configuration</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">args</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">parseArgs</span>();\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">config</span> <span class=\"pl-k\">=</span> {\n  port: <span class=\"pl-smi\">args</span>.<span class=\"pl-c1\">port</span> <span class=\"pl-k\">||</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-c1\">env</span>.<span class=\"pl-c1\">PORT</span> <span class=\"pl-k\">||</span> <span class=\"pl-c1\">3000</span>,\n  debug: <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">debug</span> <span class=\"pl-k\">||</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-c1\">env</span>.<span class=\"pl-c1\">NODE_ENV</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>development<span class=\"pl-pds\">'</span></span>,\n  logLevel: <span class=\"pl-smi\">args</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>log-level<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">||</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>info<span class=\"pl-pds\">'</span></span>\n};\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// CLI validation and defaults</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">args</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">parseArgs</span>();\n<span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">config</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>--config argument is required<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-c1\">process</span>.<span class=\"pl-c1\">exit</span>(<span class=\"pl-c1\">1</span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Build tool configuration</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">args</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">parseArgs</span>();\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">buildConfig</span> <span class=\"pl-k\">=</span> {\n  watch: <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">watch</span> <span class=\"pl-k\">||</span> <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">w</span>,           <span class=\"pl-c\">// --watch or -w</span>\n  minify: <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">minify</span> <span class=\"pl-k\">!==</span> <span class=\"pl-c1\">false</span>,         <span class=\"pl-c\">// --no-minify to disable</span>\n  sourcemap: <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">sourcemap</span> <span class=\"pl-k\">||</span> <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">s</span>,   <span class=\"pl-c\">// --sourcemap or -s</span>\n  outDir: <span class=\"pl-smi\">args</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>out-dir<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">||</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./dist<span class=\"pl-pds\">'</span></span>    <span class=\"pl-c\">// --out-dir</span>\n};\n</code></pre>\n<h5>See:</h5><p><a href=\"1470\">CommandLineArgs</a> - Type definition for parsed arguments</p>\n"},"sources":[{"fileName":"packages/node-utils/src/process/env.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/process/env.ts","line":60,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/process/env.ts#L60"}],"parentId":1468}],"is":{"declaration":true},"location":{"query":"NodeUtils.Function.parseArgs","hash":""},"text":{},"parentId":743}
