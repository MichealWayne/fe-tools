{"id":604,"name":"forOwn","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":53,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L53"}],"signatures":[{"id":605,"name":"forOwn","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"forOwn"}]},{"tag":"@description","content":[{"kind":"text","text":"遍历对象的所有可枚举自有属性，为每个属性执行回调函数。Iterates over all enumerable own properties of an object, executing a callback for each property"}]},{"tag":"@returns","content":[{"kind":"text","text":"无返回值（函数用于副作用）。void (function is used for side effects)"}]},{"tag":"@throws","content":[{"kind":"text","text":"当obj不是对象或fn不是函数时。When obj is not an object or fn is not a function"}]},{"tag":"@example","content":[{"kind":"text","text":"// Basic iteration\nconst obj = { a: 1, b: 2, c: 3 };\nforOwn(obj, (val, key) => console.log("},{"kind":"code","text":"`${key}: ${val}`"},{"kind":"text","text":"));\n// Output: \"a: 1\", \"b: 2\", \"c: 3\""}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Collecting values\nconst values = [];\nforOwn({ x: 10, y: 20, z: 30 }, (val) => values.push(val));\nconsole.log(values); // -> [10, 20, 30]\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Conditional processing\nconst result = {};\nforOwn({ a: 1, b: 2, c: 3, d: 4 }, (val, key) => {\n  if (val % 2 === 0) result[key] = val * 2;\n});\nconsole.log(result); // -> { b: 4, d: 8 }\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"// Using all parameters\nforOwn({ name: 'John', age: 30 }, (val, key, obj) => {\n  console.log("},{"kind":"code","text":"`Property ${key} has value ${val} in object with ${Object.keys(obj).length} properties`"},{"kind":"text","text":");\n});"}]},{"tag":"@example","content":[{"kind":"text","text":"// Edge cases\nforOwn({}, (val) => console.log(val)); // No output (empty object)\nforOwn({ a: undefined, b: null }, (val, key) => console.log("},{"kind":"code","text":"`${key}: ${val}`"},{"kind":"text","text":")); // -> \"a: undefined\", \"b: null\""}]}]},"parameters":[{"id":606,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要遍历的对象。Object to iterate over"}]},"type":{"type":"reference","id":639,"name":"PlainObject"},"text":{"comment":"<p>要遍历的对象。Object to iterate over</p>\n"}},{"id":607,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"为每个属性执行的回调函数（接收值、键和对象）。Callback function executed for each property (receives value, key, and object)"}]},"type":{"type":"reflection","declaration":{"id":608,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/object.ts","line":55,"character":6,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L55"}],"signatures":[{"id":609,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":610,"name":"val","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}},{"id":611,"name":"key","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"id":612,"name":"obj","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":639,"name":"PlainObject"}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{"comment":"<p>为每个属性执行的回调函数（接收值、键和对象）。Callback function executed for each property (receives value, key, and object)</p>\n"}}],"type":{"type":"intrinsic","name":"void"},"is":{"declaration":false},"location":{"query":"Object.Function.forOwn","hash":"forOwn"},"text":{"comment":"<h5>Function:</h5><p>forOwn</p>\n<h5>Description:</h5><p>遍历对象的所有可枚举自有属性，为每个属性执行回调函数。Iterates over all enumerable own properties of an object, executing a callback for each property</p>\n<h5>Returns:</h5><p>无返回值（函数用于副作用）。void (function is used for side effects)</p>\n<h5>Throws:</h5><p>当obj不是对象或fn不是函数时。When obj is not an object or fn is not a function</p>\n<h5>Example:</h5><p>// Basic iteration\nconst obj = { a: 1, b: 2, c: 3 };\nforOwn(obj, (val, key) =&gt; console.log(<code>${key}: ${val}</code>));\n// Output: &quot;a: 1&quot;, &quot;b: 2&quot;, &quot;c: 3&quot;</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Collecting values</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">values</span> <span class=\"pl-k\">=</span> [];\n<span class=\"pl-en\">forOwn</span>({ x: <span class=\"pl-c1\">10</span>, y: <span class=\"pl-c1\">20</span>, z: <span class=\"pl-c1\">30</span> }, (<span class=\"pl-v\">val</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">values</span>.<span class=\"pl-c1\">push</span>(<span class=\"pl-smi\">val</span>));\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">values</span>); <span class=\"pl-c\">// -> [10, 20, 30]</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Conditional processing</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> {};\n<span class=\"pl-en\">forOwn</span>({ a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-c1\">2</span>, c: <span class=\"pl-c1\">3</span>, d: <span class=\"pl-c1\">4</span> }, (<span class=\"pl-v\">val</span>, <span class=\"pl-v\">key</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">val</span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>) <span class=\"pl-smi\">result</span>[<span class=\"pl-smi\">key</span>] <span class=\"pl-k\">=</span> <span class=\"pl-smi\">val</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>;\n});\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">result</span>); <span class=\"pl-c\">// -> { b: 4, d: 8 }</span>\n</code></pre>\n<h5>Example:</h5><p>// Using all parameters\nforOwn({ name: &#39;John&#39;, age: 30 }, (val, key, obj) =&gt; {\n  console.log(<code>Property ${key} has value ${val} in object with ${Object.keys(obj).length} properties</code>);\n});</p>\n<h5>Example:</h5><p>// Edge cases\nforOwn({}, (val) =&gt; console.log(val)); // No output (empty object)\nforOwn({ a: undefined, b: null }, (val, key) =&gt; console.log(<code>${key}: ${val}</code>)); // -&gt; &quot;a: undefined&quot;, &quot;b: null&quot;</p>\n"},"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":53,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L53"}],"parentId":604}],"is":{"declaration":true},"location":{"query":"Object.Function.forOwn","hash":""},"text":{},"parentId":603}
