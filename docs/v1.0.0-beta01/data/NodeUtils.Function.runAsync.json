{"id":1423,"name":"runAsync","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/node-utils/src/process/run.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/process/run.ts","line":75,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/process/run.ts#L75"}],"signatures":[{"id":1424,"name":"runAsync","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"runAsync"}]},{"tag":"@description","content":[{"kind":"text","text":"异步执行命令，带有综合错误处理和输出捕获。Asynchronously executes a command with comprehensive error handling, timeout support, and flexible output capture options."}]},{"tag":"@returns","content":[{"kind":"text","text":"解析为执行结果的Promise，包含状态码、stdout、stderr和成功状态。Promise resolving to execution result with code, stdout, stderr, and success status"}]},{"tag":"@throws","content":[{"kind":"text","text":"如果命令失败且ignoreFailure为false，或者发生超时则拒绝。Rejects if command fails and ignoreFailure is false, or if timeout occurs"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic command execution\ntry {\n  const result = await runAsync('ls', ['-la']);\n  console.log('Directory listing:', result.stdout);\n} catch (error) {\n  console.error('Command failed:', error.message);\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Command with timeout and output capture\nconst result = await runAsync('npm', ['install'], {\n  timeout: 30000,        // 30 second timeout\n  captureStdout: true,   // Capture output\n  ignoreFailure: false,  // Throw on failure\n  cwd: './project'       // Working directory\n});\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"// Capture output as lines\nconst result = await runAsync('git', ['log', '--oneline'], {\n  captureStdout: 'lines'\n});\nconsole.log("},{"kind":"code","text":"`Found ${result.stdout.length} commits`"},{"kind":"text","text":");"}]},{"tag":"@since","content":[{"kind":"text","text":"1.0.0"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"runSync","target":1437},{"kind":"text","text":" - Synchronous command execution"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"inline-tag","tag":"@link","text":"forceRunAsync","target":1428},{"kind":"text","text":" - Async execution with error suppression"},{"kind":"text","text":"\n"}]}]},"parameters":[{"id":1425,"name":"cmd","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要执行的命令或文件URL。Command to execute or file URL"}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"URL","qualifiedName":"URL","package":"@types/node"}]},"text":{"comment":"<p>要执行的命令或文件URL。Command to execute or file URL</p>\n"}},{"id":1426,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"命令参数数组。Array of command arguments"}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]","text":{"comment":"<p>命令参数数组。Array of command arguments</p>\n"}},{"id":1427,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"执行选项，包括超时、输出捕获和失败处理。Execution options including timeout, output capture, and failure handling"}]},"type":{"type":"reference","id":1445,"name":"RunOptions"},"defaultValue":"{}","text":{"comment":"<p>执行选项，包括超时、输出捕获和失败处理。Execution options including timeout, output capture, and failure handling</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1462,"name":"RunResult"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"NodeUtils.Function.runAsync","hash":"runAsync"},"text":{"comment":"<h5>Function:</h5><p>runAsync</p>\n<h5>Description:</h5><p>异步执行命令，带有综合错误处理和输出捕获。Asynchronously executes a command with comprehensive error handling, timeout support, and flexible output capture options.</p>\n<h5>Returns:</h5><p>解析为执行结果的Promise，包含状态码、stdout、stderr和成功状态。Promise resolving to execution result with code, stdout, stderr, and success status</p>\n<h5>Throws:</h5><p>如果命令失败且ignoreFailure为false，或者发生超时则拒绝。Rejects if command fails and ignoreFailure is false, or if timeout occurs</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic command execution</span>\n<span class=\"pl-k\">try</span> {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">runAsync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ls<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-la<span class=\"pl-pds\">'</span></span>]);\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Directory listing:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">stdout</span>);\n} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Command failed:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>.<span class=\"pl-smi\">message</span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Command with timeout and output capture</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">runAsync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>npm<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>install<span class=\"pl-pds\">'</span></span>], {\n  timeout: <span class=\"pl-c1\">30000</span>,        <span class=\"pl-c\">// 30 second timeout</span>\n  captureStdout: <span class=\"pl-c1\">true</span>,   <span class=\"pl-c\">// Capture output</span>\n  ignoreFailure: <span class=\"pl-c1\">false</span>,  <span class=\"pl-c\">// Throw on failure</span>\n  cwd: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./project<span class=\"pl-pds\">'</span></span>       <span class=\"pl-c\">// Working directory</span>\n});\n</code></pre>\n<h5>Example:</h5><p>// Capture output as lines\nconst result = await runAsync(&#39;git&#39;, [&#39;log&#39;, &#39;--oneline&#39;], {\n  captureStdout: &#39;lines&#39;\n});\nconsole.log(<code>Found ${result.stdout.length} commits</code>);</p>\n<h5>Since:</h5><p>1.0.0</p>\n<h5>See:</h5><ul>\n<li><a href=\"1437\">runSync</a> - Synchronous command execution</li>\n<li><a href=\"1428\">forceRunAsync</a> - Async execution with error suppression</li>\n</ul>\n"},"sources":[{"fileName":"packages/node-utils/src/process/run.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/node-utils/src/process/run.ts","line":75,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/node-utils/src/process/run.ts#L75"}],"parentId":1423}],"is":{"declaration":true},"location":{"query":"NodeUtils.Function.runAsync","hash":""},"text":{},"parentId":743}
