{"id":711,"name":"type","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":40,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L40"}],"signatures":[{"id":712,"name":"type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"type"}]},{"tag":"@description","content":[{"kind":"text","text":"使用Object.prototype.toString获取值的精确类型。Gets the precise type of a value as a string using Object.prototype.toString"}]},{"tag":"@returns","content":[{"kind":"text","text":"值类型的字符串表示（例如，'Array'，'Object'，'String'，'Number'）。String representation of the value's type (e.g., 'Array', 'Object', 'String', 'Number')"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic types\ntype([1, 2, 3]); // -> 'Array'\ntype({ a: 1, b: '2' }); // -> 'Object'\ntype('abc'); // -> 'String'\ntype(123); // -> 'Number'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Special values\ntype(null); // -> 'Null'\ntype(undefined); // -> 'Undefined'\ntype(NaN); // -> 'Number'\ntype(Infinity); // -> 'Number'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Functions and dates\ntype(() => {}); // -> 'Function'\ntype(new Date()); // -> 'Date'\ntype(/regex/); // -> 'RegExp'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Built-in objects\ntype(new Map()); // -> 'Map'\ntype(new Set()); // -> 'Set'\ntype(new WeakMap()); // -> 'WeakMap'\ntype(Promise.resolve()); // -> 'Promise'\n```"}]}]},"parameters":[{"id":713,"name":"val","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"要获取类型的值。Value to get the type of"}]},"type":{"type":"intrinsic","name":"unknown"},"text":{"comment":"<p>要获取类型的值。Value to get the type of</p>\n"}}],"type":{"type":"intrinsic","name":"string"},"is":{"declaration":false},"location":{"query":"Type.Function.type","hash":"type"},"text":{"comment":"<h5>Function:</h5><p>type</p>\n<h5>Description:</h5><p>使用Object.prototype.toString获取值的精确类型。Gets the precise type of a value as a string using Object.prototype.toString</p>\n<h5>Returns:</h5><p>值类型的字符串表示（例如，&#39;Array&#39;，&#39;Object&#39;，&#39;String&#39;，&#39;Number&#39;）。String representation of the value&#39;s type (e.g., &#39;Array&#39;, &#39;Object&#39;, &#39;String&#39;, &#39;Number&#39;)</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic types</span>\n<span class=\"pl-en\">type</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]); <span class=\"pl-c\">// -> 'Array'</span>\n<span class=\"pl-en\">type</span>({ a: <span class=\"pl-c1\">1</span>, b: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>2<span class=\"pl-pds\">'</span></span> }); <span class=\"pl-c\">// -> 'Object'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abc<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'String'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-c1\">123</span>); <span class=\"pl-c\">// -> 'Number'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Special values</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// -> 'Null'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-c1\">undefined</span>); <span class=\"pl-c\">// -> 'Undefined'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-c1\">NaN</span>); <span class=\"pl-c\">// -> 'Number'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-c1\">Infinity</span>); <span class=\"pl-c\">// -> 'Number'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Functions and dates</span>\n<span class=\"pl-en\">type</span>(() <span class=\"pl-k\">=></span> {}); <span class=\"pl-c\">// -> 'Function'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Date</span>()); <span class=\"pl-c\">// -> 'Date'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-s\"><span class=\"pl-sr\"><span class=\"pl-pds\">/</span>regex<span class=\"pl-pds\">/</span></span></span>); <span class=\"pl-c\">// -> 'RegExp'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Built-in objects</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Map</span>()); <span class=\"pl-c\">// -> 'Map'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Set</span>()); <span class=\"pl-c\">// -> 'Set'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">WeakMap</span>()); <span class=\"pl-c\">// -> 'WeakMap'</span>\n<span class=\"pl-en\">type</span>(<span class=\"pl-c1\">Promise</span>.<span class=\"pl-c1\">resolve</span>()); <span class=\"pl-c\">// -> 'Promise'</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/type.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/type.ts","line":40,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/type.ts#L40"}],"parentId":711}],"is":{"declaration":true},"location":{"query":"Type.Function.type","hash":""},"text":{},"parentId":710}
