{"id":421,"name":"memoize","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":245,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L245"}],"signatures":[{"id":422,"name":"memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"memoize"}]},{"tag":"@description","content":[{"kind":"text","text":"创建函数的记忆化版本，基于第一个参数缓存结果。Creates a memoized version of a function that caches results based on the first argument"}]},{"tag":"@returns","content":[{"kind":"text","text":"带有缓存属性的记忆化函数。Memoized function with a cache property"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Expensive calculation\nfunction expensiveCalculation(n: number) {\n  console.log('Calculating...');\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result += Math.sqrt(i);\n  }\n  return result;\n}\n\nconst cachedCalculation = memoize(expensiveCalculation);\nconsole.log(cachedCalculation(1000)); // Output: \"Calculating...\" then result\nconsole.log(cachedCalculation(1000)); // Output: result (no \"Calculating...\")\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Fibonacci with memoization\nconst fibonacci = memoize((n) => {\n  if (n < 2) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n});\n\nconsole.log(fibonacci(40)); // Much faster than non-memoized version\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Accessing the cache\nconst memoizedFn = memoize((x) => x * 2);\nmemoizedFn(5); // -> 10\nconsole.log(memoizedFn.cache); // -> Map { 5 => 10 }\nmemoizedFn.cache.clear(); // Clear the cache\n```"}]}]},"parameters":[{"id":423,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要记忆化的函数。Function to memoize"}]},"type":{"type":"reflection","declaration":{"id":424,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":245,"character":28,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L245"}],"signatures":[{"id":425,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":426,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"unknown"}}]}},"text":{"comment":"<p>要记忆化的函数。Function to memoize</p>\n"}}],"type":{"type":"reflection","declaration":{"id":427,"name":"memoize","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":428,"name":"cache","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":250,"character":9,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L250"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"Map","qualifiedName":"Map","package":"typescript"},"is":{"declaration":true},"location":{"query":"Function.Function.memoize","hash":"memoize.cache"},"text":{},"parentId":421}],"groups":[{"title":"Properties","children":[428]}],"sources":[{"fileName":"packages/utils/src/function.ts","line":247,"character":17,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L247"}],"signatures":[{"id":429,"name":"memoize","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":430,"name":"val","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"},"text":{}}],"type":{"type":"intrinsic","name":"any"},"is":{"declaration":false},"location":{"query":"Function.Function.memoize","hash":"memoize.__type"},"text":{},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":247,"character":17,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L247"}],"parentId":421}],"location":{"query":"Function.Function.memoize","hash":"memoize"}}},"is":{"declaration":false},"location":{"query":"Function.Function.memoize","hash":"memoize"},"text":{"comment":"<h5>Function:</h5><p>memoize</p>\n<h5>Description:</h5><p>创建函数的记忆化版本，基于第一个参数缓存结果。Creates a memoized version of a function that caches results based on the first argument</p>\n<h5>Returns:</h5><p>带有缓存属性的记忆化函数。Memoized function with a cache property</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Expensive calculation</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">expensiveCalculation</span>(<span class=\"pl-v\">n</span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">number</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Calculating...<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-k\">let</span> <span class=\"pl-smi\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">let</span> <span class=\"pl-smi\">i</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-smi\">i</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-smi\">n</span>; <span class=\"pl-smi\">i</span><span class=\"pl-k\">++</span>) {\n    <span class=\"pl-smi\">result</span> <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">sqrt</span>(<span class=\"pl-smi\">i</span>);\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">result</span>;\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">cachedCalculation</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">memoize</span>(<span class=\"pl-smi\">expensiveCalculation</span>);\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">cachedCalculation</span>(<span class=\"pl-c1\">1000</span>)); <span class=\"pl-c\">// Output: \"Calculating...\" then result</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">cachedCalculation</span>(<span class=\"pl-c1\">1000</span>)); <span class=\"pl-c\">// Output: result (no \"Calculating...\")</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Fibonacci with memoization</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">fibonacci</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">memoize</span>((<span class=\"pl-v\">n</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">n</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-c1\">2</span>) <span class=\"pl-k\">return</span> <span class=\"pl-smi\">n</span>;\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">fibonacci</span>(<span class=\"pl-smi\">n</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> <span class=\"pl-en\">fibonacci</span>(<span class=\"pl-smi\">n</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">2</span>);\n});\n\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">fibonacci</span>(<span class=\"pl-c1\">40</span>)); <span class=\"pl-c\">// Much faster than non-memoized version</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Accessing the cache</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">memoizedFn</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">memoize</span>((<span class=\"pl-v\">x</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>);\n<span class=\"pl-en\">memoizedFn</span>(<span class=\"pl-c1\">5</span>); <span class=\"pl-c\">// -> 10</span>\n<span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">memoizedFn</span>.<span class=\"pl-smi\">cache</span>); <span class=\"pl-c\">// -> Map { 5 => 10 }</span>\n<span class=\"pl-smi\">memoizedFn</span>.<span class=\"pl-smi\">cache</span>.<span class=\"pl-c1\">clear</span>(); <span class=\"pl-c\">// Clear the cache</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":245,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L245"}],"parentId":421}],"is":{"declaration":true},"location":{"query":"Function.Function.memoize","hash":""},"text":{},"parentId":391}
