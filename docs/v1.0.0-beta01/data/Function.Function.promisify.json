{"id":473,"name":"promisify","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":580,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L580"}],"signatures":[{"id":474,"name":"promisify","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"promisify"}]},{"tag":"@description","content":[{"kind":"text","text":"将基于回调的函数转换为返回 Promise。Converts a callback-based function to return a Promise"}]},{"tag":"@returns","content":[{"kind":"text","text":"函数的 Promise 版本。Promise-based version of the function"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Node.js fs module\nimport fs from 'fs';\nconst readFileAsync = promisify(fs.readFile);\n\nasync function main() {\n  try {\n    const data = await readFileAsync('file.txt', 'utf8');\n    console.log(data);\n  } catch (error) {\n    console.error('Error reading file:', error);\n  }\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Custom callback function\nfunction fetchData(url, callback) {\n  setTimeout(() => {\n    if (url.includes('error')) {\n      callback(new Error('Failed to fetch'));\n    } else {\n      callback(null, { data: 'success' });\n    }\n  }, 1000);\n}\n\nconst fetchDataAsync = promisify(fetchData);\n\nfetchDataAsync('https://api.example.com/data')\n  .then(result => console.log(result))\n  .catch(error => console.error(error));\n```"}]}]},"typeParameter":[{"id":475,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":476,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":477,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"使用错误优先回调模式的函数。Function that uses error-first callback pattern"}]},"type":{"type":"reflection","declaration":{"id":478,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":581,"character":6,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L581"}],"signatures":[{"id":479,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":480,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"tuple","elements":[{"type":"named-tuple-member","name":"args","isOptional":false,"element":{"type":"reference","id":475,"name":"T"}},{"type":"named-tuple-member","name":"errHandler","isOptional":true,"element":{"type":"reflection","declaration":{"id":481,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":581,"character":39,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L581"}],"signatures":[{"id":482,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":483,"name":"err","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error","qualifiedName":"Error","package":"typescript"}]}},{"id":484,"name":"result","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":476,"name":"R"}}],"type":{"type":"intrinsic","name":"void"}}]}}}]}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{"comment":"<p>使用错误优先回调模式的函数。Function that uses error-first callback pattern</p>\n"}}],"type":{"type":"reflection","declaration":{"id":485,"name":"promisify","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":582,"character":3,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L582"}],"signatures":[{"id":486,"name":"promisify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":487,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":475,"name":"T"},"text":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":476,"name":"R"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"Function.Function.promisify","hash":"promisify.__type"},"text":{},"parentId":473}],"location":{"query":"Function.Function.promisify","hash":"promisify"}}},"is":{"declaration":false},"location":{"query":"Function.Function.promisify","hash":"promisify"},"text":{"comment":"<h5>Function:</h5><p>promisify</p>\n<h5>Description:</h5><p>将基于回调的函数转换为返回 Promise。Converts a callback-based function to return a Promise</p>\n<h5>Returns:</h5><p>函数的 Promise 版本。Promise-based version of the function</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Node.js fs module</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">fs</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>fs<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">readFileAsync</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">promisify</span>(<span class=\"pl-smi\">fs</span>.<span class=\"pl-smi\">readFile</span>);\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">main</span>() {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">data</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">readFileAsync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>file.txt<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>utf8<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">data</span>);\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Error reading file:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>);\n  }\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Custom callback function</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">fetchData</span>(<span class=\"pl-v\">url</span>, <span class=\"pl-v\">callback</span>) {\n  <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=></span> {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">url</span>.<span class=\"pl-en\">includes</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span>)) {\n      <span class=\"pl-en\">callback</span>(<span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Failed to fetch<span class=\"pl-pds\">'</span></span>));\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { data: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>success<span class=\"pl-pds\">'</span></span> });\n    }\n  }, <span class=\"pl-c1\">1000</span>);\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">fetchDataAsync</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">promisify</span>(<span class=\"pl-smi\">fetchData</span>);\n\n<span class=\"pl-en\">fetchDataAsync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.example.com/data<span class=\"pl-pds\">'</span></span>)\n  .<span class=\"pl-c1\">then</span>(<span class=\"pl-v\">result</span> <span class=\"pl-k\">=></span> <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">result</span>))\n  .<span class=\"pl-c1\">catch</span>(<span class=\"pl-v\">error</span> <span class=\"pl-k\">=></span> <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-smi\">error</span>));\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":580,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L580"}],"parentId":473}],"is":{"declaration":true},"location":{"query":"Function.Function.promisify","hash":""},"text":{},"parentId":391}
