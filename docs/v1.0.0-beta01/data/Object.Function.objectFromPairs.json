{"id":613,"name":"objectFromPairs","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":96,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L96"}],"signatures":[{"id":614,"name":"objectFromPairs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"objectFromPairs"}]},{"tag":"@description","content":[{"kind":"text","text":"将键值对数组转换为对象。Converts an array of key-value pairs into an object"}]},{"tag":"@returns","content":[{"kind":"text","text":"从键值对创建的对象。Object created from the key-value pairs"}]},{"tag":"@throws","content":[{"kind":"text","text":"当arr不是数组或包含无效对时。When arr is not an array or contains invalid pairs"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage\nobjectFromPairs([['a', 1], ['b', 2]]); // -> { a: 1, b: 2 }\nobjectFromPairs([['name', 'John'], ['age', 30]]); // -> { name: 'John', age: 30 }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Complex values\nobjectFromPairs([['a', 1], ['b', [2, 3]], ['c', { d: 4 }]]); // -> { a: 1, b: [2, 3], c: { d: 4 } }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Different value types\nobjectFromPairs([\n  ['string', 'hello'],\n  ['number', 42],\n  ['boolean', true],\n  ['null', null],\n  ['undefined', undefined]\n]); // -> { string: 'hello', number: 42, boolean: true, null: null, undefined: undefined }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Edge cases\nobjectFromPairs([]); // -> {}\nobjectFromPairs([['key', 'value']]); // -> { key: 'value' }\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Duplicate keys (later values overwrite earlier ones)\nobjectFromPairs([['a', 1], ['b', 2], ['a', 3]]); // -> { a: 3, b: 2 }\n```"}]},{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"Object.fromEntries"},{"kind":"text","text":" - Native equivalent in modern JavaScript"}]}]},"parameters":[{"id":615,"name":"arr","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要转换为对象的[key, value]对数组。Array of [key, value] pairs to convert to object"}]},"type":{"type":"array","elementType":{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}]}},"text":{"comment":"<p>要转换为对象的[key, value]对数组。Array of [key, value] pairs to convert to object</p>\n"}}],"type":{"type":"reference","id":639,"name":"PlainObject"},"is":{"declaration":false},"location":{"query":"Object.Function.objectFromPairs","hash":"objectFromPairs"},"text":{"comment":"<h5>Function:</h5><p>objectFromPairs</p>\n<h5>Description:</h5><p>将键值对数组转换为对象。Converts an array of key-value pairs into an object</p>\n<h5>Returns:</h5><p>从键值对创建的对象。Object created from the key-value pairs</p>\n<h5>Throws:</h5><p>当arr不是数组或包含无效对时。When arr is not an array or contains invalid pairs</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage</span>\n<span class=\"pl-en\">objectFromPairs</span>([[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">2</span>]]); <span class=\"pl-c\">// -> { a: 1, b: 2 }</span>\n<span class=\"pl-en\">objectFromPairs</span>([[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>John<span class=\"pl-pds\">'</span></span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>age<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">30</span>]]); <span class=\"pl-c\">// -> { name: 'John', age: 30 }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Complex values</span>\n<span class=\"pl-en\">objectFromPairs</span>([[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>c<span class=\"pl-pds\">'</span></span>, { d: <span class=\"pl-c1\">4</span> }]]); <span class=\"pl-c\">// -> { a: 1, b: [2, 3], c: { d: 4 } }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Different value types</span>\n<span class=\"pl-en\">objectFromPairs</span>([\n  [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>string<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello<span class=\"pl-pds\">'</span></span>],\n  [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>number<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">42</span>],\n  [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>boolean<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">true</span>],\n  [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>null<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">null</span>],\n  [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>undefined<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">undefined</span>]\n]); <span class=\"pl-c\">// -> { string: 'hello', number: 42, boolean: true, null: null, undefined: undefined }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Edge cases</span>\n<span class=\"pl-en\">objectFromPairs</span>([]); <span class=\"pl-c\">// -> {}</span>\n<span class=\"pl-en\">objectFromPairs</span>([[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>key<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>value<span class=\"pl-pds\">'</span></span>]]); <span class=\"pl-c\">// -> { key: 'value' }</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Duplicate keys (later values overwrite earlier ones)</span>\n<span class=\"pl-en\">objectFromPairs</span>([[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">2</span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">3</span>]]); <span class=\"pl-c\">// -> { a: 3, b: 2 }</span>\n</code></pre>\n<h5>See:</h5><p><a href=\"undefined\">Object.fromEntries</a> - Native equivalent in modern JavaScript</p>\n"},"sources":[{"fileName":"packages/utils/src/object.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/object.ts","line":96,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/object.ts#L96"}],"parentId":613}],"is":{"declaration":true},"location":{"query":"Object.Function.objectFromPairs","hash":""},"text":{},"parentId":603}
