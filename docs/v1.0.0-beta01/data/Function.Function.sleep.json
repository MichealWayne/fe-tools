{"id":488,"name":"sleep","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":633,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L633"}],"signatures":[{"id":489,"name":"sleep","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"sleep"}]},{"tag":"@description","content":[{"kind":"text","text":"创建在指定延迟后解析的Promise。Creates a Promise that resolves after a specified delay"}]},{"tag":"@returns","content":[{"kind":"text","text":"在延迟后解析的Promise。Promise that resolves after the delay"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic delay\nasync function main() {\n  console.log(\"Starting...\");\n  await sleep(2000); // Wait 2 seconds\n  console.log(\"Done waiting!\");\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Simulating API delays in tests\nasync function simulateApiCall() {\n  await sleep(100); // Simulate network delay\n  return { data: 'response' };\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Rate limiting\nasync function processItems(items) {\n  for (const item of items) {\n    await processItem(item);\n    await sleep(1000); // Wait 1 second between items\n  }\n}\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Retry with backoff\nasync function retryWithDelay(fn, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n    if (i === maxRetries - 1) throw error;\n      await sleep(1000 * Math.pow(2, i)); // Exponential backoff\n    }\n  }\n}\n```"}]}]},"parameters":[{"id":490,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"延迟的毫秒数。Number of milliseconds to delay"}]},"type":{"type":"intrinsic","name":"number"},"text":{"comment":"<p>延迟的毫秒数。Number of milliseconds to delay</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"Function.Function.sleep","hash":"sleep"},"text":{"comment":"<h5>Function:</h5><p>sleep</p>\n<h5>Description:</h5><p>创建在指定延迟后解析的Promise。Creates a Promise that resolves after a specified delay</p>\n<h5>Returns:</h5><p>在延迟后解析的Promise。Promise that resolves after the delay</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic delay</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">main</span>() {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Starting...<span class=\"pl-pds\">\"</span></span>);\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span>(<span class=\"pl-c1\">2000</span>); <span class=\"pl-c\">// Wait 2 seconds</span>\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Done waiting!<span class=\"pl-pds\">\"</span></span>);\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Simulating API delays in tests</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">simulateApiCall</span>() {\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span>(<span class=\"pl-c1\">100</span>); <span class=\"pl-c\">// Simulate network delay</span>\n  <span class=\"pl-k\">return</span> { data: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>response<span class=\"pl-pds\">'</span></span> };\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Rate limiting</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">processItems</span>(<span class=\"pl-v\">items</span>) {\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> <span class=\"pl-c1\">item</span> <span class=\"pl-k\">of</span> <span class=\"pl-smi\">items</span>) {\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">processItem</span>(<span class=\"pl-smi\">item</span>);\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span>(<span class=\"pl-c1\">1000</span>); <span class=\"pl-c\">// Wait 1 second between items</span>\n  }\n}\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Retry with backoff</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">retryWithDelay</span>(<span class=\"pl-v\">fn</span>, <span class=\"pl-v\">maxRetries</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>) {\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">let</span> <span class=\"pl-smi\">i</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; <span class=\"pl-smi\">i</span> <span class=\"pl-k\">&#x3C;</span> <span class=\"pl-smi\">maxRetries</span>; <span class=\"pl-smi\">i</span><span class=\"pl-k\">++</span>) {\n    <span class=\"pl-k\">try</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fn</span>();\n    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">i</span> <span class=\"pl-k\">===</span> <span class=\"pl-smi\">maxRetries</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">throw</span> <span class=\"pl-smi\">error</span>;\n      <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span>(<span class=\"pl-c1\">1000</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">pow</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-smi\">i</span>)); <span class=\"pl-c\">// Exponential backoff</span>\n    }\n  }\n}\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":633,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L633"}],"parentId":488}],"is":{"declaration":true},"location":{"query":"Function.Function.sleep","hash":""},"text":{},"parentId":391}
