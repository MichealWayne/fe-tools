{"id":249,"name":"negate","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/array.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/array.ts","line":635,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L635"}],"signatures":[{"id":250,"name":"negate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"negate"}]},{"tag":"@description","content":[{"kind":"text","text":"创建一个函数，该函数否定提供的谓词函数的结果。Creates a function that negates the result of the provided predicate function"}]},{"tag":"@returns","content":[{"kind":"text","text":"返回输入函数相反布尔结果的函数。Function that returns the opposite boolean result of the input function"}]},{"tag":"@throws","content":[{"kind":"text","text":"当fn不是函数时抛出错误。When fn is not a function"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic usage with array filtering\n[1, 2, 3, 4, 5].filter(negate(n => n % 2 === 0)); // -> [1, 3, 5] (odd numbers)\n[1, 2, 3, 4, 5].filter(negate(n => n % 2 === 1)); // -> [2, 4] (even numbers)\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// String filtering\n['apple', 'banana', 'cherry'].filter(negate(s => s.includes('a'))); // -> ['cherry']\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Object filtering\nconst users = [{ active: true }, { active: false }, { active: true }];\nusers.filter(negate(u => u.active)); // -> [{ active: false }]\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Custom predicate functions\nconst isPositive = n => n > 0;\nconst isNegative = negate(isPositive);\n[-1, 0, 1, 2].filter(isNegative); // -> [-1, 0]\n```"}]}]},"parameters":[{"id":251,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要否定的谓词函数。Predicate function to negate"}]},"type":{"type":"reflection","declaration":{"id":252,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/array.ts","line":635,"character":27,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L635"}],"signatures":[{"id":253,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":254,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"unknown"}}]}},"text":{"comment":"<p>要否定的谓词函数。Predicate function to negate</p>\n"}}],"type":{"type":"reflection","declaration":{"id":255,"name":"negate","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/array.ts","line":636,"character":9,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L636"}],"signatures":[{"id":256,"name":"negate","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":257,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"text":{}}],"type":{"type":"intrinsic","name":"boolean"},"is":{"declaration":false},"location":{"query":"Array.Function.negate","hash":"negate.__type"},"text":{},"sources":[{"fileName":"packages/utils/src/array.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/array.ts","line":636,"character":9,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L636"}],"parentId":249}],"location":{"query":"Array.Function.negate","hash":"negate"}}},"is":{"declaration":false},"location":{"query":"Array.Function.negate","hash":"negate"},"text":{"comment":"<h5>Function:</h5><p>negate</p>\n<h5>Description:</h5><p>创建一个函数，该函数否定提供的谓词函数的结果。Creates a function that negates the result of the provided predicate function</p>\n<h5>Returns:</h5><p>返回输入函数相反布尔结果的函数。Function that returns the opposite boolean result of the input function</p>\n<h5>Throws:</h5><p>当fn不是函数时抛出错误。When fn is not a function</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic usage with array filtering</span>\n[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>].<span class=\"pl-en\">filter</span>(<span class=\"pl-en\">negate</span>(<span class=\"pl-v\">n</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">n</span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>)); <span class=\"pl-c\">// -> [1, 3, 5] (odd numbers)</span>\n[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>].<span class=\"pl-en\">filter</span>(<span class=\"pl-en\">negate</span>(<span class=\"pl-v\">n</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">n</span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">1</span>)); <span class=\"pl-c\">// -> [2, 4] (even numbers)</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// String filtering</span>\n[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>apple<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>banana<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cherry<span class=\"pl-pds\">'</span></span>].<span class=\"pl-en\">filter</span>(<span class=\"pl-en\">negate</span>(<span class=\"pl-v\">s</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">s</span>.<span class=\"pl-en\">includes</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>))); <span class=\"pl-c\">// -> ['cherry']</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Object filtering</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">users</span> <span class=\"pl-k\">=</span> [{ active: <span class=\"pl-c1\">true</span> }, { active: <span class=\"pl-c1\">false</span> }, { active: <span class=\"pl-c1\">true</span> }];\n<span class=\"pl-smi\">users</span>.<span class=\"pl-en\">filter</span>(<span class=\"pl-en\">negate</span>(<span class=\"pl-v\">u</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">u</span>.<span class=\"pl-smi\">active</span>)); <span class=\"pl-c\">// -> [{ active: false }]</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Custom predicate functions</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">isPositive</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">n</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">n</span> <span class=\"pl-k\">></span> <span class=\"pl-c1\">0</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">isNegative</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">negate</span>(<span class=\"pl-smi\">isPositive</span>);\n[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>].<span class=\"pl-en\">filter</span>(<span class=\"pl-smi\">isNegative</span>); <span class=\"pl-c\">// -> [-1, 0]</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/array.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/array.ts","line":635,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/array.ts#L635"}],"parentId":249}],"is":{"declaration":true},"location":{"query":"Array.Function.negate","hash":""},"text":{},"parentId":154}
