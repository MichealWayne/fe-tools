{"id":456,"name":"pipe","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":426,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L426"}],"signatures":[{"id":457,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"pipe"}]},{"tag":"@description","content":[{"kind":"text","text":"从左到右管道函数（Unix 管道风格）。Pipes functions from left to right (Unix pipe style)"}]},{"tag":"@returns","content":[{"kind":"text","text":"从左到右应用函数的管道函数。Piped function that applies functions from left to right"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Basic piping\nconst add = (x, y) => x + y;\nconst multiply2 = x => x * 2;\nconst subtract1 = x => x - 1;\n\nconst piped = pipe(add, multiply2, subtract1);\npiped(5, 3); // -> add(5,3) -> multiply2(8) -> subtract1(16) -> 15\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Data processing pipeline\nconst parseJSON = str => JSON.parse(str);\nconst extractUsers = data => data.users;\nconst filterActive = users => users.filter(u => u.active);\nconst mapNames = users => users.map(u => u.name);\n\nconst processUserData = pipe(parseJSON, extractUsers, filterActive, mapNames);\nconst result = processUserData('{\"users\":[{\"name\":\"John\",\"active\":true},{\"name\":\"Jane\",\"active\":false}]}');\n// -> ['John']\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// String processing\nconst toLowerCase = str => str.toLowerCase();\nconst removeSpaces = str => str.replace(/\\s+/g, '');\nconst reverse = str => str.split('').reverse().join('');\n\nconst processString = pipe(toLowerCase, removeSpaces, reverse);\nprocessString('Hello World'); // -> 'dlrowolleh'\n```"}]}]},"typeParameter":[{"id":458,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"parameters":[{"id":459,"name":"fns","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"要管道的函数。Functions to pipe"}]},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":460,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":426,"character":56,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L426"}],"signatures":[{"id":461,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":462,"name":"arg","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"any"}}]}}},"text":{"comment":"<p>要管道的函数。Functions to pipe</p>\n"}}],"type":{"type":"reflection","declaration":{"id":463,"name":"pipe","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":426,"character":56,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L426"}],"signatures":[{"id":464,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":465,"name":"arg","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}},"text":{}}],"type":{"type":"intrinsic","name":"any"},"is":{"declaration":false},"location":{"query":"Function.Function.pipe","hash":"pipe.__type"},"text":{},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":426,"character":56,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L426"}],"parentId":456}],"location":{"query":"Function.Function.pipe","hash":"pipe"}}},"is":{"declaration":false},"location":{"query":"Function.Function.pipe","hash":"pipe"},"text":{"comment":"<h5>Function:</h5><p>pipe</p>\n<h5>Description:</h5><p>从左到右管道函数（Unix 管道风格）。Pipes functions from left to right (Unix pipe style)</p>\n<h5>Returns:</h5><p>从左到右应用函数的管道函数。Piped function that applies functions from left to right</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Basic piping</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">add</span> <span class=\"pl-k\">=</span> (<span class=\"pl-v\">x</span>, <span class=\"pl-v\">y</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">y</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">multiply2</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">subtract1</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">x</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">piped</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">pipe</span>(<span class=\"pl-smi\">add</span>, <span class=\"pl-smi\">multiply2</span>, <span class=\"pl-smi\">subtract1</span>);\n<span class=\"pl-en\">piped</span>(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">3</span>); <span class=\"pl-c\">// -> add(5,3) -> multiply2(8) -> subtract1(16) -> 15</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Data processing pipeline</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">parseJSON</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">str</span> <span class=\"pl-k\">=></span> <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">parse</span>(<span class=\"pl-smi\">str</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">extractUsers</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">data</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">data</span>.<span class=\"pl-smi\">users</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">filterActive</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">users</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">users</span>.<span class=\"pl-en\">filter</span>(<span class=\"pl-v\">u</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">u</span>.<span class=\"pl-smi\">active</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">mapNames</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">users</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">users</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-v\">u</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">u</span>.<span class=\"pl-c1\">name</span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">processUserData</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">pipe</span>(<span class=\"pl-smi\">parseJSON</span>, <span class=\"pl-smi\">extractUsers</span>, <span class=\"pl-smi\">filterActive</span>, <span class=\"pl-smi\">mapNames</span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">processUserData</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>{\"users\":[{\"name\":\"John\",\"active\":true},{\"name\":\"Jane\",\"active\":false}]}<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c\">// -> ['John']</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// String processing</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">toLowerCase</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">str</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">toLowerCase</span>();\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">removeSpaces</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">str</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">replace</span>(<span class=\"pl-s\"><span class=\"pl-sr\"><span class=\"pl-pds\">/</span><span class=\"pl-c1\">\\s</span><span class=\"pl-k\">+</span><span class=\"pl-pds\">/</span><span class=\"pl-k\">g</span></span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">reverse</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">str</span> <span class=\"pl-k\">=></span> <span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>).<span class=\"pl-c1\">reverse</span>().<span class=\"pl-c1\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">''</span></span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">processString</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">pipe</span>(<span class=\"pl-smi\">toLowerCase</span>, <span class=\"pl-smi\">removeSpaces</span>, <span class=\"pl-smi\">reverse</span>);\n<span class=\"pl-en\">processString</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello World<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'dlrowolleh'</span>\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":426,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L426"}],"parentId":456}],"is":{"declaration":true},"location":{"query":"Function.Function.pipe","hash":""},"text":{},"parentId":391}
