{"id":392,"name":"attempt","kind":64,"kindString":"Function","flags":{},"children":[],"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":64,"character":16,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L64"}],"signatures":[{"id":393,"name":"attempt","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[],"blockTags":[{"tag":"@function","content":[{"kind":"text","text":"attempt"}]},{"tag":"@description","content":[{"kind":"text","text":"安全地执行函数并返回结果或发生的任何错误。Safely executes a function and returns either the result or any error that occurred"}]},{"tag":"@returns","content":[{"kind":"text","text":"函数结果或错误对象。Either the function result or an Error object"}]},{"tag":"@throws","content":[{"kind":"text","text":"永不抛出 - 所有错误都被捕获并返回。Never throws - all errors are caught and returned"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Successful execution\nattempt((a, b) => a + b, 1, 2); // -> 3\nattempt(() => 'success'); // -> 'success'\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Error handling\nattempt(() => { throw new Error('Something went wrong'); }); // -> Error: Something went wrong\nattempt(JSON.parse, 'invalid json'); // -> SyntaxError: Unexpected token i in JSON\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Division by zero\nattempt((a, b) => {\n  if (b === 0) throw new Error('Division by zero');\n  return a / b;\n}, 10, 0); // -> Error: Division by zero\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// Type checking results\nconst result = attempt(() => Math.random());\nif (result instanceof Error) {\n  console.log('Error occurred:', result.message);\n} else {\n  console.log('Result:', result);\n}\n```"}]}]},"typeParameter":[{"id":394,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":395,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":396,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"要执行的函数。Function to execute"}]},"type":{"type":"reflection","declaration":{"id":397,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/utils/src/function.ts","line":64,"character":52,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L64"}],"signatures":[{"id":398,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":399,"name":"fnArgs","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":394,"name":"T"}}],"type":{"type":"reference","id":395,"name":"R"}}]}},"text":{"comment":"<p>要执行的函数。Function to execute</p>\n"}},{"id":400,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"传递给函数的参数。Arguments to pass to the function"}]},"type":{"type":"reference","id":394,"name":"T"},"text":{"comment":"<p>传递给函数的参数。Arguments to pass to the function</p>\n"}}],"type":{"type":"union","types":[{"type":"reference","name":"Error","qualifiedName":"Error","package":"typescript"},{"type":"reference","id":395,"name":"R"}]},"is":{"declaration":false},"location":{"query":"Function.Function.attempt","hash":"attempt"},"text":{"comment":"<h5>Function:</h5><p>attempt</p>\n<h5>Description:</h5><p>安全地执行函数并返回结果或发生的任何错误。Safely executes a function and returns either the result or any error that occurred</p>\n<h5>Returns:</h5><p>函数结果或错误对象。Either the function result or an Error object</p>\n<h5>Throws:</h5><p>永不抛出 - 所有错误都被捕获并返回。Never throws - all errors are caught and returned</p>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Successful execution</span>\n<span class=\"pl-en\">attempt</span>((<span class=\"pl-v\">a</span>, <span class=\"pl-v\">b</span>) <span class=\"pl-k\">=></span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">b</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>); <span class=\"pl-c\">// -> 3</span>\n<span class=\"pl-en\">attempt</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>success<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> 'success'</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Error handling</span>\n<span class=\"pl-en\">attempt</span>(() <span class=\"pl-k\">=></span> { <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Something went wrong<span class=\"pl-pds\">'</span></span>); }); <span class=\"pl-c\">// -> Error: Something went wrong</span>\n<span class=\"pl-en\">attempt</span>(<span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">parse</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>invalid json<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// -> SyntaxError: Unexpected token i in JSON</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Division by zero</span>\n<span class=\"pl-en\">attempt</span>((<span class=\"pl-v\">a</span>, <span class=\"pl-v\">b</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">b</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Division by zero<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">/</span> <span class=\"pl-smi\">b</span>;\n}, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// -> Error: Division by zero</span>\n</code></pre>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// Type checking results</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">attempt</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">random</span>());\n<span class=\"pl-k\">if</span> (<span class=\"pl-smi\">result</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-en\">Error</span>) {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Error occurred:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">message</span>);\n} <span class=\"pl-k\">else</span> {\n  <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Result:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">result</span>);\n}\n</code></pre>\n"},"sources":[{"fileName":"packages/utils/src/function.ts","fullFileName":"/home/runner/work/fe-tools/fe-tools/utils/packages/utils/src/function.ts","line":64,"character":0,"url":"https://github.com/MichealWayne/fe-tools/blob/e75b369/utils/packages/utils/src/function.ts#L64"}],"parentId":392}],"is":{"declaration":true},"location":{"query":"Function.Function.attempt","hash":""},"text":{},"parentId":391}
